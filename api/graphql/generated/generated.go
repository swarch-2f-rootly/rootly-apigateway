// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/google/uuid"
	"github.com/swarch-2f-rootly/rootly-apigateway/internal/domain"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Plant() PlantResolver
	Query() QueryResolver
	Sensor() SensorResolver
	Subscription() SubscriptionResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Alert struct {
		ID         func(childComplexity int) int
		IsRead     func(childComplexity int) int
		Message    func(childComplexity int) int
		Plant      func(childComplexity int) int
		PlantID    func(childComplexity int) int
		Priority   func(childComplexity int) int
		ResolvedAt func(childComplexity int) int
		Threshold  func(childComplexity int) int
		Timestamp  func(childComplexity int) int
		Type       func(childComplexity int) int
		Value      func(childComplexity int) int
	}

	AnalyticsFilter struct {
		EndTime   func(childComplexity int) int
		Limit     func(childComplexity int) int
		StartTime func(childComplexity int) int
	}

	AnalyticsReport struct {
		ControllerID      func(childComplexity int) int
		DataPointsCount   func(childComplexity int) int
		Filters           func(childComplexity int) int
		GeneratedAt       func(childComplexity int) int
		Metrics           func(childComplexity int) int
		MicrocontrollerID func(childComplexity int) int
	}

	ChartData struct {
		Humidity     func(childComplexity int) int
		LightLevel   func(childComplexity int) int
		PlantID      func(childComplexity int) int
		SoilHumidity func(childComplexity int) int
		Temperature  func(childComplexity int) int
		Time         func(childComplexity int) int
	}

	Coordinates struct {
		Lat func(childComplexity int) int
		Lng func(childComplexity int) int
	}

	DeviceOperationResult struct {
		Device  func(childComplexity int) int
		ID      func(childComplexity int) int
		Message func(childComplexity int) int
		Success func(childComplexity int) int
	}

	GlobalStats struct {
		ActiveMicrocontrollers  func(childComplexity int) int
		ActiveSensors           func(childComplexity int) int
		AlertPlants             func(childComplexity int) int
		AverageHumidity         func(childComplexity int) int
		AverageTemperature      func(childComplexity int) int
		CriticalPlants          func(childComplexity int) int
		EnabledMicrocontrollers func(childComplexity int) int
		HealthyPlants           func(childComplexity int) int
		LastUpdated             func(childComplexity int) int
		TotalMicrocontrollers   func(childComplexity int) int
		TotalPlants             func(childComplexity int) int
		Uptime                  func(childComplexity int) int
	}

	HealthStatus struct {
		Details   func(childComplexity int) int
		Service   func(childComplexity int) int
		Status    func(childComplexity int) int
		Timestamp func(childComplexity int) int
	}

	Location struct {
		Coordinates      func(childComplexity int) int
		Description      func(childComplexity int) int
		ID               func(childComplexity int) int
		Microcontrollers func(childComplexity int) int
		Name             func(childComplexity int) int
		Plants           func(childComplexity int) int
		Sensors          func(childComplexity int) int
	}

	MetricResult struct {
		CalculatedAt      func(childComplexity int) int
		ControllerID      func(childComplexity int) int
		Description       func(childComplexity int) int
		MetricName        func(childComplexity int) int
		MicrocontrollerID func(childComplexity int) int
		Unit              func(childComplexity int) int
		Value             func(childComplexity int) int
	}

	Microcontroller struct {
		BatteryLevel     func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		Enabled          func(childComplexity int) int
		ID               func(childComplexity int) int
		IsActive         func(childComplexity int) int
		LastReading      func(childComplexity int) int
		Location         func(childComplexity int) int
		Plant            func(childComplexity int) int
		PlantID          func(childComplexity int) int
		SignalStrength   func(childComplexity int) int
		Status           func(childComplexity int) int
		Type             func(childComplexity int) int
		UniqueID         func(childComplexity int) int
		UserAssociations func(childComplexity int) int
	}

	MultiReportResponse struct {
		GeneratedAt      func(childComplexity int) int
		Reports          func(childComplexity int) int
		TotalControllers func(childComplexity int) int
		TotalMetrics     func(childComplexity int) int
	}

	Mutation struct {
		ActivateUser                     func(childComplexity int, id uuid.UUID) int
		AssignMicrocontrollerToPlant     func(childComplexity int, plantID uuid.UUID, microcontrollerID uuid.UUID) int
		AssignSensorToPlant              func(childComplexity int, plantID uuid.UUID, sensorID string) int
		AssociateUserWithDevice          func(childComplexity int, input DeviceAssociationInput) int
		CalibrateMicrocontroller         func(childComplexity int, id uuid.UUID) int
		CalibrateSensor                  func(childComplexity int, id string) int
		ChangePassword                   func(childComplexity int, currentPassword string, newPassword string) int
		CreateLocation                   func(childComplexity int, input CreateLocationInput) int
		CreatePlant                      func(childComplexity int, input CreatePlantInput) int
		CreatePlantType                  func(childComplexity int, input CreatePlantTypeInput) int
		DeactivateUser                   func(childComplexity int, id uuid.UUID) int
		DeleteLocation                   func(childComplexity int, id uuid.UUID) int
		DeletePlant                      func(childComplexity int, id uuid.UUID) int
		DeletePlantType                  func(childComplexity int, id uuid.UUID) int
		DisableMicrocontroller           func(childComplexity int, id uuid.UUID) int
		DismissAlert                     func(childComplexity int, alertID uuid.UUID) int
		DismissNotification              func(childComplexity int, notificationID uuid.UUID) int
		EnableMicrocontroller            func(childComplexity int, id uuid.UUID) int
		Login                            func(childComplexity int, input LoginInput) int
		Logout                           func(childComplexity int) int
		MarkAlertAsRead                  func(childComplexity int, alertID uuid.UUID) int
		MarkAllAlertsAsRead              func(childComplexity int, plantID *uuid.UUID) int
		MarkAllNotificationsAsRead       func(childComplexity int, userID uuid.UUID) int
		MarkNotificationAsRead           func(childComplexity int, notificationID uuid.UUID) int
		RefreshToken                     func(childComplexity int, token string) int
		Register                         func(childComplexity int, input RegisterInput) int
		RemoveDeviceAssociation          func(childComplexity int, microcontrollerID uuid.UUID) int
		ResetThresholdsToDefault         func(childComplexity int, plantID uuid.UUID) int
		ResolveAlert                     func(childComplexity int, alertID uuid.UUID) int
		TerminateAllSessions             func(childComplexity int, userID uuid.UUID) int
		TerminateSession                 func(childComplexity int, sessionID string) int
		UnassignMicrocontrollerFromPlant func(childComplexity int, plantID uuid.UUID) int
		UnassignSensorFromPlant          func(childComplexity int, plantID uuid.UUID) int
		UpdateDeviceAssociation          func(childComplexity int, microcontrollerID uuid.UUID, plantID *uuid.UUID, role *domain.DeviceRole) int
		UpdateLocation                   func(childComplexity int, id uuid.UUID, input CreateLocationInput) int
		UpdateMicrocontroller            func(childComplexity int, id uuid.UUID, input DeviceUpdateInput) int
		UpdateMicrocontrollerStatus      func(childComplexity int, id uuid.UUID, status domain.SensorStatus) int
		UpdatePlant                      func(childComplexity int, id uuid.UUID, input UpdatePlantInput) int
		UpdatePlantType                  func(childComplexity int, id uuid.UUID, input CreatePlantTypeInput) int
		UpdateSensorStatus               func(childComplexity int, id string, status domain.SensorStatus) int
		UpdateThresholds                 func(childComplexity int, plantID uuid.UUID, thresholds []*ThresholdInput) int
		UpdateUserProfile                func(childComplexity int, id uuid.UUID, firstName *string, lastName *string, profilePhoto *graphql.Upload) int
	}

	Notification struct {
		ID        func(childComplexity int) int
		IsRead    func(childComplexity int) int
		Message   func(childComplexity int) int
		Plant     func(childComplexity int) int
		PlantID   func(childComplexity int) int
		Timestamp func(childComplexity int) int
		Title     func(childComplexity int) int
		Type      func(childComplexity int) int
		User      func(childComplexity int) int
		UserID    func(childComplexity int) int
	}

	Permission struct {
		Action      func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Resource    func(childComplexity int) int
	}

	Plant struct {
		Alerts          func(childComplexity int) int
		Change          func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Humidity        func(childComplexity int) int
		ID              func(childComplexity int) int
		Image           func(childComplexity int) int
		ImageURL        func(childComplexity int) int
		LastUpdate      func(childComplexity int) int
		LightLevel      func(childComplexity int) int
		Location        func(childComplexity int) int
		LocationName    func(childComplexity int) int
		Microcontroller func(childComplexity int) int
		Name            func(childComplexity int) int
		Owner           func(childComplexity int) int
		OwnerUserID     func(childComplexity int) int
		Score           func(childComplexity int) int
		Sensor          func(childComplexity int) int
		SoilHumidity    func(childComplexity int) int
		Status          func(childComplexity int) int
		Temperature     func(childComplexity int) int
		Thresholds      func(childComplexity int) int
		Type            func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
	}

	PlantType struct {
		Description         func(childComplexity int) int
		ID                  func(childComplexity int) int
		Image               func(childComplexity int) int
		Name                func(childComplexity int) int
		OptimalHumidity     func(childComplexity int) int
		OptimalLightLevel   func(childComplexity int) int
		OptimalSoilHumidity func(childComplexity int) int
		OptimalTemperature  func(childComplexity int) int
		Plants              func(childComplexity int) int
	}

	Query struct {
		CanUserAccessDevice                func(childComplexity int, deviceID uuid.UUID, requiredRole *domain.DeviceRole) int
		GetActiveMicrocontrollers          func(childComplexity int) int
		GetActiveSensors                   func(childComplexity int) int
		GetActiveSessions                  func(childComplexity int, userID uuid.UUID) int
		GetAlertsByPlant                   func(childComplexity int, plantID uuid.UUID) int
		GetAlertsByPriority                func(childComplexity int, priority domain.AlertPriority) int
		GetAlertsByType                    func(childComplexity int, typeArg domain.AlertType) int
		GetAllAlerts                       func(childComplexity int) int
		GetAllLocations                    func(childComplexity int) int
		GetAllMicrocontrollers             func(childComplexity int) int
		GetAllPlantTypes                   func(childComplexity int) int
		GetAllPlants                       func(childComplexity int) int
		GetAllSensors                      func(childComplexity int) int
		GetAllUsers                        func(childComplexity int) int
		GetBulkRealTimeData                func(childComplexity int, plantIds []uuid.UUID) int
		GetCurrentUser                     func(childComplexity int) int
		GetEnabledMicrocontrollers         func(childComplexity int) int
		GetGlobalStats                     func(childComplexity int) int
		GetHistoricalData                  func(childComplexity int, plantID uuid.UUID, period domain.TimePeriod, startTime *time.Time, endTime *time.Time, limit *int) int
		GetHistoricalDataByMicrocontroller func(childComplexity int, microcontrollerID uuid.UUID, period domain.TimePeriod, startTime *time.Time, endTime *time.Time, limit *int) int
		GetHistoricalDataBySensor          func(childComplexity int, sensorID string, period domain.TimePeriod, startTime *time.Time, endTime *time.Time, limit *int) int
		GetLocationByID                    func(childComplexity int, id uuid.UUID) int
		GetLocationStats                   func(childComplexity int, locationID uuid.UUID) int
		GetLocationWithPlants              func(childComplexity int, id uuid.UUID) int
		GetMicrocontrollerByID             func(childComplexity int, id uuid.UUID) int
		GetMicrocontrollerByUniqueID       func(childComplexity int, uniqueID string) int
		GetMicrocontrollersByLocation      func(childComplexity int, location string) int
		GetMicrocontrollersByType          func(childComplexity int, typeArg string) int
		GetMultiMetricReport               func(childComplexity int, input MultiReportInput) int
		GetPlantByID                       func(childComplexity int, id uuid.UUID) int
		GetPlantStats                      func(childComplexity int, plantID uuid.UUID) int
		GetPlantTypeByID                   func(childComplexity int, id uuid.UUID) int
		GetPlantsByLocation                func(childComplexity int, locationID uuid.UUID) int
		GetPlantsByLocationName            func(childComplexity int, locationName string) int
		GetPlantsByOwner                   func(childComplexity int, ownerID uuid.UUID) int
		GetPlantsByStatus                  func(childComplexity int, status domain.PlantStatus) int
		GetPlantsWithAlerts                func(childComplexity int) int
		GetRealTimeData                    func(childComplexity int, plantID uuid.UUID) int
		GetRealTimeDataByMicrocontroller   func(childComplexity int, microcontrollerID uuid.UUID) int
		GetRealTimeDataBySensor            func(childComplexity int, sensorID string) int
		GetSensorByID                      func(childComplexity int, id string) int
		GetSensorsByLocation               func(childComplexity int, locationID uuid.UUID) int
		GetSingleMetricReport              func(childComplexity int, controllerID string, metric string, filters *AnalyticsFilterInput) int
		GetSupportedMetrics                func(childComplexity int) int
		GetThresholds                      func(childComplexity int, plantID uuid.UUID) int
		GetThresholdsByType                func(childComplexity int, plantID uuid.UUID, sensorType domain.SensorType) int
		GetTrendAnalysis                   func(childComplexity int, controllerID string, metric string, interval string, filters *AnalyticsFilterInput) int
		GetUnreadAlerts                    func(childComplexity int) int
		GetUnreadNotifications             func(childComplexity int, userID uuid.UUID) int
		GetUserByID                        func(childComplexity int, id uuid.UUID) int
		GetUserDeviceAssociations          func(childComplexity int, userID uuid.UUID) int
		GetUserDeviceByID                  func(childComplexity int, deviceID uuid.UUID) int
		GetUserDeviceStats                 func(childComplexity int) int
		GetUserDevices                     func(childComplexity int, filters *DeviceFilterInput) int
		GetUserNotifications               func(childComplexity int, userID uuid.UUID) int
		GetUserOwnedPlants                 func(childComplexity int) int
		Health                             func(childComplexity int) int
	}

	Range struct {
		Max func(childComplexity int) int
		Min func(childComplexity int) int
	}

	RealTimeData struct {
		AirHumidity       func(childComplexity int) int
		LightLevel        func(childComplexity int) int
		Microcontroller   func(childComplexity int) int
		MicrocontrollerID func(childComplexity int) int
		Plant             func(childComplexity int) int
		PlantID           func(childComplexity int) int
		SensorID          func(childComplexity int) int
		SoilHumidity      func(childComplexity int) int
		Temperature       func(childComplexity int) int
		Timestamp         func(childComplexity int) int
	}

	Sensor struct {
		BatteryLevel    func(childComplexity int) int
		ID              func(childComplexity int) int
		IsActive        func(childComplexity int) int
		LastReading     func(childComplexity int) int
		Location        func(childComplexity int) int
		Microcontroller func(childComplexity int) int
		Plant           func(childComplexity int) int
		PlantID         func(childComplexity int) int
		SignalStrength  func(childComplexity int) int
		Status          func(childComplexity int) int
	}

	Session struct {
		DeviceInfo   func(childComplexity int) int
		ExpiresAt    func(childComplexity int) int
		IsActive     func(childComplexity int) int
		LastActivity func(childComplexity int) int
		Token        func(childComplexity int) int
		User         func(childComplexity int) int
		UserID       func(childComplexity int) int
	}

	Subscription struct {
		AlertStatusChanged            func(childComplexity int, alertID *uuid.UUID) int
		DeviceConnectivityChanged     func(childComplexity int) int
		GlobalStatsChanged            func(childComplexity int) int
		MicrocontrollerStatusChanged  func(childComplexity int, microcontrollerID *uuid.UUID) int
		NewAlerts                     func(childComplexity int, plantID *uuid.UUID) int
		NewNotifications              func(childComplexity int, userID uuid.UUID) int
		PlantHealthScoreChanged       func(childComplexity int, plantID *uuid.UUID) int
		PlantStatusChanged            func(childComplexity int, plantID *uuid.UUID) int
		RealTimeData                  func(childComplexity int, plantID *uuid.UUID) int
		RealTimeDataByMicrocontroller func(childComplexity int, microcontrollerID *uuid.UUID) int
		RealTimeDataBySensor          func(childComplexity int, sensorID *string) int
		SensorStatusChanged           func(childComplexity int, sensorID *string) int
		SystemHealthChanged           func(childComplexity int) int
		UserDeviceAssociationChanged  func(childComplexity int, userID uuid.UUID) int
	}

	Threshold struct {
		CriticalMax func(childComplexity int) int
		CriticalMin func(childComplexity int) int
		ID          func(childComplexity int) int
		MaxValue    func(childComplexity int) int
		MinValue    func(childComplexity int) int
		Plant       func(childComplexity int) int
		PlantID     func(childComplexity int) int
		SensorType  func(childComplexity int) int
		Unit        func(childComplexity int) int
	}

	TrendAnalysis struct {
		AverageValue      func(childComplexity int) int
		ControllerID      func(childComplexity int) int
		DataPoints        func(childComplexity int) int
		Filters           func(childComplexity int) int
		GeneratedAt       func(childComplexity int) int
		Interval          func(childComplexity int) int
		MaxValue          func(childComplexity int) int
		MetricName        func(childComplexity int) int
		MicrocontrollerID func(childComplexity int) int
		MinValue          func(childComplexity int) int
		TotalPoints       func(childComplexity int) int
	}

	TrendDataPoint struct {
		Interval  func(childComplexity int) int
		Timestamp func(childComplexity int) int
		Value     func(childComplexity int) int
	}

	User struct {
		CreatedAt          func(childComplexity int) int
		DeviceAssociations func(childComplexity int) int
		Email              func(childComplexity int) int
		FirstName          func(childComplexity int) int
		ID                 func(childComplexity int) int
		IsActive           func(childComplexity int) int
		LastLogin          func(childComplexity int) int
		LastName           func(childComplexity int) int
		Name               func(childComplexity int) int
		OwnedPlants        func(childComplexity int) int
		Permissions        func(childComplexity int) int
		ProfilePhotoURL    func(childComplexity int) int
		Role               func(childComplexity int) int
	}

	UserDevice struct {
		Enabled         func(childComplexity int) int
		ID              func(childComplexity int) int
		Location        func(childComplexity int) int
		Microcontroller func(childComplexity int) int
		Plant           func(childComplexity int) int
		Role            func(childComplexity int) int
		Type            func(childComplexity int) int
		UniqueID        func(childComplexity int) int
	}

	UserDeviceList struct {
		Devices     func(childComplexity int) int
		HasNextPage func(childComplexity int) int
		TotalCount  func(childComplexity int) int
	}

	UserMicrocontrollerAssociation struct {
		CreatedAt         func(childComplexity int) int
		Microcontroller   func(childComplexity int) int
		MicrocontrollerID func(childComplexity int) int
		Role              func(childComplexity int) int
		User              func(childComplexity int) int
		UserID            func(childComplexity int) int
	}

	UserRole struct {
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Permissions func(childComplexity int) int
		Users       func(childComplexity int) int
	}
}

type MutationResolver interface {
	Login(ctx context.Context, input LoginInput) (*domain.Session, error)
	Register(ctx context.Context, input RegisterInput) (*domain.User, error)
	Logout(ctx context.Context) (bool, error)
	RefreshToken(ctx context.Context, token string) (*domain.Session, error)
	CreatePlant(ctx context.Context, input CreatePlantInput) (*domain.Plant, error)
	UpdatePlant(ctx context.Context, id uuid.UUID, input UpdatePlantInput) (*domain.Plant, error)
	DeletePlant(ctx context.Context, id uuid.UUID) (bool, error)
	AssignMicrocontrollerToPlant(ctx context.Context, plantID uuid.UUID, microcontrollerID uuid.UUID) (*domain.Plant, error)
	UnassignMicrocontrollerFromPlant(ctx context.Context, plantID uuid.UUID) (*domain.Plant, error)
	AssignSensorToPlant(ctx context.Context, plantID uuid.UUID, sensorID string) (*domain.Plant, error)
	UnassignSensorFromPlant(ctx context.Context, plantID uuid.UUID) (*domain.Plant, error)
	UpdateMicrocontrollerStatus(ctx context.Context, id uuid.UUID, status domain.SensorStatus) (*domain.Microcontroller, error)
	EnableMicrocontroller(ctx context.Context, id uuid.UUID) (*domain.Microcontroller, error)
	DisableMicrocontroller(ctx context.Context, id uuid.UUID) (*domain.Microcontroller, error)
	UpdateMicrocontroller(ctx context.Context, id uuid.UUID, input DeviceUpdateInput) (*domain.Microcontroller, error)
	CalibrateMicrocontroller(ctx context.Context, id uuid.UUID) (*domain.Microcontroller, error)
	AssociateUserWithDevice(ctx context.Context, input DeviceAssociationInput) (*domain.UserMicrocontrollerAssociation, error)
	UpdateDeviceAssociation(ctx context.Context, microcontrollerID uuid.UUID, plantID *uuid.UUID, role *domain.DeviceRole) (*domain.UserMicrocontrollerAssociation, error)
	RemoveDeviceAssociation(ctx context.Context, microcontrollerID uuid.UUID) (bool, error)
	UpdateSensorStatus(ctx context.Context, id string, status domain.SensorStatus) (*domain.Sensor, error)
	CalibrateSensor(ctx context.Context, id string) (*domain.Sensor, error)
	MarkAlertAsRead(ctx context.Context, alertID uuid.UUID) (*domain.Alert, error)
	MarkAllAlertsAsRead(ctx context.Context, plantID *uuid.UUID) (bool, error)
	ResolveAlert(ctx context.Context, alertID uuid.UUID) (*domain.Alert, error)
	DismissAlert(ctx context.Context, alertID uuid.UUID) (bool, error)
	MarkNotificationAsRead(ctx context.Context, notificationID uuid.UUID) (*domain.Notification, error)
	MarkAllNotificationsAsRead(ctx context.Context, userID uuid.UUID) (bool, error)
	DismissNotification(ctx context.Context, notificationID uuid.UUID) (bool, error)
	UpdateThresholds(ctx context.Context, plantID uuid.UUID, thresholds []*ThresholdInput) ([]*domain.Threshold, error)
	ResetThresholdsToDefault(ctx context.Context, plantID uuid.UUID) ([]*domain.Threshold, error)
	CreateLocation(ctx context.Context, input CreateLocationInput) (*domain.Location, error)
	UpdateLocation(ctx context.Context, id uuid.UUID, input CreateLocationInput) (*domain.Location, error)
	DeleteLocation(ctx context.Context, id uuid.UUID) (bool, error)
	CreatePlantType(ctx context.Context, input CreatePlantTypeInput) (*domain.PlantType, error)
	UpdatePlantType(ctx context.Context, id uuid.UUID, input CreatePlantTypeInput) (*domain.PlantType, error)
	DeletePlantType(ctx context.Context, id uuid.UUID) (bool, error)
	UpdateUserProfile(ctx context.Context, id uuid.UUID, firstName *string, lastName *string, profilePhoto *graphql.Upload) (*domain.User, error)
	DeactivateUser(ctx context.Context, id uuid.UUID) (*domain.User, error)
	ActivateUser(ctx context.Context, id uuid.UUID) (*domain.User, error)
	ChangePassword(ctx context.Context, currentPassword string, newPassword string) (bool, error)
	TerminateSession(ctx context.Context, sessionID string) (bool, error)
	TerminateAllSessions(ctx context.Context, userID uuid.UUID) (bool, error)
}
type PlantResolver interface {
	Sensor(ctx context.Context, obj *domain.Plant) (*domain.Sensor, error)

	Alerts(ctx context.Context, obj *domain.Plant) (int, error)
}
type QueryResolver interface {
	Health(ctx context.Context) (*domain.HealthStatus, error)
	GetAllPlants(ctx context.Context) ([]*domain.Plant, error)
	GetPlantByID(ctx context.Context, id uuid.UUID) (*domain.Plant, error)
	GetPlantsByStatus(ctx context.Context, status domain.PlantStatus) ([]*domain.Plant, error)
	GetPlantsByLocation(ctx context.Context, locationID uuid.UUID) ([]*domain.Plant, error)
	GetPlantsByLocationName(ctx context.Context, locationName string) ([]*domain.Plant, error)
	GetPlantsWithAlerts(ctx context.Context) ([]*domain.Plant, error)
	GetPlantsByOwner(ctx context.Context, ownerID uuid.UUID) ([]*domain.Plant, error)
	GetUserOwnedPlants(ctx context.Context) ([]*domain.Plant, error)
	GetAllMicrocontrollers(ctx context.Context) ([]*domain.Microcontroller, error)
	GetMicrocontrollerByID(ctx context.Context, id uuid.UUID) (*domain.Microcontroller, error)
	GetMicrocontrollerByUniqueID(ctx context.Context, uniqueID string) (*domain.Microcontroller, error)
	GetActiveMicrocontrollers(ctx context.Context) ([]*domain.Microcontroller, error)
	GetEnabledMicrocontrollers(ctx context.Context) ([]*domain.Microcontroller, error)
	GetMicrocontrollersByLocation(ctx context.Context, location string) ([]*domain.Microcontroller, error)
	GetMicrocontrollersByType(ctx context.Context, typeArg string) ([]*domain.Microcontroller, error)
	GetUserDevices(ctx context.Context, filters *DeviceFilterInput) (*domain.UserDeviceList, error)
	GetUserDeviceByID(ctx context.Context, deviceID uuid.UUID) (*domain.UserDevice, error)
	GetUserDeviceAssociations(ctx context.Context, userID uuid.UUID) ([]*domain.UserMicrocontrollerAssociation, error)
	CanUserAccessDevice(ctx context.Context, deviceID uuid.UUID, requiredRole *domain.DeviceRole) (bool, error)
	GetAllSensors(ctx context.Context) ([]*domain.Sensor, error)
	GetSensorByID(ctx context.Context, id string) (*domain.Sensor, error)
	GetActiveSensors(ctx context.Context) ([]*domain.Sensor, error)
	GetSensorsByLocation(ctx context.Context, locationID uuid.UUID) ([]*domain.Sensor, error)
	GetRealTimeData(ctx context.Context, plantID uuid.UUID) (*domain.RealTimeData, error)
	GetRealTimeDataBySensor(ctx context.Context, sensorID string) (*domain.RealTimeData, error)
	GetRealTimeDataByMicrocontroller(ctx context.Context, microcontrollerID uuid.UUID) (*domain.RealTimeData, error)
	GetBulkRealTimeData(ctx context.Context, plantIds []uuid.UUID) ([]*domain.RealTimeData, error)
	GetHistoricalData(ctx context.Context, plantID uuid.UUID, period domain.TimePeriod, startTime *time.Time, endTime *time.Time, limit *int) ([]*domain.ChartData, error)
	GetHistoricalDataBySensor(ctx context.Context, sensorID string, period domain.TimePeriod, startTime *time.Time, endTime *time.Time, limit *int) ([]*domain.ChartData, error)
	GetHistoricalDataByMicrocontroller(ctx context.Context, microcontrollerID uuid.UUID, period domain.TimePeriod, startTime *time.Time, endTime *time.Time, limit *int) ([]*domain.ChartData, error)
	GetAllAlerts(ctx context.Context) ([]*domain.Alert, error)
	GetAlertsByPlant(ctx context.Context, plantID uuid.UUID) ([]*domain.Alert, error)
	GetUnreadAlerts(ctx context.Context) ([]*domain.Alert, error)
	GetAlertsByPriority(ctx context.Context, priority domain.AlertPriority) ([]*domain.Alert, error)
	GetAlertsByType(ctx context.Context, typeArg domain.AlertType) ([]*domain.Alert, error)
	GetCurrentUser(ctx context.Context) (*domain.User, error)
	GetUserByID(ctx context.Context, id uuid.UUID) (*domain.User, error)
	GetAllUsers(ctx context.Context) ([]*domain.User, error)
	GetUserNotifications(ctx context.Context, userID uuid.UUID) ([]*domain.Notification, error)
	GetUnreadNotifications(ctx context.Context, userID uuid.UUID) ([]*domain.Notification, error)
	GetAllLocations(ctx context.Context) ([]*domain.Location, error)
	GetLocationByID(ctx context.Context, id uuid.UUID) (*domain.Location, error)
	GetLocationWithPlants(ctx context.Context, id uuid.UUID) (*domain.Location, error)
	GetAllPlantTypes(ctx context.Context) ([]*domain.PlantType, error)
	GetPlantTypeByID(ctx context.Context, id uuid.UUID) (*domain.PlantType, error)
	GetThresholds(ctx context.Context, plantID uuid.UUID) ([]*domain.Threshold, error)
	GetThresholdsByType(ctx context.Context, plantID uuid.UUID, sensorType domain.SensorType) (*domain.Threshold, error)
	GetGlobalStats(ctx context.Context) (*domain.GlobalStats, error)
	GetPlantStats(ctx context.Context, plantID uuid.UUID) (*domain.GlobalStats, error)
	GetLocationStats(ctx context.Context, locationID uuid.UUID) (*domain.GlobalStats, error)
	GetUserDeviceStats(ctx context.Context) (*domain.GlobalStats, error)
	GetSingleMetricReport(ctx context.Context, controllerID string, metric string, filters *AnalyticsFilterInput) (*domain.AnalyticsReport, error)
	GetMultiMetricReport(ctx context.Context, input MultiReportInput) (*domain.MultiReportResponse, error)
	GetTrendAnalysis(ctx context.Context, controllerID string, metric string, interval string, filters *AnalyticsFilterInput) (*domain.TrendAnalysis, error)
	GetSupportedMetrics(ctx context.Context) ([]string, error)
	GetActiveSessions(ctx context.Context, userID uuid.UUID) ([]*domain.Session, error)
}
type SensorResolver interface {
	PlantID(ctx context.Context, obj *domain.Sensor) (*string, error)
}
type SubscriptionResolver interface {
	RealTimeData(ctx context.Context, plantID *uuid.UUID) (<-chan *domain.RealTimeData, error)
	RealTimeDataBySensor(ctx context.Context, sensorID *string) (<-chan *domain.RealTimeData, error)
	RealTimeDataByMicrocontroller(ctx context.Context, microcontrollerID *uuid.UUID) (<-chan *domain.RealTimeData, error)
	NewAlerts(ctx context.Context, plantID *uuid.UUID) (<-chan *domain.Alert, error)
	AlertStatusChanged(ctx context.Context, alertID *uuid.UUID) (<-chan *domain.Alert, error)
	PlantStatusChanged(ctx context.Context, plantID *uuid.UUID) (<-chan *domain.Plant, error)
	PlantHealthScoreChanged(ctx context.Context, plantID *uuid.UUID) (<-chan *domain.Plant, error)
	MicrocontrollerStatusChanged(ctx context.Context, microcontrollerID *uuid.UUID) (<-chan *domain.Microcontroller, error)
	SensorStatusChanged(ctx context.Context, sensorID *string) (<-chan *domain.Sensor, error)
	DeviceConnectivityChanged(ctx context.Context) (<-chan *domain.Microcontroller, error)
	UserDeviceAssociationChanged(ctx context.Context, userID uuid.UUID) (<-chan *domain.UserMicrocontrollerAssociation, error)
	NewNotifications(ctx context.Context, userID uuid.UUID) (<-chan *domain.Notification, error)
	SystemHealthChanged(ctx context.Context) (<-chan *domain.HealthStatus, error)
	GlobalStatsChanged(ctx context.Context) (<-chan *domain.GlobalStats, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(ctx context.Context, typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Alert.id":
		if e.complexity.Alert.ID == nil {
			break
		}

		return e.complexity.Alert.ID(childComplexity), true
	case "Alert.isRead":
		if e.complexity.Alert.IsRead == nil {
			break
		}

		return e.complexity.Alert.IsRead(childComplexity), true
	case "Alert.message":
		if e.complexity.Alert.Message == nil {
			break
		}

		return e.complexity.Alert.Message(childComplexity), true
	case "Alert.plant":
		if e.complexity.Alert.Plant == nil {
			break
		}

		return e.complexity.Alert.Plant(childComplexity), true
	case "Alert.plantId":
		if e.complexity.Alert.PlantID == nil {
			break
		}

		return e.complexity.Alert.PlantID(childComplexity), true
	case "Alert.priority":
		if e.complexity.Alert.Priority == nil {
			break
		}

		return e.complexity.Alert.Priority(childComplexity), true
	case "Alert.resolvedAt":
		if e.complexity.Alert.ResolvedAt == nil {
			break
		}

		return e.complexity.Alert.ResolvedAt(childComplexity), true
	case "Alert.threshold":
		if e.complexity.Alert.Threshold == nil {
			break
		}

		return e.complexity.Alert.Threshold(childComplexity), true
	case "Alert.timestamp":
		if e.complexity.Alert.Timestamp == nil {
			break
		}

		return e.complexity.Alert.Timestamp(childComplexity), true
	case "Alert.type":
		if e.complexity.Alert.Type == nil {
			break
		}

		return e.complexity.Alert.Type(childComplexity), true
	case "Alert.value":
		if e.complexity.Alert.Value == nil {
			break
		}

		return e.complexity.Alert.Value(childComplexity), true

	case "AnalyticsFilter.endTime":
		if e.complexity.AnalyticsFilter.EndTime == nil {
			break
		}

		return e.complexity.AnalyticsFilter.EndTime(childComplexity), true
	case "AnalyticsFilter.limit":
		if e.complexity.AnalyticsFilter.Limit == nil {
			break
		}

		return e.complexity.AnalyticsFilter.Limit(childComplexity), true
	case "AnalyticsFilter.startTime":
		if e.complexity.AnalyticsFilter.StartTime == nil {
			break
		}

		return e.complexity.AnalyticsFilter.StartTime(childComplexity), true

	case "AnalyticsReport.controllerId":
		if e.complexity.AnalyticsReport.ControllerID == nil {
			break
		}

		return e.complexity.AnalyticsReport.ControllerID(childComplexity), true
	case "AnalyticsReport.dataPointsCount":
		if e.complexity.AnalyticsReport.DataPointsCount == nil {
			break
		}

		return e.complexity.AnalyticsReport.DataPointsCount(childComplexity), true
	case "AnalyticsReport.filters":
		if e.complexity.AnalyticsReport.Filters == nil {
			break
		}

		return e.complexity.AnalyticsReport.Filters(childComplexity), true
	case "AnalyticsReport.generatedAt":
		if e.complexity.AnalyticsReport.GeneratedAt == nil {
			break
		}

		return e.complexity.AnalyticsReport.GeneratedAt(childComplexity), true
	case "AnalyticsReport.metrics":
		if e.complexity.AnalyticsReport.Metrics == nil {
			break
		}

		return e.complexity.AnalyticsReport.Metrics(childComplexity), true
	case "AnalyticsReport.microcontrollerId":
		if e.complexity.AnalyticsReport.MicrocontrollerID == nil {
			break
		}

		return e.complexity.AnalyticsReport.MicrocontrollerID(childComplexity), true

	case "ChartData.humidity":
		if e.complexity.ChartData.Humidity == nil {
			break
		}

		return e.complexity.ChartData.Humidity(childComplexity), true
	case "ChartData.lightLevel":
		if e.complexity.ChartData.LightLevel == nil {
			break
		}

		return e.complexity.ChartData.LightLevel(childComplexity), true
	case "ChartData.plantId":
		if e.complexity.ChartData.PlantID == nil {
			break
		}

		return e.complexity.ChartData.PlantID(childComplexity), true
	case "ChartData.soilHumidity":
		if e.complexity.ChartData.SoilHumidity == nil {
			break
		}

		return e.complexity.ChartData.SoilHumidity(childComplexity), true
	case "ChartData.temperature":
		if e.complexity.ChartData.Temperature == nil {
			break
		}

		return e.complexity.ChartData.Temperature(childComplexity), true
	case "ChartData.time":
		if e.complexity.ChartData.Time == nil {
			break
		}

		return e.complexity.ChartData.Time(childComplexity), true

	case "Coordinates.lat":
		if e.complexity.Coordinates.Lat == nil {
			break
		}

		return e.complexity.Coordinates.Lat(childComplexity), true
	case "Coordinates.lng":
		if e.complexity.Coordinates.Lng == nil {
			break
		}

		return e.complexity.Coordinates.Lng(childComplexity), true

	case "DeviceOperationResult.device":
		if e.complexity.DeviceOperationResult.Device == nil {
			break
		}

		return e.complexity.DeviceOperationResult.Device(childComplexity), true
	case "DeviceOperationResult.id":
		if e.complexity.DeviceOperationResult.ID == nil {
			break
		}

		return e.complexity.DeviceOperationResult.ID(childComplexity), true
	case "DeviceOperationResult.message":
		if e.complexity.DeviceOperationResult.Message == nil {
			break
		}

		return e.complexity.DeviceOperationResult.Message(childComplexity), true
	case "DeviceOperationResult.success":
		if e.complexity.DeviceOperationResult.Success == nil {
			break
		}

		return e.complexity.DeviceOperationResult.Success(childComplexity), true

	case "GlobalStats.activeMicrocontrollers":
		if e.complexity.GlobalStats.ActiveMicrocontrollers == nil {
			break
		}

		return e.complexity.GlobalStats.ActiveMicrocontrollers(childComplexity), true
	case "GlobalStats.activeSensors":
		if e.complexity.GlobalStats.ActiveSensors == nil {
			break
		}

		return e.complexity.GlobalStats.ActiveSensors(childComplexity), true
	case "GlobalStats.alertPlants":
		if e.complexity.GlobalStats.AlertPlants == nil {
			break
		}

		return e.complexity.GlobalStats.AlertPlants(childComplexity), true
	case "GlobalStats.averageHumidity":
		if e.complexity.GlobalStats.AverageHumidity == nil {
			break
		}

		return e.complexity.GlobalStats.AverageHumidity(childComplexity), true
	case "GlobalStats.averageTemperature":
		if e.complexity.GlobalStats.AverageTemperature == nil {
			break
		}

		return e.complexity.GlobalStats.AverageTemperature(childComplexity), true
	case "GlobalStats.criticalPlants":
		if e.complexity.GlobalStats.CriticalPlants == nil {
			break
		}

		return e.complexity.GlobalStats.CriticalPlants(childComplexity), true
	case "GlobalStats.enabledMicrocontrollers":
		if e.complexity.GlobalStats.EnabledMicrocontrollers == nil {
			break
		}

		return e.complexity.GlobalStats.EnabledMicrocontrollers(childComplexity), true
	case "GlobalStats.healthyPlants":
		if e.complexity.GlobalStats.HealthyPlants == nil {
			break
		}

		return e.complexity.GlobalStats.HealthyPlants(childComplexity), true
	case "GlobalStats.lastUpdated":
		if e.complexity.GlobalStats.LastUpdated == nil {
			break
		}

		return e.complexity.GlobalStats.LastUpdated(childComplexity), true
	case "GlobalStats.totalMicrocontrollers":
		if e.complexity.GlobalStats.TotalMicrocontrollers == nil {
			break
		}

		return e.complexity.GlobalStats.TotalMicrocontrollers(childComplexity), true
	case "GlobalStats.totalPlants":
		if e.complexity.GlobalStats.TotalPlants == nil {
			break
		}

		return e.complexity.GlobalStats.TotalPlants(childComplexity), true
	case "GlobalStats.uptime":
		if e.complexity.GlobalStats.Uptime == nil {
			break
		}

		return e.complexity.GlobalStats.Uptime(childComplexity), true

	case "HealthStatus.details":
		if e.complexity.HealthStatus.Details == nil {
			break
		}

		return e.complexity.HealthStatus.Details(childComplexity), true
	case "HealthStatus.service":
		if e.complexity.HealthStatus.Service == nil {
			break
		}

		return e.complexity.HealthStatus.Service(childComplexity), true
	case "HealthStatus.status":
		if e.complexity.HealthStatus.Status == nil {
			break
		}

		return e.complexity.HealthStatus.Status(childComplexity), true
	case "HealthStatus.timestamp":
		if e.complexity.HealthStatus.Timestamp == nil {
			break
		}

		return e.complexity.HealthStatus.Timestamp(childComplexity), true

	case "Location.coordinates":
		if e.complexity.Location.Coordinates == nil {
			break
		}

		return e.complexity.Location.Coordinates(childComplexity), true
	case "Location.description":
		if e.complexity.Location.Description == nil {
			break
		}

		return e.complexity.Location.Description(childComplexity), true
	case "Location.id":
		if e.complexity.Location.ID == nil {
			break
		}

		return e.complexity.Location.ID(childComplexity), true
	case "Location.microcontrollers":
		if e.complexity.Location.Microcontrollers == nil {
			break
		}

		return e.complexity.Location.Microcontrollers(childComplexity), true
	case "Location.name":
		if e.complexity.Location.Name == nil {
			break
		}

		return e.complexity.Location.Name(childComplexity), true
	case "Location.plants":
		if e.complexity.Location.Plants == nil {
			break
		}

		return e.complexity.Location.Plants(childComplexity), true
	case "Location.sensors":
		if e.complexity.Location.Sensors == nil {
			break
		}

		return e.complexity.Location.Sensors(childComplexity), true

	case "MetricResult.calculatedAt":
		if e.complexity.MetricResult.CalculatedAt == nil {
			break
		}

		return e.complexity.MetricResult.CalculatedAt(childComplexity), true
	case "MetricResult.controllerId":
		if e.complexity.MetricResult.ControllerID == nil {
			break
		}

		return e.complexity.MetricResult.ControllerID(childComplexity), true
	case "MetricResult.description":
		if e.complexity.MetricResult.Description == nil {
			break
		}

		return e.complexity.MetricResult.Description(childComplexity), true
	case "MetricResult.metricName":
		if e.complexity.MetricResult.MetricName == nil {
			break
		}

		return e.complexity.MetricResult.MetricName(childComplexity), true
	case "MetricResult.microcontrollerId":
		if e.complexity.MetricResult.MicrocontrollerID == nil {
			break
		}

		return e.complexity.MetricResult.MicrocontrollerID(childComplexity), true
	case "MetricResult.unit":
		if e.complexity.MetricResult.Unit == nil {
			break
		}

		return e.complexity.MetricResult.Unit(childComplexity), true
	case "MetricResult.value":
		if e.complexity.MetricResult.Value == nil {
			break
		}

		return e.complexity.MetricResult.Value(childComplexity), true

	case "Microcontroller.batteryLevel":
		if e.complexity.Microcontroller.BatteryLevel == nil {
			break
		}

		return e.complexity.Microcontroller.BatteryLevel(childComplexity), true
	case "Microcontroller.createdAt":
		if e.complexity.Microcontroller.CreatedAt == nil {
			break
		}

		return e.complexity.Microcontroller.CreatedAt(childComplexity), true
	case "Microcontroller.enabled":
		if e.complexity.Microcontroller.Enabled == nil {
			break
		}

		return e.complexity.Microcontroller.Enabled(childComplexity), true
	case "Microcontroller.id":
		if e.complexity.Microcontroller.ID == nil {
			break
		}

		return e.complexity.Microcontroller.ID(childComplexity), true
	case "Microcontroller.isActive":
		if e.complexity.Microcontroller.IsActive == nil {
			break
		}

		return e.complexity.Microcontroller.IsActive(childComplexity), true
	case "Microcontroller.lastReading":
		if e.complexity.Microcontroller.LastReading == nil {
			break
		}

		return e.complexity.Microcontroller.LastReading(childComplexity), true
	case "Microcontroller.location":
		if e.complexity.Microcontroller.Location == nil {
			break
		}

		return e.complexity.Microcontroller.Location(childComplexity), true
	case "Microcontroller.plant":
		if e.complexity.Microcontroller.Plant == nil {
			break
		}

		return e.complexity.Microcontroller.Plant(childComplexity), true
	case "Microcontroller.plantId":
		if e.complexity.Microcontroller.PlantID == nil {
			break
		}

		return e.complexity.Microcontroller.PlantID(childComplexity), true
	case "Microcontroller.signalStrength":
		if e.complexity.Microcontroller.SignalStrength == nil {
			break
		}

		return e.complexity.Microcontroller.SignalStrength(childComplexity), true
	case "Microcontroller.status":
		if e.complexity.Microcontroller.Status == nil {
			break
		}

		return e.complexity.Microcontroller.Status(childComplexity), true
	case "Microcontroller.type":
		if e.complexity.Microcontroller.Type == nil {
			break
		}

		return e.complexity.Microcontroller.Type(childComplexity), true
	case "Microcontroller.uniqueId":
		if e.complexity.Microcontroller.UniqueID == nil {
			break
		}

		return e.complexity.Microcontroller.UniqueID(childComplexity), true
	case "Microcontroller.userAssociations":
		if e.complexity.Microcontroller.UserAssociations == nil {
			break
		}

		return e.complexity.Microcontroller.UserAssociations(childComplexity), true

	case "MultiReportResponse.generatedAt":
		if e.complexity.MultiReportResponse.GeneratedAt == nil {
			break
		}

		return e.complexity.MultiReportResponse.GeneratedAt(childComplexity), true
	case "MultiReportResponse.reports":
		if e.complexity.MultiReportResponse.Reports == nil {
			break
		}

		return e.complexity.MultiReportResponse.Reports(childComplexity), true
	case "MultiReportResponse.totalControllers":
		if e.complexity.MultiReportResponse.TotalControllers == nil {
			break
		}

		return e.complexity.MultiReportResponse.TotalControllers(childComplexity), true
	case "MultiReportResponse.totalMetrics":
		if e.complexity.MultiReportResponse.TotalMetrics == nil {
			break
		}

		return e.complexity.MultiReportResponse.TotalMetrics(childComplexity), true

	case "Mutation.activateUser":
		if e.complexity.Mutation.ActivateUser == nil {
			break
		}

		args, err := ec.field_Mutation_activateUser_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ActivateUser(childComplexity, args["id"].(uuid.UUID)), true
	case "Mutation.assignMicrocontrollerToPlant":
		if e.complexity.Mutation.AssignMicrocontrollerToPlant == nil {
			break
		}

		args, err := ec.field_Mutation_assignMicrocontrollerToPlant_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AssignMicrocontrollerToPlant(childComplexity, args["plantId"].(uuid.UUID), args["microcontrollerId"].(uuid.UUID)), true
	case "Mutation.assignSensorToPlant":
		if e.complexity.Mutation.AssignSensorToPlant == nil {
			break
		}

		args, err := ec.field_Mutation_assignSensorToPlant_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AssignSensorToPlant(childComplexity, args["plantId"].(uuid.UUID), args["sensorId"].(string)), true
	case "Mutation.associateUserWithDevice":
		if e.complexity.Mutation.AssociateUserWithDevice == nil {
			break
		}

		args, err := ec.field_Mutation_associateUserWithDevice_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AssociateUserWithDevice(childComplexity, args["input"].(DeviceAssociationInput)), true
	case "Mutation.calibrateMicrocontroller":
		if e.complexity.Mutation.CalibrateMicrocontroller == nil {
			break
		}

		args, err := ec.field_Mutation_calibrateMicrocontroller_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CalibrateMicrocontroller(childComplexity, args["id"].(uuid.UUID)), true
	case "Mutation.calibrateSensor":
		if e.complexity.Mutation.CalibrateSensor == nil {
			break
		}

		args, err := ec.field_Mutation_calibrateSensor_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CalibrateSensor(childComplexity, args["id"].(string)), true
	case "Mutation.changePassword":
		if e.complexity.Mutation.ChangePassword == nil {
			break
		}

		args, err := ec.field_Mutation_changePassword_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ChangePassword(childComplexity, args["currentPassword"].(string), args["newPassword"].(string)), true
	case "Mutation.createLocation":
		if e.complexity.Mutation.CreateLocation == nil {
			break
		}

		args, err := ec.field_Mutation_createLocation_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateLocation(childComplexity, args["input"].(CreateLocationInput)), true
	case "Mutation.createPlant":
		if e.complexity.Mutation.CreatePlant == nil {
			break
		}

		args, err := ec.field_Mutation_createPlant_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePlant(childComplexity, args["input"].(CreatePlantInput)), true
	case "Mutation.createPlantType":
		if e.complexity.Mutation.CreatePlantType == nil {
			break
		}

		args, err := ec.field_Mutation_createPlantType_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePlantType(childComplexity, args["input"].(CreatePlantTypeInput)), true
	case "Mutation.deactivateUser":
		if e.complexity.Mutation.DeactivateUser == nil {
			break
		}

		args, err := ec.field_Mutation_deactivateUser_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeactivateUser(childComplexity, args["id"].(uuid.UUID)), true
	case "Mutation.deleteLocation":
		if e.complexity.Mutation.DeleteLocation == nil {
			break
		}

		args, err := ec.field_Mutation_deleteLocation_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLocation(childComplexity, args["id"].(uuid.UUID)), true
	case "Mutation.deletePlant":
		if e.complexity.Mutation.DeletePlant == nil {
			break
		}

		args, err := ec.field_Mutation_deletePlant_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePlant(childComplexity, args["id"].(uuid.UUID)), true
	case "Mutation.deletePlantType":
		if e.complexity.Mutation.DeletePlantType == nil {
			break
		}

		args, err := ec.field_Mutation_deletePlantType_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePlantType(childComplexity, args["id"].(uuid.UUID)), true
	case "Mutation.disableMicrocontroller":
		if e.complexity.Mutation.DisableMicrocontroller == nil {
			break
		}

		args, err := ec.field_Mutation_disableMicrocontroller_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DisableMicrocontroller(childComplexity, args["id"].(uuid.UUID)), true
	case "Mutation.dismissAlert":
		if e.complexity.Mutation.DismissAlert == nil {
			break
		}

		args, err := ec.field_Mutation_dismissAlert_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DismissAlert(childComplexity, args["alertId"].(uuid.UUID)), true
	case "Mutation.dismissNotification":
		if e.complexity.Mutation.DismissNotification == nil {
			break
		}

		args, err := ec.field_Mutation_dismissNotification_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DismissNotification(childComplexity, args["notificationId"].(uuid.UUID)), true
	case "Mutation.enableMicrocontroller":
		if e.complexity.Mutation.EnableMicrocontroller == nil {
			break
		}

		args, err := ec.field_Mutation_enableMicrocontroller_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EnableMicrocontroller(childComplexity, args["id"].(uuid.UUID)), true
	case "Mutation.login":
		if e.complexity.Mutation.Login == nil {
			break
		}

		args, err := ec.field_Mutation_login_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Login(childComplexity, args["input"].(LoginInput)), true
	case "Mutation.logout":
		if e.complexity.Mutation.Logout == nil {
			break
		}

		return e.complexity.Mutation.Logout(childComplexity), true
	case "Mutation.markAlertAsRead":
		if e.complexity.Mutation.MarkAlertAsRead == nil {
			break
		}

		args, err := ec.field_Mutation_markAlertAsRead_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MarkAlertAsRead(childComplexity, args["alertId"].(uuid.UUID)), true
	case "Mutation.markAllAlertsAsRead":
		if e.complexity.Mutation.MarkAllAlertsAsRead == nil {
			break
		}

		args, err := ec.field_Mutation_markAllAlertsAsRead_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MarkAllAlertsAsRead(childComplexity, args["plantId"].(*uuid.UUID)), true
	case "Mutation.markAllNotificationsAsRead":
		if e.complexity.Mutation.MarkAllNotificationsAsRead == nil {
			break
		}

		args, err := ec.field_Mutation_markAllNotificationsAsRead_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MarkAllNotificationsAsRead(childComplexity, args["userId"].(uuid.UUID)), true
	case "Mutation.markNotificationAsRead":
		if e.complexity.Mutation.MarkNotificationAsRead == nil {
			break
		}

		args, err := ec.field_Mutation_markNotificationAsRead_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MarkNotificationAsRead(childComplexity, args["notificationId"].(uuid.UUID)), true
	case "Mutation.refreshToken":
		if e.complexity.Mutation.RefreshToken == nil {
			break
		}

		args, err := ec.field_Mutation_refreshToken_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RefreshToken(childComplexity, args["token"].(string)), true
	case "Mutation.register":
		if e.complexity.Mutation.Register == nil {
			break
		}

		args, err := ec.field_Mutation_register_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Register(childComplexity, args["input"].(RegisterInput)), true
	case "Mutation.removeDeviceAssociation":
		if e.complexity.Mutation.RemoveDeviceAssociation == nil {
			break
		}

		args, err := ec.field_Mutation_removeDeviceAssociation_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveDeviceAssociation(childComplexity, args["microcontrollerId"].(uuid.UUID)), true
	case "Mutation.resetThresholdsToDefault":
		if e.complexity.Mutation.ResetThresholdsToDefault == nil {
			break
		}

		args, err := ec.field_Mutation_resetThresholdsToDefault_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ResetThresholdsToDefault(childComplexity, args["plantId"].(uuid.UUID)), true
	case "Mutation.resolveAlert":
		if e.complexity.Mutation.ResolveAlert == nil {
			break
		}

		args, err := ec.field_Mutation_resolveAlert_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ResolveAlert(childComplexity, args["alertId"].(uuid.UUID)), true
	case "Mutation.terminateAllSessions":
		if e.complexity.Mutation.TerminateAllSessions == nil {
			break
		}

		args, err := ec.field_Mutation_terminateAllSessions_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TerminateAllSessions(childComplexity, args["userId"].(uuid.UUID)), true
	case "Mutation.terminateSession":
		if e.complexity.Mutation.TerminateSession == nil {
			break
		}

		args, err := ec.field_Mutation_terminateSession_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TerminateSession(childComplexity, args["sessionId"].(string)), true
	case "Mutation.unassignMicrocontrollerFromPlant":
		if e.complexity.Mutation.UnassignMicrocontrollerFromPlant == nil {
			break
		}

		args, err := ec.field_Mutation_unassignMicrocontrollerFromPlant_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UnassignMicrocontrollerFromPlant(childComplexity, args["plantId"].(uuid.UUID)), true
	case "Mutation.unassignSensorFromPlant":
		if e.complexity.Mutation.UnassignSensorFromPlant == nil {
			break
		}

		args, err := ec.field_Mutation_unassignSensorFromPlant_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UnassignSensorFromPlant(childComplexity, args["plantId"].(uuid.UUID)), true
	case "Mutation.updateDeviceAssociation":
		if e.complexity.Mutation.UpdateDeviceAssociation == nil {
			break
		}

		args, err := ec.field_Mutation_updateDeviceAssociation_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDeviceAssociation(childComplexity, args["microcontrollerId"].(uuid.UUID), args["plantId"].(*uuid.UUID), args["role"].(*domain.DeviceRole)), true
	case "Mutation.updateLocation":
		if e.complexity.Mutation.UpdateLocation == nil {
			break
		}

		args, err := ec.field_Mutation_updateLocation_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLocation(childComplexity, args["id"].(uuid.UUID), args["input"].(CreateLocationInput)), true
	case "Mutation.updateMicrocontroller":
		if e.complexity.Mutation.UpdateMicrocontroller == nil {
			break
		}

		args, err := ec.field_Mutation_updateMicrocontroller_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMicrocontroller(childComplexity, args["id"].(uuid.UUID), args["input"].(DeviceUpdateInput)), true
	case "Mutation.updateMicrocontrollerStatus":
		if e.complexity.Mutation.UpdateMicrocontrollerStatus == nil {
			break
		}

		args, err := ec.field_Mutation_updateMicrocontrollerStatus_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMicrocontrollerStatus(childComplexity, args["id"].(uuid.UUID), args["status"].(domain.SensorStatus)), true
	case "Mutation.updatePlant":
		if e.complexity.Mutation.UpdatePlant == nil {
			break
		}

		args, err := ec.field_Mutation_updatePlant_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePlant(childComplexity, args["id"].(uuid.UUID), args["input"].(UpdatePlantInput)), true
	case "Mutation.updatePlantType":
		if e.complexity.Mutation.UpdatePlantType == nil {
			break
		}

		args, err := ec.field_Mutation_updatePlantType_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePlantType(childComplexity, args["id"].(uuid.UUID), args["input"].(CreatePlantTypeInput)), true
	case "Mutation.updateSensorStatus":
		if e.complexity.Mutation.UpdateSensorStatus == nil {
			break
		}

		args, err := ec.field_Mutation_updateSensorStatus_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSensorStatus(childComplexity, args["id"].(string), args["status"].(domain.SensorStatus)), true
	case "Mutation.updateThresholds":
		if e.complexity.Mutation.UpdateThresholds == nil {
			break
		}

		args, err := ec.field_Mutation_updateThresholds_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateThresholds(childComplexity, args["plantId"].(uuid.UUID), args["thresholds"].([]*ThresholdInput)), true
	case "Mutation.updateUserProfile":
		if e.complexity.Mutation.UpdateUserProfile == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserProfile_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserProfile(childComplexity, args["id"].(uuid.UUID), args["firstName"].(*string), args["lastName"].(*string), args["profilePhoto"].(*graphql.Upload)), true

	case "Notification.id":
		if e.complexity.Notification.ID == nil {
			break
		}

		return e.complexity.Notification.ID(childComplexity), true
	case "Notification.isRead":
		if e.complexity.Notification.IsRead == nil {
			break
		}

		return e.complexity.Notification.IsRead(childComplexity), true
	case "Notification.message":
		if e.complexity.Notification.Message == nil {
			break
		}

		return e.complexity.Notification.Message(childComplexity), true
	case "Notification.plant":
		if e.complexity.Notification.Plant == nil {
			break
		}

		return e.complexity.Notification.Plant(childComplexity), true
	case "Notification.plantId":
		if e.complexity.Notification.PlantID == nil {
			break
		}

		return e.complexity.Notification.PlantID(childComplexity), true
	case "Notification.timestamp":
		if e.complexity.Notification.Timestamp == nil {
			break
		}

		return e.complexity.Notification.Timestamp(childComplexity), true
	case "Notification.title":
		if e.complexity.Notification.Title == nil {
			break
		}

		return e.complexity.Notification.Title(childComplexity), true
	case "Notification.type":
		if e.complexity.Notification.Type == nil {
			break
		}

		return e.complexity.Notification.Type(childComplexity), true
	case "Notification.user":
		if e.complexity.Notification.User == nil {
			break
		}

		return e.complexity.Notification.User(childComplexity), true
	case "Notification.userId":
		if e.complexity.Notification.UserID == nil {
			break
		}

		return e.complexity.Notification.UserID(childComplexity), true

	case "Permission.action":
		if e.complexity.Permission.Action == nil {
			break
		}

		return e.complexity.Permission.Action(childComplexity), true
	case "Permission.description":
		if e.complexity.Permission.Description == nil {
			break
		}

		return e.complexity.Permission.Description(childComplexity), true
	case "Permission.id":
		if e.complexity.Permission.ID == nil {
			break
		}

		return e.complexity.Permission.ID(childComplexity), true
	case "Permission.name":
		if e.complexity.Permission.Name == nil {
			break
		}

		return e.complexity.Permission.Name(childComplexity), true
	case "Permission.resource":
		if e.complexity.Permission.Resource == nil {
			break
		}

		return e.complexity.Permission.Resource(childComplexity), true

	case "Plant.alerts":
		if e.complexity.Plant.Alerts == nil {
			break
		}

		return e.complexity.Plant.Alerts(childComplexity), true
	case "Plant.change":
		if e.complexity.Plant.Change == nil {
			break
		}

		return e.complexity.Plant.Change(childComplexity), true
	case "Plant.createdAt":
		if e.complexity.Plant.CreatedAt == nil {
			break
		}

		return e.complexity.Plant.CreatedAt(childComplexity), true
	case "Plant.humidity":
		if e.complexity.Plant.Humidity == nil {
			break
		}

		return e.complexity.Plant.Humidity(childComplexity), true
	case "Plant.id":
		if e.complexity.Plant.ID == nil {
			break
		}

		return e.complexity.Plant.ID(childComplexity), true
	case "Plant.image":
		if e.complexity.Plant.Image == nil {
			break
		}

		return e.complexity.Plant.Image(childComplexity), true
	case "Plant.imageUrl":
		if e.complexity.Plant.ImageURL == nil {
			break
		}

		return e.complexity.Plant.ImageURL(childComplexity), true
	case "Plant.lastUpdate":
		if e.complexity.Plant.LastUpdate == nil {
			break
		}

		return e.complexity.Plant.LastUpdate(childComplexity), true
	case "Plant.lightLevel":
		if e.complexity.Plant.LightLevel == nil {
			break
		}

		return e.complexity.Plant.LightLevel(childComplexity), true
	case "Plant.location":
		if e.complexity.Plant.Location == nil {
			break
		}

		return e.complexity.Plant.Location(childComplexity), true
	case "Plant.locationName":
		if e.complexity.Plant.LocationName == nil {
			break
		}

		return e.complexity.Plant.LocationName(childComplexity), true
	case "Plant.microcontroller":
		if e.complexity.Plant.Microcontroller == nil {
			break
		}

		return e.complexity.Plant.Microcontroller(childComplexity), true
	case "Plant.name":
		if e.complexity.Plant.Name == nil {
			break
		}

		return e.complexity.Plant.Name(childComplexity), true
	case "Plant.owner":
		if e.complexity.Plant.Owner == nil {
			break
		}

		return e.complexity.Plant.Owner(childComplexity), true
	case "Plant.ownerUserId":
		if e.complexity.Plant.OwnerUserID == nil {
			break
		}

		return e.complexity.Plant.OwnerUserID(childComplexity), true
	case "Plant.score":
		if e.complexity.Plant.Score == nil {
			break
		}

		return e.complexity.Plant.Score(childComplexity), true
	case "Plant.sensor":
		if e.complexity.Plant.Sensor == nil {
			break
		}

		return e.complexity.Plant.Sensor(childComplexity), true
	case "Plant.soilHumidity":
		if e.complexity.Plant.SoilHumidity == nil {
			break
		}

		return e.complexity.Plant.SoilHumidity(childComplexity), true
	case "Plant.status":
		if e.complexity.Plant.Status == nil {
			break
		}

		return e.complexity.Plant.Status(childComplexity), true
	case "Plant.temperature":
		if e.complexity.Plant.Temperature == nil {
			break
		}

		return e.complexity.Plant.Temperature(childComplexity), true
	case "Plant.thresholds":
		if e.complexity.Plant.Thresholds == nil {
			break
		}

		return e.complexity.Plant.Thresholds(childComplexity), true
	case "Plant.type":
		if e.complexity.Plant.Type == nil {
			break
		}

		return e.complexity.Plant.Type(childComplexity), true
	case "Plant.updatedAt":
		if e.complexity.Plant.UpdatedAt == nil {
			break
		}

		return e.complexity.Plant.UpdatedAt(childComplexity), true

	case "PlantType.description":
		if e.complexity.PlantType.Description == nil {
			break
		}

		return e.complexity.PlantType.Description(childComplexity), true
	case "PlantType.id":
		if e.complexity.PlantType.ID == nil {
			break
		}

		return e.complexity.PlantType.ID(childComplexity), true
	case "PlantType.image":
		if e.complexity.PlantType.Image == nil {
			break
		}

		return e.complexity.PlantType.Image(childComplexity), true
	case "PlantType.name":
		if e.complexity.PlantType.Name == nil {
			break
		}

		return e.complexity.PlantType.Name(childComplexity), true
	case "PlantType.optimalHumidity":
		if e.complexity.PlantType.OptimalHumidity == nil {
			break
		}

		return e.complexity.PlantType.OptimalHumidity(childComplexity), true
	case "PlantType.optimalLightLevel":
		if e.complexity.PlantType.OptimalLightLevel == nil {
			break
		}

		return e.complexity.PlantType.OptimalLightLevel(childComplexity), true
	case "PlantType.optimalSoilHumidity":
		if e.complexity.PlantType.OptimalSoilHumidity == nil {
			break
		}

		return e.complexity.PlantType.OptimalSoilHumidity(childComplexity), true
	case "PlantType.optimalTemperature":
		if e.complexity.PlantType.OptimalTemperature == nil {
			break
		}

		return e.complexity.PlantType.OptimalTemperature(childComplexity), true
	case "PlantType.plants":
		if e.complexity.PlantType.Plants == nil {
			break
		}

		return e.complexity.PlantType.Plants(childComplexity), true

	case "Query.canUserAccessDevice":
		if e.complexity.Query.CanUserAccessDevice == nil {
			break
		}

		args, err := ec.field_Query_canUserAccessDevice_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CanUserAccessDevice(childComplexity, args["deviceId"].(uuid.UUID), args["requiredRole"].(*domain.DeviceRole)), true
	case "Query.getActiveMicrocontrollers":
		if e.complexity.Query.GetActiveMicrocontrollers == nil {
			break
		}

		return e.complexity.Query.GetActiveMicrocontrollers(childComplexity), true
	case "Query.getActiveSensors":
		if e.complexity.Query.GetActiveSensors == nil {
			break
		}

		return e.complexity.Query.GetActiveSensors(childComplexity), true
	case "Query.getActiveSessions":
		if e.complexity.Query.GetActiveSessions == nil {
			break
		}

		args, err := ec.field_Query_getActiveSessions_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetActiveSessions(childComplexity, args["userId"].(uuid.UUID)), true
	case "Query.getAlertsByPlant":
		if e.complexity.Query.GetAlertsByPlant == nil {
			break
		}

		args, err := ec.field_Query_getAlertsByPlant_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAlertsByPlant(childComplexity, args["plantId"].(uuid.UUID)), true
	case "Query.getAlertsByPriority":
		if e.complexity.Query.GetAlertsByPriority == nil {
			break
		}

		args, err := ec.field_Query_getAlertsByPriority_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAlertsByPriority(childComplexity, args["priority"].(domain.AlertPriority)), true
	case "Query.getAlertsByType":
		if e.complexity.Query.GetAlertsByType == nil {
			break
		}

		args, err := ec.field_Query_getAlertsByType_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAlertsByType(childComplexity, args["type"].(domain.AlertType)), true
	case "Query.getAllAlerts":
		if e.complexity.Query.GetAllAlerts == nil {
			break
		}

		return e.complexity.Query.GetAllAlerts(childComplexity), true
	case "Query.getAllLocations":
		if e.complexity.Query.GetAllLocations == nil {
			break
		}

		return e.complexity.Query.GetAllLocations(childComplexity), true
	case "Query.getAllMicrocontrollers":
		if e.complexity.Query.GetAllMicrocontrollers == nil {
			break
		}

		return e.complexity.Query.GetAllMicrocontrollers(childComplexity), true
	case "Query.getAllPlantTypes":
		if e.complexity.Query.GetAllPlantTypes == nil {
			break
		}

		return e.complexity.Query.GetAllPlantTypes(childComplexity), true
	case "Query.getAllPlants":
		if e.complexity.Query.GetAllPlants == nil {
			break
		}

		return e.complexity.Query.GetAllPlants(childComplexity), true
	case "Query.getAllSensors":
		if e.complexity.Query.GetAllSensors == nil {
			break
		}

		return e.complexity.Query.GetAllSensors(childComplexity), true
	case "Query.getAllUsers":
		if e.complexity.Query.GetAllUsers == nil {
			break
		}

		return e.complexity.Query.GetAllUsers(childComplexity), true
	case "Query.getBulkRealTimeData":
		if e.complexity.Query.GetBulkRealTimeData == nil {
			break
		}

		args, err := ec.field_Query_getBulkRealTimeData_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetBulkRealTimeData(childComplexity, args["plantIds"].([]uuid.UUID)), true
	case "Query.getCurrentUser":
		if e.complexity.Query.GetCurrentUser == nil {
			break
		}

		return e.complexity.Query.GetCurrentUser(childComplexity), true
	case "Query.getEnabledMicrocontrollers":
		if e.complexity.Query.GetEnabledMicrocontrollers == nil {
			break
		}

		return e.complexity.Query.GetEnabledMicrocontrollers(childComplexity), true
	case "Query.getGlobalStats":
		if e.complexity.Query.GetGlobalStats == nil {
			break
		}

		return e.complexity.Query.GetGlobalStats(childComplexity), true
	case "Query.getHistoricalData":
		if e.complexity.Query.GetHistoricalData == nil {
			break
		}

		args, err := ec.field_Query_getHistoricalData_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetHistoricalData(childComplexity, args["plantId"].(uuid.UUID), args["period"].(domain.TimePeriod), args["startTime"].(*time.Time), args["endTime"].(*time.Time), args["limit"].(*int)), true
	case "Query.getHistoricalDataByMicrocontroller":
		if e.complexity.Query.GetHistoricalDataByMicrocontroller == nil {
			break
		}

		args, err := ec.field_Query_getHistoricalDataByMicrocontroller_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetHistoricalDataByMicrocontroller(childComplexity, args["microcontrollerId"].(uuid.UUID), args["period"].(domain.TimePeriod), args["startTime"].(*time.Time), args["endTime"].(*time.Time), args["limit"].(*int)), true
	case "Query.getHistoricalDataBySensor":
		if e.complexity.Query.GetHistoricalDataBySensor == nil {
			break
		}

		args, err := ec.field_Query_getHistoricalDataBySensor_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetHistoricalDataBySensor(childComplexity, args["sensorId"].(string), args["period"].(domain.TimePeriod), args["startTime"].(*time.Time), args["endTime"].(*time.Time), args["limit"].(*int)), true
	case "Query.getLocationById":
		if e.complexity.Query.GetLocationByID == nil {
			break
		}

		args, err := ec.field_Query_getLocationById_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetLocationByID(childComplexity, args["id"].(uuid.UUID)), true
	case "Query.getLocationStats":
		if e.complexity.Query.GetLocationStats == nil {
			break
		}

		args, err := ec.field_Query_getLocationStats_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetLocationStats(childComplexity, args["locationId"].(uuid.UUID)), true
	case "Query.getLocationWithPlants":
		if e.complexity.Query.GetLocationWithPlants == nil {
			break
		}

		args, err := ec.field_Query_getLocationWithPlants_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetLocationWithPlants(childComplexity, args["id"].(uuid.UUID)), true
	case "Query.getMicrocontrollerById":
		if e.complexity.Query.GetMicrocontrollerByID == nil {
			break
		}

		args, err := ec.field_Query_getMicrocontrollerById_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetMicrocontrollerByID(childComplexity, args["id"].(uuid.UUID)), true
	case "Query.getMicrocontrollerByUniqueId":
		if e.complexity.Query.GetMicrocontrollerByUniqueID == nil {
			break
		}

		args, err := ec.field_Query_getMicrocontrollerByUniqueId_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetMicrocontrollerByUniqueID(childComplexity, args["uniqueId"].(string)), true
	case "Query.getMicrocontrollersByLocation":
		if e.complexity.Query.GetMicrocontrollersByLocation == nil {
			break
		}

		args, err := ec.field_Query_getMicrocontrollersByLocation_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetMicrocontrollersByLocation(childComplexity, args["location"].(string)), true
	case "Query.getMicrocontrollersByType":
		if e.complexity.Query.GetMicrocontrollersByType == nil {
			break
		}

		args, err := ec.field_Query_getMicrocontrollersByType_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetMicrocontrollersByType(childComplexity, args["type"].(string)), true
	case "Query.getMultiMetricReport":
		if e.complexity.Query.GetMultiMetricReport == nil {
			break
		}

		args, err := ec.field_Query_getMultiMetricReport_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetMultiMetricReport(childComplexity, args["input"].(MultiReportInput)), true
	case "Query.getPlantById":
		if e.complexity.Query.GetPlantByID == nil {
			break
		}

		args, err := ec.field_Query_getPlantById_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPlantByID(childComplexity, args["id"].(uuid.UUID)), true
	case "Query.getPlantStats":
		if e.complexity.Query.GetPlantStats == nil {
			break
		}

		args, err := ec.field_Query_getPlantStats_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPlantStats(childComplexity, args["plantId"].(uuid.UUID)), true
	case "Query.getPlantTypeById":
		if e.complexity.Query.GetPlantTypeByID == nil {
			break
		}

		args, err := ec.field_Query_getPlantTypeById_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPlantTypeByID(childComplexity, args["id"].(uuid.UUID)), true
	case "Query.getPlantsByLocation":
		if e.complexity.Query.GetPlantsByLocation == nil {
			break
		}

		args, err := ec.field_Query_getPlantsByLocation_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPlantsByLocation(childComplexity, args["locationId"].(uuid.UUID)), true
	case "Query.getPlantsByLocationName":
		if e.complexity.Query.GetPlantsByLocationName == nil {
			break
		}

		args, err := ec.field_Query_getPlantsByLocationName_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPlantsByLocationName(childComplexity, args["locationName"].(string)), true
	case "Query.getPlantsByOwner":
		if e.complexity.Query.GetPlantsByOwner == nil {
			break
		}

		args, err := ec.field_Query_getPlantsByOwner_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPlantsByOwner(childComplexity, args["ownerId"].(uuid.UUID)), true
	case "Query.getPlantsByStatus":
		if e.complexity.Query.GetPlantsByStatus == nil {
			break
		}

		args, err := ec.field_Query_getPlantsByStatus_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPlantsByStatus(childComplexity, args["status"].(domain.PlantStatus)), true
	case "Query.getPlantsWithAlerts":
		if e.complexity.Query.GetPlantsWithAlerts == nil {
			break
		}

		return e.complexity.Query.GetPlantsWithAlerts(childComplexity), true
	case "Query.getRealTimeData":
		if e.complexity.Query.GetRealTimeData == nil {
			break
		}

		args, err := ec.field_Query_getRealTimeData_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetRealTimeData(childComplexity, args["plantId"].(uuid.UUID)), true
	case "Query.getRealTimeDataByMicrocontroller":
		if e.complexity.Query.GetRealTimeDataByMicrocontroller == nil {
			break
		}

		args, err := ec.field_Query_getRealTimeDataByMicrocontroller_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetRealTimeDataByMicrocontroller(childComplexity, args["microcontrollerId"].(uuid.UUID)), true
	case "Query.getRealTimeDataBySensor":
		if e.complexity.Query.GetRealTimeDataBySensor == nil {
			break
		}

		args, err := ec.field_Query_getRealTimeDataBySensor_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetRealTimeDataBySensor(childComplexity, args["sensorId"].(string)), true
	case "Query.getSensorById":
		if e.complexity.Query.GetSensorByID == nil {
			break
		}

		args, err := ec.field_Query_getSensorById_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSensorByID(childComplexity, args["id"].(string)), true
	case "Query.getSensorsByLocation":
		if e.complexity.Query.GetSensorsByLocation == nil {
			break
		}

		args, err := ec.field_Query_getSensorsByLocation_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSensorsByLocation(childComplexity, args["locationId"].(uuid.UUID)), true
	case "Query.getSingleMetricReport":
		if e.complexity.Query.GetSingleMetricReport == nil {
			break
		}

		args, err := ec.field_Query_getSingleMetricReport_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSingleMetricReport(childComplexity, args["controllerId"].(string), args["metric"].(string), args["filters"].(*AnalyticsFilterInput)), true
	case "Query.getSupportedMetrics":
		if e.complexity.Query.GetSupportedMetrics == nil {
			break
		}

		return e.complexity.Query.GetSupportedMetrics(childComplexity), true
	case "Query.getThresholds":
		if e.complexity.Query.GetThresholds == nil {
			break
		}

		args, err := ec.field_Query_getThresholds_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetThresholds(childComplexity, args["plantId"].(uuid.UUID)), true
	case "Query.getThresholdsByType":
		if e.complexity.Query.GetThresholdsByType == nil {
			break
		}

		args, err := ec.field_Query_getThresholdsByType_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetThresholdsByType(childComplexity, args["plantId"].(uuid.UUID), args["sensorType"].(domain.SensorType)), true
	case "Query.getTrendAnalysis":
		if e.complexity.Query.GetTrendAnalysis == nil {
			break
		}

		args, err := ec.field_Query_getTrendAnalysis_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetTrendAnalysis(childComplexity, args["controllerId"].(string), args["metric"].(string), args["interval"].(string), args["filters"].(*AnalyticsFilterInput)), true
	case "Query.getUnreadAlerts":
		if e.complexity.Query.GetUnreadAlerts == nil {
			break
		}

		return e.complexity.Query.GetUnreadAlerts(childComplexity), true
	case "Query.getUnreadNotifications":
		if e.complexity.Query.GetUnreadNotifications == nil {
			break
		}

		args, err := ec.field_Query_getUnreadNotifications_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUnreadNotifications(childComplexity, args["userId"].(uuid.UUID)), true
	case "Query.getUserById":
		if e.complexity.Query.GetUserByID == nil {
			break
		}

		args, err := ec.field_Query_getUserById_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserByID(childComplexity, args["id"].(uuid.UUID)), true
	case "Query.getUserDeviceAssociations":
		if e.complexity.Query.GetUserDeviceAssociations == nil {
			break
		}

		args, err := ec.field_Query_getUserDeviceAssociations_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserDeviceAssociations(childComplexity, args["userId"].(uuid.UUID)), true
	case "Query.getUserDeviceById":
		if e.complexity.Query.GetUserDeviceByID == nil {
			break
		}

		args, err := ec.field_Query_getUserDeviceById_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserDeviceByID(childComplexity, args["deviceId"].(uuid.UUID)), true
	case "Query.getUserDeviceStats":
		if e.complexity.Query.GetUserDeviceStats == nil {
			break
		}

		return e.complexity.Query.GetUserDeviceStats(childComplexity), true
	case "Query.getUserDevices":
		if e.complexity.Query.GetUserDevices == nil {
			break
		}

		args, err := ec.field_Query_getUserDevices_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserDevices(childComplexity, args["filters"].(*DeviceFilterInput)), true
	case "Query.getUserNotifications":
		if e.complexity.Query.GetUserNotifications == nil {
			break
		}

		args, err := ec.field_Query_getUserNotifications_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserNotifications(childComplexity, args["userId"].(uuid.UUID)), true
	case "Query.getUserOwnedPlants":
		if e.complexity.Query.GetUserOwnedPlants == nil {
			break
		}

		return e.complexity.Query.GetUserOwnedPlants(childComplexity), true
	case "Query.health":
		if e.complexity.Query.Health == nil {
			break
		}

		return e.complexity.Query.Health(childComplexity), true

	case "Range.max":
		if e.complexity.Range.Max == nil {
			break
		}

		return e.complexity.Range.Max(childComplexity), true
	case "Range.min":
		if e.complexity.Range.Min == nil {
			break
		}

		return e.complexity.Range.Min(childComplexity), true

	case "RealTimeData.airHumidity":
		if e.complexity.RealTimeData.AirHumidity == nil {
			break
		}

		return e.complexity.RealTimeData.AirHumidity(childComplexity), true
	case "RealTimeData.lightLevel":
		if e.complexity.RealTimeData.LightLevel == nil {
			break
		}

		return e.complexity.RealTimeData.LightLevel(childComplexity), true
	case "RealTimeData.microcontroller":
		if e.complexity.RealTimeData.Microcontroller == nil {
			break
		}

		return e.complexity.RealTimeData.Microcontroller(childComplexity), true
	case "RealTimeData.microcontrollerId":
		if e.complexity.RealTimeData.MicrocontrollerID == nil {
			break
		}

		return e.complexity.RealTimeData.MicrocontrollerID(childComplexity), true
	case "RealTimeData.plant":
		if e.complexity.RealTimeData.Plant == nil {
			break
		}

		return e.complexity.RealTimeData.Plant(childComplexity), true
	case "RealTimeData.plantId":
		if e.complexity.RealTimeData.PlantID == nil {
			break
		}

		return e.complexity.RealTimeData.PlantID(childComplexity), true
	case "RealTimeData.sensorId":
		if e.complexity.RealTimeData.SensorID == nil {
			break
		}

		return e.complexity.RealTimeData.SensorID(childComplexity), true
	case "RealTimeData.soilHumidity":
		if e.complexity.RealTimeData.SoilHumidity == nil {
			break
		}

		return e.complexity.RealTimeData.SoilHumidity(childComplexity), true
	case "RealTimeData.temperature":
		if e.complexity.RealTimeData.Temperature == nil {
			break
		}

		return e.complexity.RealTimeData.Temperature(childComplexity), true
	case "RealTimeData.timestamp":
		if e.complexity.RealTimeData.Timestamp == nil {
			break
		}

		return e.complexity.RealTimeData.Timestamp(childComplexity), true

	case "Sensor.batteryLevel":
		if e.complexity.Sensor.BatteryLevel == nil {
			break
		}

		return e.complexity.Sensor.BatteryLevel(childComplexity), true
	case "Sensor.id":
		if e.complexity.Sensor.ID == nil {
			break
		}

		return e.complexity.Sensor.ID(childComplexity), true
	case "Sensor.isActive":
		if e.complexity.Sensor.IsActive == nil {
			break
		}

		return e.complexity.Sensor.IsActive(childComplexity), true
	case "Sensor.lastReading":
		if e.complexity.Sensor.LastReading == nil {
			break
		}

		return e.complexity.Sensor.LastReading(childComplexity), true
	case "Sensor.location":
		if e.complexity.Sensor.Location == nil {
			break
		}

		return e.complexity.Sensor.Location(childComplexity), true
	case "Sensor.microcontroller":
		if e.complexity.Sensor.Microcontroller == nil {
			break
		}

		return e.complexity.Sensor.Microcontroller(childComplexity), true
	case "Sensor.plant":
		if e.complexity.Sensor.Plant == nil {
			break
		}

		return e.complexity.Sensor.Plant(childComplexity), true
	case "Sensor.plantId":
		if e.complexity.Sensor.PlantID == nil {
			break
		}

		return e.complexity.Sensor.PlantID(childComplexity), true
	case "Sensor.signalStrength":
		if e.complexity.Sensor.SignalStrength == nil {
			break
		}

		return e.complexity.Sensor.SignalStrength(childComplexity), true
	case "Sensor.status":
		if e.complexity.Sensor.Status == nil {
			break
		}

		return e.complexity.Sensor.Status(childComplexity), true

	case "Session.deviceInfo":
		if e.complexity.Session.DeviceInfo == nil {
			break
		}

		return e.complexity.Session.DeviceInfo(childComplexity), true
	case "Session.expiresAt":
		if e.complexity.Session.ExpiresAt == nil {
			break
		}

		return e.complexity.Session.ExpiresAt(childComplexity), true
	case "Session.isActive":
		if e.complexity.Session.IsActive == nil {
			break
		}

		return e.complexity.Session.IsActive(childComplexity), true
	case "Session.lastActivity":
		if e.complexity.Session.LastActivity == nil {
			break
		}

		return e.complexity.Session.LastActivity(childComplexity), true
	case "Session.token":
		if e.complexity.Session.Token == nil {
			break
		}

		return e.complexity.Session.Token(childComplexity), true
	case "Session.user":
		if e.complexity.Session.User == nil {
			break
		}

		return e.complexity.Session.User(childComplexity), true
	case "Session.userId":
		if e.complexity.Session.UserID == nil {
			break
		}

		return e.complexity.Session.UserID(childComplexity), true

	case "Subscription.alertStatusChanged":
		if e.complexity.Subscription.AlertStatusChanged == nil {
			break
		}

		args, err := ec.field_Subscription_alertStatusChanged_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.AlertStatusChanged(childComplexity, args["alertId"].(*uuid.UUID)), true
	case "Subscription.deviceConnectivityChanged":
		if e.complexity.Subscription.DeviceConnectivityChanged == nil {
			break
		}

		return e.complexity.Subscription.DeviceConnectivityChanged(childComplexity), true
	case "Subscription.globalStatsChanged":
		if e.complexity.Subscription.GlobalStatsChanged == nil {
			break
		}

		return e.complexity.Subscription.GlobalStatsChanged(childComplexity), true
	case "Subscription.microcontrollerStatusChanged":
		if e.complexity.Subscription.MicrocontrollerStatusChanged == nil {
			break
		}

		args, err := ec.field_Subscription_microcontrollerStatusChanged_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.MicrocontrollerStatusChanged(childComplexity, args["microcontrollerId"].(*uuid.UUID)), true
	case "Subscription.newAlerts":
		if e.complexity.Subscription.NewAlerts == nil {
			break
		}

		args, err := ec.field_Subscription_newAlerts_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.NewAlerts(childComplexity, args["plantId"].(*uuid.UUID)), true
	case "Subscription.newNotifications":
		if e.complexity.Subscription.NewNotifications == nil {
			break
		}

		args, err := ec.field_Subscription_newNotifications_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.NewNotifications(childComplexity, args["userId"].(uuid.UUID)), true
	case "Subscription.plantHealthScoreChanged":
		if e.complexity.Subscription.PlantHealthScoreChanged == nil {
			break
		}

		args, err := ec.field_Subscription_plantHealthScoreChanged_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.PlantHealthScoreChanged(childComplexity, args["plantId"].(*uuid.UUID)), true
	case "Subscription.plantStatusChanged":
		if e.complexity.Subscription.PlantStatusChanged == nil {
			break
		}

		args, err := ec.field_Subscription_plantStatusChanged_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.PlantStatusChanged(childComplexity, args["plantId"].(*uuid.UUID)), true
	case "Subscription.realTimeData":
		if e.complexity.Subscription.RealTimeData == nil {
			break
		}

		args, err := ec.field_Subscription_realTimeData_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.RealTimeData(childComplexity, args["plantId"].(*uuid.UUID)), true
	case "Subscription.realTimeDataByMicrocontroller":
		if e.complexity.Subscription.RealTimeDataByMicrocontroller == nil {
			break
		}

		args, err := ec.field_Subscription_realTimeDataByMicrocontroller_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.RealTimeDataByMicrocontroller(childComplexity, args["microcontrollerId"].(*uuid.UUID)), true
	case "Subscription.realTimeDataBySensor":
		if e.complexity.Subscription.RealTimeDataBySensor == nil {
			break
		}

		args, err := ec.field_Subscription_realTimeDataBySensor_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.RealTimeDataBySensor(childComplexity, args["sensorId"].(*string)), true
	case "Subscription.sensorStatusChanged":
		if e.complexity.Subscription.SensorStatusChanged == nil {
			break
		}

		args, err := ec.field_Subscription_sensorStatusChanged_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.SensorStatusChanged(childComplexity, args["sensorId"].(*string)), true
	case "Subscription.systemHealthChanged":
		if e.complexity.Subscription.SystemHealthChanged == nil {
			break
		}

		return e.complexity.Subscription.SystemHealthChanged(childComplexity), true
	case "Subscription.userDeviceAssociationChanged":
		if e.complexity.Subscription.UserDeviceAssociationChanged == nil {
			break
		}

		args, err := ec.field_Subscription_userDeviceAssociationChanged_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.UserDeviceAssociationChanged(childComplexity, args["userId"].(uuid.UUID)), true

	case "Threshold.criticalMax":
		if e.complexity.Threshold.CriticalMax == nil {
			break
		}

		return e.complexity.Threshold.CriticalMax(childComplexity), true
	case "Threshold.criticalMin":
		if e.complexity.Threshold.CriticalMin == nil {
			break
		}

		return e.complexity.Threshold.CriticalMin(childComplexity), true
	case "Threshold.id":
		if e.complexity.Threshold.ID == nil {
			break
		}

		return e.complexity.Threshold.ID(childComplexity), true
	case "Threshold.maxValue":
		if e.complexity.Threshold.MaxValue == nil {
			break
		}

		return e.complexity.Threshold.MaxValue(childComplexity), true
	case "Threshold.minValue":
		if e.complexity.Threshold.MinValue == nil {
			break
		}

		return e.complexity.Threshold.MinValue(childComplexity), true
	case "Threshold.plant":
		if e.complexity.Threshold.Plant == nil {
			break
		}

		return e.complexity.Threshold.Plant(childComplexity), true
	case "Threshold.plantId":
		if e.complexity.Threshold.PlantID == nil {
			break
		}

		return e.complexity.Threshold.PlantID(childComplexity), true
	case "Threshold.sensorType":
		if e.complexity.Threshold.SensorType == nil {
			break
		}

		return e.complexity.Threshold.SensorType(childComplexity), true
	case "Threshold.unit":
		if e.complexity.Threshold.Unit == nil {
			break
		}

		return e.complexity.Threshold.Unit(childComplexity), true

	case "TrendAnalysis.averageValue":
		if e.complexity.TrendAnalysis.AverageValue == nil {
			break
		}

		return e.complexity.TrendAnalysis.AverageValue(childComplexity), true
	case "TrendAnalysis.controllerId":
		if e.complexity.TrendAnalysis.ControllerID == nil {
			break
		}

		return e.complexity.TrendAnalysis.ControllerID(childComplexity), true
	case "TrendAnalysis.dataPoints":
		if e.complexity.TrendAnalysis.DataPoints == nil {
			break
		}

		return e.complexity.TrendAnalysis.DataPoints(childComplexity), true
	case "TrendAnalysis.filters":
		if e.complexity.TrendAnalysis.Filters == nil {
			break
		}

		return e.complexity.TrendAnalysis.Filters(childComplexity), true
	case "TrendAnalysis.generatedAt":
		if e.complexity.TrendAnalysis.GeneratedAt == nil {
			break
		}

		return e.complexity.TrendAnalysis.GeneratedAt(childComplexity), true
	case "TrendAnalysis.interval":
		if e.complexity.TrendAnalysis.Interval == nil {
			break
		}

		return e.complexity.TrendAnalysis.Interval(childComplexity), true
	case "TrendAnalysis.maxValue":
		if e.complexity.TrendAnalysis.MaxValue == nil {
			break
		}

		return e.complexity.TrendAnalysis.MaxValue(childComplexity), true
	case "TrendAnalysis.metricName":
		if e.complexity.TrendAnalysis.MetricName == nil {
			break
		}

		return e.complexity.TrendAnalysis.MetricName(childComplexity), true
	case "TrendAnalysis.microcontrollerId":
		if e.complexity.TrendAnalysis.MicrocontrollerID == nil {
			break
		}

		return e.complexity.TrendAnalysis.MicrocontrollerID(childComplexity), true
	case "TrendAnalysis.minValue":
		if e.complexity.TrendAnalysis.MinValue == nil {
			break
		}

		return e.complexity.TrendAnalysis.MinValue(childComplexity), true
	case "TrendAnalysis.totalPoints":
		if e.complexity.TrendAnalysis.TotalPoints == nil {
			break
		}

		return e.complexity.TrendAnalysis.TotalPoints(childComplexity), true

	case "TrendDataPoint.interval":
		if e.complexity.TrendDataPoint.Interval == nil {
			break
		}

		return e.complexity.TrendDataPoint.Interval(childComplexity), true
	case "TrendDataPoint.timestamp":
		if e.complexity.TrendDataPoint.Timestamp == nil {
			break
		}

		return e.complexity.TrendDataPoint.Timestamp(childComplexity), true
	case "TrendDataPoint.value":
		if e.complexity.TrendDataPoint.Value == nil {
			break
		}

		return e.complexity.TrendDataPoint.Value(childComplexity), true

	case "User.createdAt":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true
	case "User.deviceAssociations":
		if e.complexity.User.DeviceAssociations == nil {
			break
		}

		return e.complexity.User.DeviceAssociations(childComplexity), true
	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true
	case "User.firstName":
		if e.complexity.User.FirstName == nil {
			break
		}

		return e.complexity.User.FirstName(childComplexity), true
	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true
	case "User.isActive":
		if e.complexity.User.IsActive == nil {
			break
		}

		return e.complexity.User.IsActive(childComplexity), true
	case "User.lastLogin":
		if e.complexity.User.LastLogin == nil {
			break
		}

		return e.complexity.User.LastLogin(childComplexity), true
	case "User.lastName":
		if e.complexity.User.LastName == nil {
			break
		}

		return e.complexity.User.LastName(childComplexity), true
	case "User.name":
		if e.complexity.User.Name == nil {
			break
		}

		return e.complexity.User.Name(childComplexity), true
	case "User.ownedPlants":
		if e.complexity.User.OwnedPlants == nil {
			break
		}

		return e.complexity.User.OwnedPlants(childComplexity), true
	case "User.permissions":
		if e.complexity.User.Permissions == nil {
			break
		}

		return e.complexity.User.Permissions(childComplexity), true
	case "User.profilePhotoUrl":
		if e.complexity.User.ProfilePhotoURL == nil {
			break
		}

		return e.complexity.User.ProfilePhotoURL(childComplexity), true
	case "User.role":
		if e.complexity.User.Role == nil {
			break
		}

		return e.complexity.User.Role(childComplexity), true

	case "UserDevice.enabled":
		if e.complexity.UserDevice.Enabled == nil {
			break
		}

		return e.complexity.UserDevice.Enabled(childComplexity), true
	case "UserDevice.id":
		if e.complexity.UserDevice.ID == nil {
			break
		}

		return e.complexity.UserDevice.ID(childComplexity), true
	case "UserDevice.location":
		if e.complexity.UserDevice.Location == nil {
			break
		}

		return e.complexity.UserDevice.Location(childComplexity), true
	case "UserDevice.microcontroller":
		if e.complexity.UserDevice.Microcontroller == nil {
			break
		}

		return e.complexity.UserDevice.Microcontroller(childComplexity), true
	case "UserDevice.plant":
		if e.complexity.UserDevice.Plant == nil {
			break
		}

		return e.complexity.UserDevice.Plant(childComplexity), true
	case "UserDevice.role":
		if e.complexity.UserDevice.Role == nil {
			break
		}

		return e.complexity.UserDevice.Role(childComplexity), true
	case "UserDevice.type":
		if e.complexity.UserDevice.Type == nil {
			break
		}

		return e.complexity.UserDevice.Type(childComplexity), true
	case "UserDevice.uniqueId":
		if e.complexity.UserDevice.UniqueID == nil {
			break
		}

		return e.complexity.UserDevice.UniqueID(childComplexity), true

	case "UserDeviceList.devices":
		if e.complexity.UserDeviceList.Devices == nil {
			break
		}

		return e.complexity.UserDeviceList.Devices(childComplexity), true
	case "UserDeviceList.hasNextPage":
		if e.complexity.UserDeviceList.HasNextPage == nil {
			break
		}

		return e.complexity.UserDeviceList.HasNextPage(childComplexity), true
	case "UserDeviceList.totalCount":
		if e.complexity.UserDeviceList.TotalCount == nil {
			break
		}

		return e.complexity.UserDeviceList.TotalCount(childComplexity), true

	case "UserMicrocontrollerAssociation.createdAt":
		if e.complexity.UserMicrocontrollerAssociation.CreatedAt == nil {
			break
		}

		return e.complexity.UserMicrocontrollerAssociation.CreatedAt(childComplexity), true
	case "UserMicrocontrollerAssociation.microcontroller":
		if e.complexity.UserMicrocontrollerAssociation.Microcontroller == nil {
			break
		}

		return e.complexity.UserMicrocontrollerAssociation.Microcontroller(childComplexity), true
	case "UserMicrocontrollerAssociation.microcontrollerId":
		if e.complexity.UserMicrocontrollerAssociation.MicrocontrollerID == nil {
			break
		}

		return e.complexity.UserMicrocontrollerAssociation.MicrocontrollerID(childComplexity), true
	case "UserMicrocontrollerAssociation.role":
		if e.complexity.UserMicrocontrollerAssociation.Role == nil {
			break
		}

		return e.complexity.UserMicrocontrollerAssociation.Role(childComplexity), true
	case "UserMicrocontrollerAssociation.user":
		if e.complexity.UserMicrocontrollerAssociation.User == nil {
			break
		}

		return e.complexity.UserMicrocontrollerAssociation.User(childComplexity), true
	case "UserMicrocontrollerAssociation.userId":
		if e.complexity.UserMicrocontrollerAssociation.UserID == nil {
			break
		}

		return e.complexity.UserMicrocontrollerAssociation.UserID(childComplexity), true

	case "UserRole.description":
		if e.complexity.UserRole.Description == nil {
			break
		}

		return e.complexity.UserRole.Description(childComplexity), true
	case "UserRole.id":
		if e.complexity.UserRole.ID == nil {
			break
		}

		return e.complexity.UserRole.ID(childComplexity), true
	case "UserRole.name":
		if e.complexity.UserRole.Name == nil {
			break
		}

		return e.complexity.UserRole.Name(childComplexity), true
	case "UserRole.permissions":
		if e.complexity.UserRole.Permissions == nil {
			break
		}

		return e.complexity.UserRole.Permissions(childComplexity), true
	case "UserRole.users":
		if e.complexity.UserRole.Users == nil {
			break
		}

		return e.complexity.UserRole.Users(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAnalyticsFilterInput,
		ec.unmarshalInputCoordinatesInput,
		ec.unmarshalInputCreateLocationInput,
		ec.unmarshalInputCreatePlantInput,
		ec.unmarshalInputCreatePlantTypeInput,
		ec.unmarshalInputDeviceAssociationInput,
		ec.unmarshalInputDeviceFilterInput,
		ec.unmarshalInputDeviceUpdateInput,
		ec.unmarshalInputLoginInput,
		ec.unmarshalInputMultiReportInput,
		ec.unmarshalInputRangeInput,
		ec.unmarshalInputRegisterInput,
		ec.unmarshalInputThresholdInput,
		ec.unmarshalInputUpdatePlantInput,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, opCtx.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Subscription:
		next := ec._Subscription(ctx, opCtx.Operation.SelectionSet)

		var buf bytes.Buffer
		return func(ctx context.Context) *graphql.Response {
			buf.Reset()
			data := next(ctx)

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema.graphqls", Input: `"""
Rootly Smart Agriculture Platform GraphQL Schema
Integrates data from Analytics, Authentication, Data Management, and User Plant Management services
"""

scalar DateTime
scalar Upload
scalar UUID

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

# ========================================
# DOMAIN TYPES
# ========================================

"""Plant entity with health monitoring and sensor integration"""
type Plant {
    id: UUID!
    name: String!
    type: PlantType
    sensor: Sensor
    microcontroller: Microcontroller
    score: Float! # Health score 0-100
    change: String! # Percentage change "+5.2%" or "-2.1%"
    status: PlantStatus!
    temperature: Float
    humidity: Float # Air humidity
    lightLevel: Float
    soilHumidity: Float
    location: Location
    locationName: String # Direct location string from plant management
    ownerUserId: UUID
    owner: User
    lastUpdate: DateTime!
    image: String # Optional - images not stored yet
    imageUrl: String # From plant management service - optional
    alerts: Int!
    thresholds: [Threshold!]!
    createdAt: DateTime!
    updatedAt: DateTime!
}

"""Microcontroller/Sensor device for monitoring plant conditions"""
type Microcontroller {
    id: UUID!
    uniqueId: String! # Physical device identifier (e.g., "ESP8266-001")
    type: String!
    location: String
    enabled: Boolean!
    plantId: UUID
    plant: Plant
    status: SensorStatus!
    lastReading: DateTime
    isActive: Boolean!
    batteryLevel: Float
    signalStrength: Float
    userAssociations: [UserMicrocontrollerAssociation!]!
    createdAt: DateTime!
}

"""Legacy sensor type for backward compatibility"""
type Sensor {
    id: String! # Maps to microcontroller.uniqueId
    plantId: ID
    plant: Plant
    microcontroller: Microcontroller
    status: SensorStatus!
    lastReading: DateTime
    location: Location
    isActive: Boolean!
    batteryLevel: Float
    signalStrength: Float
}

"""Association between user and microcontroller with role-based permissions"""
type UserMicrocontrollerAssociation {
    userId: UUID!
    user: User!
    microcontrollerId: UUID!
    microcontroller: Microcontroller!
    role: DeviceRole!
    createdAt: DateTime!
}

"""Real-time sensor data"""
type RealTimeData {
    plantId: UUID
    plant: Plant
    sensorId: String!
    microcontrollerId: UUID
    microcontroller: Microcontroller
    timestamp: DateTime!
    temperature: Float
    airHumidity: Float
    soilHumidity: Float
    lightLevel: Float
}

"""Historical data point for charts"""
type ChartData {
    plantId: UUID!
    time: DateTime!
    temperature: Float
    humidity: Float # Air humidity
    soilHumidity: Float
    lightLevel: Float
}

"""Alert for plant monitoring"""
type Alert {
    id: UUID!
    plantId: UUID!
    plant: Plant!
    type: AlertType!
    priority: AlertPriority!
    message: String!
    value: String!
    threshold: Threshold
    timestamp: DateTime!
    isRead: Boolean!
    resolvedAt: DateTime
}

"""User account with device associations"""
type User {
    id: UUID!
    name: String! # Full name derived from first_name + last_name
    email: String!
    firstName: String!
    lastName: String!
    profilePhotoUrl: String
    role: UserRole!
    permissions: [Permission!]!
    isActive: Boolean!
    deviceAssociations: [UserMicrocontrollerAssociation!]!
    ownedPlants: [Plant!]!
    createdAt: DateTime!
    lastLogin: DateTime
}

"""Physical location for plants and sensors"""
type Location {
    id: UUID!
    name: String!
    description: String
    coordinates: Coordinates
    plants: [Plant!]!
    sensors: [Sensor!]!
    microcontrollers: [Microcontroller!]!
}

"""Global system statistics"""
type GlobalStats {
    totalPlants: Int!
    healthyPlants: Int!
    alertPlants: Int!
    criticalPlants: Int!
    averageTemperature: Float!
    averageHumidity: Float!
    activeSensors: Int!
    activeMicrocontrollers: Int!
    totalMicrocontrollers: Int!
    enabledMicrocontrollers: Int!
    uptime: Float! # Percentage uptime
    lastUpdated: DateTime!
}

"""Plant type configuration"""
type PlantType {
    id: UUID!
    name: String! # e.g., "Tomate", "Lechuga"
    description: String
    optimalTemperature: Range!
    optimalHumidity: Range!
    optimalSoilHumidity: Range!
    optimalLightLevel: Range!
    image: String # Optional - images not stored yet
    plants: [Plant!]!
}

"""User notification"""
type Notification {
    id: UUID!
    userId: UUID!
    user: User!
    type: NotificationType!
    title: String!
    message: String!
    timestamp: DateTime!
    isRead: Boolean!
    plantId: UUID
    plant: Plant
}

"""Monitoring threshold configuration"""
type Threshold {
    id: UUID!
    plantId: UUID!
    plant: Plant!
    sensorType: SensorType!
    minValue: Float!
    maxValue: Float!
    criticalMin: Float!
    criticalMax: Float!
    unit: String!
}

"""User session information"""
type Session {
    userId: UUID!
    user: User!
    token: String!
    expiresAt: DateTime!
    deviceInfo: String
    lastActivity: DateTime!
    isActive: Boolean!
}

"""Analytics report for single metric"""
type AnalyticsReport {
    controllerId: String! # Microcontroller uniqueId
    microcontrollerId: UUID # Internal microcontroller ID
    metrics: [MetricResult!]!
    generatedAt: DateTime!
    dataPointsCount: Int!
    filters: AnalyticsFilter!
}

"""Metric calculation result"""
type MetricResult {
    metricName: String!
    value: Float!
    unit: String!
    calculatedAt: DateTime!
    controllerId: String!
    microcontrollerId: UUID
    description: String
}

"""Trend analysis for time-series data"""
type TrendAnalysis {
    metricName: String!
    controllerId: String!
    microcontrollerId: UUID
    dataPoints: [TrendDataPoint!]!
    interval: String!
    generatedAt: DateTime!
    filters: AnalyticsFilter!
    totalPoints: Int!
    averageValue: Float!
    minValue: Float!
    maxValue: Float!
}

"""Data point in trend analysis"""
type TrendDataPoint {
    timestamp: DateTime!
    value: Float!
    interval: String!
}

"""User role with permissions"""
type UserRole {
    id: UUID!
    name: String!
    description: String!
    permissions: [Permission!]!
    users: [User!]!
}

"""System permission"""
type Permission {
    id: UUID!
    name: String!
    description: String!
    resource: String!
    action: String!
}

"""Device filter result for user devices"""
type UserDeviceList {
    devices: [UserDevice!]!
    totalCount: Int!
    hasNextPage: Boolean!
}

"""User device with role information"""
type UserDevice {
    id: UUID!
    uniqueId: String!
    type: String!
    location: String
    enabled: Boolean!
    role: DeviceRole!
    plant: Plant
    microcontroller: Microcontroller!
}

# ========================================
# SUPPORTING TYPES
# ========================================

"""Geographic coordinates"""
type Coordinates {
    lat: Float!
    lng: Float!
}

"""Value range for optimal conditions"""
type Range {
    min: Float!
    max: Float!
}

"""Analytics query filter"""
type AnalyticsFilter {
    startTime: DateTime
    endTime: DateTime
    limit: Int
}

"""Multi-report analytics response"""
type MultiReportResponse {
    reports: [AnalyticsReport!]!
    generatedAt: DateTime!
    totalControllers: Int!
    totalMetrics: Int!
}

"""Health check response"""
type HealthStatus {
    status: String!
    service: String!
    timestamp: DateTime!
    details: String
}

"""Device operation result"""
type DeviceOperationResult {
    id: UUID!
    success: Boolean!
    message: String!
    device: Microcontroller
}

# ========================================
# ENUMS
# ========================================

enum PlantStatus {
    HEALTHY
    ATTENTION
    CRITICAL
}

enum SensorStatus {
    ACTIVE
    INACTIVE
    MAINTENANCE
    ERROR
}

enum AlertType {
    TEMPERATURE
    HUMIDITY
    SOIL
    LIGHT
    BATTERY
    CONNECTIVITY
}

enum AlertPriority {
    LOW
    MEDIUM
    HIGH
    CRITICAL
}

enum NotificationType {
    ALERT
    INFO
    WARNING
    SUCCESS
}

enum SensorType {
    TEMPERATURE
    HUMIDITY
    SOIL
    LIGHT
}

enum TimePeriod {
    HOUR
    DAY
    WEEK
    MONTH
    YEAR
}

enum MetricType {
    AVERAGE
    MIN
    MAX
    MEDIAN
    PERCENTILE
    COUNT
}

enum DeviceRole {
    VIEWER
    EDITOR
    OWNER
}

# ========================================
# INPUT TYPES
# ========================================

"""Input for creating a new plant"""
input CreatePlantInput {
    name: String!
    typeId: UUID
    microcontrollerId: UUID
    sensorId: String # Legacy support
    locationId: UUID
    locationName: String
    image: String # Optional - images not stored yet
    thresholds: [ThresholdInput!]
}

"""Input for updating a plant"""
input UpdatePlantInput {
    name: String
    typeId: UUID
    microcontrollerId: UUID
    sensorId: String # Legacy support
    locationId: UUID
    locationName: String
    image: String # Optional - images not stored yet
}

"""Input for threshold configuration"""
input ThresholdInput {
    sensorType: SensorType!
    minValue: Float!
    maxValue: Float!
    criticalMin: Float!
    criticalMax: Float!
}

"""Input for user registration"""
input RegisterInput {
    email: String!
    password: String!
    firstName: String!
    lastName: String!
    profilePhoto: Upload
}

"""Input for user login"""
input LoginInput {
    email: String!
    password: String!
}

"""Input for creating a location"""
input CreateLocationInput {
    name: String!
    description: String
    coordinates: CoordinatesInput
}

"""Input for coordinates"""
input CoordinatesInput {
    lat: Float!
    lng: Float!
}

"""Input for creating plant types"""
input CreatePlantTypeInput {
    name: String!
    description: String
    optimalTemperature: RangeInput!
    optimalHumidity: RangeInput!
    optimalSoilHumidity: RangeInput!
    optimalLightLevel: RangeInput!
    image: String # Optional - images not stored yet
}

"""Input for value ranges"""
input RangeInput {
    min: Float!
    max: Float!
}

"""Input for analytics query filters"""
input AnalyticsFilterInput {
    startTime: DateTime
    endTime: DateTime
    limit: Int
}

"""Input for multi-report analytics request"""
input MultiReportInput {
    controllers: [String!]!
    metrics: [String!]!
    filters: AnalyticsFilterInput!
}

"""Input for device association"""
input DeviceAssociationInput {
    microcontrollerId: UUID!
    plantId: UUID
    role: DeviceRole!
}

"""Input for device update"""
input DeviceUpdateInput {
    location: String
    plantId: UUID
    type: String
    enabled: Boolean
}

"""Input for device filtering"""
input DeviceFilterInput {
    name: String
    type: String
    location: String
    enabled: Boolean
    role: DeviceRole
    limit: Int
    offset: Int
}

# ========================================
# QUERIES
# ========================================

type Query {
    # Health Check
    health: HealthStatus!

    # Plant Queries
    getAllPlants: [Plant!]!
    getPlantById(id: UUID!): Plant
    getPlantsByStatus(status: PlantStatus!): [Plant!]!
    getPlantsByLocation(locationId: UUID!): [Plant!]!
    getPlantsByLocationName(locationName: String!): [Plant!]!
    getPlantsWithAlerts: [Plant!]!
    getPlantsByOwner(ownerId: UUID!): [Plant!]!
    getUserOwnedPlants: [Plant!]! # Current user's owned plants

    # Microcontroller/Device Queries
    getAllMicrocontrollers: [Microcontroller!]!
    getMicrocontrollerById(id: UUID!): Microcontroller
    getMicrocontrollerByUniqueId(uniqueId: String!): Microcontroller
    getActiveMicrocontrollers: [Microcontroller!]!
    getEnabledMicrocontrollers: [Microcontroller!]!
    getMicrocontrollersByLocation(location: String!): [Microcontroller!]!
    getMicrocontrollersByType(type: String!): [Microcontroller!]!
    
    # User Device Management Queries
    getUserDevices(filters: DeviceFilterInput): UserDeviceList!
    getUserDeviceById(deviceId: UUID!): UserDevice
    getUserDeviceAssociations(userId: UUID!): [UserMicrocontrollerAssociation!]!
    canUserAccessDevice(deviceId: UUID!, requiredRole: DeviceRole): Boolean!

    # Legacy Sensor Queries (backward compatibility)
    getAllSensors: [Sensor!]!
    getSensorById(id: String!): Sensor
    getActiveSensors: [Sensor!]!
    getSensorsByLocation(locationId: UUID!): [Sensor!]!

    # Real-time Data Queries
    getRealTimeData(plantId: UUID!): RealTimeData
    getRealTimeDataBySensor(sensorId: String!): RealTimeData
    getRealTimeDataByMicrocontroller(microcontrollerId: UUID!): RealTimeData
    getBulkRealTimeData(plantIds: [UUID!]): [RealTimeData!]!

    # Historical Data Queries
    getHistoricalData(
        plantId: UUID!
        period: TimePeriod!
        startTime: DateTime
        endTime: DateTime
        limit: Int
    ): [ChartData!]!
    
    getHistoricalDataBySensor(
        sensorId: String!
        period: TimePeriod!
        startTime: DateTime
        endTime: DateTime
        limit: Int
    ): [ChartData!]!

    getHistoricalDataByMicrocontroller(
        microcontrollerId: UUID!
        period: TimePeriod!
        startTime: DateTime
        endTime: DateTime
        limit: Int
    ): [ChartData!]!

    # Alert Queries
    getAllAlerts: [Alert!]!
    getAlertsByPlant(plantId: UUID!): [Alert!]!
    getUnreadAlerts: [Alert!]!
    getAlertsByPriority(priority: AlertPriority!): [Alert!]!
    getAlertsByType(type: AlertType!): [Alert!]!

    # User & Authentication Queries
    getCurrentUser: User
    getUserById(id: UUID!): User
    getAllUsers: [User!]!
    getUserNotifications(userId: UUID!): [Notification!]!
    getUnreadNotifications(userId: UUID!): [Notification!]!

    # Location Queries
    getAllLocations: [Location!]!
    getLocationById(id: UUID!): Location
    getLocationWithPlants(id: UUID!): Location

    # Plant Type Queries
    getAllPlantTypes: [PlantType!]!
    getPlantTypeById(id: UUID!): PlantType

    # Configuration Queries
    getThresholds(plantId: UUID!): [Threshold!]!
    getThresholdsByType(plantId: UUID!, sensorType: SensorType!): Threshold

    # Statistics Queries
    getGlobalStats: GlobalStats!
    getPlantStats(plantId: UUID!): GlobalStats
    getLocationStats(locationId: UUID!): GlobalStats
    getUserDeviceStats: GlobalStats! # Current user's device statistics

    # Analytics Queries
    getSingleMetricReport(
        controllerId: String!
        metric: String!
        filters: AnalyticsFilterInput
    ): AnalyticsReport

    getMultiMetricReport(input: MultiReportInput!): MultiReportResponse!

    getTrendAnalysis(
        controllerId: String!
        metric: String!
        interval: String!
        filters: AnalyticsFilterInput
    ): TrendAnalysis

    getSupportedMetrics: [String!]!

    # Session Queries
    getActiveSessions(userId: UUID!): [Session!]!
}

# ========================================
# MUTATIONS
# ========================================

type Mutation {
    # Authentication Mutations
    login(input: LoginInput!): Session!
    register(input: RegisterInput!): User!
    logout: Boolean!
    refreshToken(token: String!): Session!

    # Plant Management Mutations
    createPlant(input: CreatePlantInput!): Plant!
    updatePlant(id: UUID!, input: UpdatePlantInput!): Plant!
    deletePlant(id: UUID!): Boolean!
    assignMicrocontrollerToPlant(plantId: UUID!, microcontrollerId: UUID!): Plant!
    unassignMicrocontrollerFromPlant(plantId: UUID!): Plant!
    
    # Legacy sensor assignment (backward compatibility)
    assignSensorToPlant(plantId: UUID!, sensorId: String!): Plant!
    unassignSensorFromPlant(plantId: UUID!): Plant!

    # Microcontroller/Device Management Mutations
    updateMicrocontrollerStatus(id: UUID!, status: SensorStatus!): Microcontroller!
    enableMicrocontroller(id: UUID!): Microcontroller!
    disableMicrocontroller(id: UUID!): Microcontroller!
    updateMicrocontroller(id: UUID!, input: DeviceUpdateInput!): Microcontroller!
    calibrateMicrocontroller(id: UUID!): Microcontroller!

    # User Device Association Mutations
    associateUserWithDevice(input: DeviceAssociationInput!): UserMicrocontrollerAssociation!
    updateDeviceAssociation(
        microcontrollerId: UUID!
        plantId: UUID
        role: DeviceRole
    ): UserMicrocontrollerAssociation!
    removeDeviceAssociation(microcontrollerId: UUID!): Boolean!

    # Legacy sensor management (backward compatibility)
    updateSensorStatus(id: String!, status: SensorStatus!): Sensor!
    calibrateSensor(id: String!): Sensor!

    # Alert Management Mutations
    markAlertAsRead(alertId: UUID!): Alert!
    markAllAlertsAsRead(plantId: UUID): Boolean!
    resolveAlert(alertId: UUID!): Alert!
    dismissAlert(alertId: UUID!): Boolean!

    # Notification Management Mutations
    markNotificationAsRead(notificationId: UUID!): Notification!
    markAllNotificationsAsRead(userId: UUID!): Boolean!
    dismissNotification(notificationId: UUID!): Boolean!

    # Configuration Mutations
    updateThresholds(plantId: UUID!, thresholds: [ThresholdInput!]!): [Threshold!]!
    resetThresholdsToDefault(plantId: UUID!): [Threshold!]!

    # Location Management Mutations
    createLocation(input: CreateLocationInput!): Location!
    updateLocation(id: UUID!, input: CreateLocationInput!): Location!
    deleteLocation(id: UUID!): Boolean!

    # Plant Type Management Mutations
    createPlantType(input: CreatePlantTypeInput!): PlantType!
    updatePlantType(id: UUID!, input: CreatePlantTypeInput!): PlantType!
    deletePlantType(id: UUID!): Boolean!

    # User Management Mutations
    updateUserProfile(
        id: UUID!
        firstName: String
        lastName: String
        profilePhoto: Upload
    ): User!
    deactivateUser(id: UUID!): User!
    activateUser(id: UUID!): User!
    changePassword(currentPassword: String!, newPassword: String!): Boolean!

    # Session Management Mutations
    terminateSession(sessionId: String!): Boolean!
    terminateAllSessions(userId: UUID!): Boolean!
}

# ========================================
# SUBSCRIPTIONS
# ========================================

type Subscription {
    # Real-time sensor data updates
    realTimeData(plantId: UUID): RealTimeData!
    realTimeDataBySensor(sensorId: String): RealTimeData!
    realTimeDataByMicrocontroller(microcontrollerId: UUID): RealTimeData!
    
    # Alert subscriptions
    newAlerts(plantId: UUID): Alert!
    alertStatusChanged(alertId: UUID): Alert!
    
    # Plant status changes
    plantStatusChanged(plantId: UUID): Plant!
    plantHealthScoreChanged(plantId: UUID): Plant!
    
    # Microcontroller/sensor status updates
    microcontrollerStatusChanged(microcontrollerId: UUID): Microcontroller!
    sensorStatusChanged(sensorId: String): Sensor!
    deviceConnectivityChanged: Microcontroller!
    
    # Device association changes
    userDeviceAssociationChanged(userId: UUID!): UserMicrocontrollerAssociation!
    
    # Notification subscriptions
    newNotifications(userId: UUID!): Notification!
    
    # System health monitoring
    systemHealthChanged: HealthStatus!
    globalStatsChanged: GlobalStats!
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_activateUser_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_assignMicrocontrollerToPlant_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "plantId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["plantId"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "microcontrollerId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["microcontrollerId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_assignSensorToPlant_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "plantId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["plantId"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "sensorId", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["sensorId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_associateUserWithDevice_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNDeviceAssociationInput2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐDeviceAssociationInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_calibrateMicrocontroller_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_calibrateSensor_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_changePassword_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "currentPassword", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["currentPassword"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "newPassword", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["newPassword"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createLocation_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateLocationInput2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐCreateLocationInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPlantType_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreatePlantTypeInput2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐCreatePlantTypeInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPlant_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreatePlantInput2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐCreatePlantInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deactivateUser_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteLocation_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePlantType_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePlant_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_disableMicrocontroller_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_dismissAlert_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "alertId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["alertId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_dismissNotification_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "notificationId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["notificationId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_enableMicrocontroller_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_login_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNLoginInput2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐLoginInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_markAlertAsRead_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "alertId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["alertId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_markAllAlertsAsRead_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "plantId", ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["plantId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_markAllNotificationsAsRead_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "userId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["userId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_markNotificationAsRead_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "notificationId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["notificationId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_refreshToken_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "token", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["token"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_register_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNRegisterInput2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐRegisterInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_removeDeviceAssociation_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "microcontrollerId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["microcontrollerId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_resetThresholdsToDefault_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "plantId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["plantId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_resolveAlert_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "alertId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["alertId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_terminateAllSessions_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "userId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["userId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_terminateSession_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "sessionId", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["sessionId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_unassignMicrocontrollerFromPlant_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "plantId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["plantId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_unassignSensorFromPlant_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "plantId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["plantId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDeviceAssociation_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "microcontrollerId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["microcontrollerId"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "plantId", ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["plantId"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "role", ec.unmarshalODeviceRole2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐDeviceRole)
	if err != nil {
		return nil, err
	}
	args["role"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateLocation_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateLocationInput2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐCreateLocationInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateMicrocontrollerStatus_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "status", ec.unmarshalNSensorStatus2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐSensorStatus)
	if err != nil {
		return nil, err
	}
	args["status"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateMicrocontroller_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNDeviceUpdateInput2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐDeviceUpdateInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePlantType_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreatePlantTypeInput2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐCreatePlantTypeInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePlant_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdatePlantInput2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐUpdatePlantInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateSensorStatus_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "status", ec.unmarshalNSensorStatus2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐSensorStatus)
	if err != nil {
		return nil, err
	}
	args["status"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateThresholds_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "plantId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["plantId"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "thresholds", ec.unmarshalNThresholdInput2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐThresholdInputᚄ)
	if err != nil {
		return nil, err
	}
	args["thresholds"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserProfile_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "firstName", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["firstName"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "lastName", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["lastName"] = arg2
	arg3, err := graphql.ProcessArgField(ctx, rawArgs, "profilePhoto", ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload)
	if err != nil {
		return nil, err
	}
	args["profilePhoto"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "name", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_canUserAccessDevice_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "deviceId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["deviceId"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "requiredRole", ec.unmarshalODeviceRole2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐDeviceRole)
	if err != nil {
		return nil, err
	}
	args["requiredRole"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getActiveSessions_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "userId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["userId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getAlertsByPlant_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "plantId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["plantId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getAlertsByPriority_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "priority", ec.unmarshalNAlertPriority2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐAlertPriority)
	if err != nil {
		return nil, err
	}
	args["priority"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getAlertsByType_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "type", ec.unmarshalNAlertType2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐAlertType)
	if err != nil {
		return nil, err
	}
	args["type"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getBulkRealTimeData_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "plantIds", ec.unmarshalOUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ)
	if err != nil {
		return nil, err
	}
	args["plantIds"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getHistoricalDataByMicrocontroller_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "microcontrollerId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["microcontrollerId"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "period", ec.unmarshalNTimePeriod2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐTimePeriod)
	if err != nil {
		return nil, err
	}
	args["period"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "startTime", ec.unmarshalODateTime2ᚖtimeᚐTime)
	if err != nil {
		return nil, err
	}
	args["startTime"] = arg2
	arg3, err := graphql.ProcessArgField(ctx, rawArgs, "endTime", ec.unmarshalODateTime2ᚖtimeᚐTime)
	if err != nil {
		return nil, err
	}
	args["endTime"] = arg3
	arg4, err := graphql.ProcessArgField(ctx, rawArgs, "limit", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["limit"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_getHistoricalDataBySensor_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "sensorId", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["sensorId"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "period", ec.unmarshalNTimePeriod2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐTimePeriod)
	if err != nil {
		return nil, err
	}
	args["period"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "startTime", ec.unmarshalODateTime2ᚖtimeᚐTime)
	if err != nil {
		return nil, err
	}
	args["startTime"] = arg2
	arg3, err := graphql.ProcessArgField(ctx, rawArgs, "endTime", ec.unmarshalODateTime2ᚖtimeᚐTime)
	if err != nil {
		return nil, err
	}
	args["endTime"] = arg3
	arg4, err := graphql.ProcessArgField(ctx, rawArgs, "limit", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["limit"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_getHistoricalData_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "plantId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["plantId"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "period", ec.unmarshalNTimePeriod2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐTimePeriod)
	if err != nil {
		return nil, err
	}
	args["period"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "startTime", ec.unmarshalODateTime2ᚖtimeᚐTime)
	if err != nil {
		return nil, err
	}
	args["startTime"] = arg2
	arg3, err := graphql.ProcessArgField(ctx, rawArgs, "endTime", ec.unmarshalODateTime2ᚖtimeᚐTime)
	if err != nil {
		return nil, err
	}
	args["endTime"] = arg3
	arg4, err := graphql.ProcessArgField(ctx, rawArgs, "limit", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["limit"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_getLocationById_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getLocationStats_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "locationId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["locationId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getLocationWithPlants_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getMicrocontrollerById_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getMicrocontrollerByUniqueId_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "uniqueId", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["uniqueId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getMicrocontrollersByLocation_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "location", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["location"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getMicrocontrollersByType_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "type", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["type"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getMultiMetricReport_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNMultiReportInput2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐMultiReportInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getPlantById_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getPlantStats_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "plantId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["plantId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getPlantTypeById_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getPlantsByLocationName_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "locationName", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["locationName"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getPlantsByLocation_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "locationId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["locationId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getPlantsByOwner_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "ownerId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["ownerId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getPlantsByStatus_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "status", ec.unmarshalNPlantStatus2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlantStatus)
	if err != nil {
		return nil, err
	}
	args["status"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getRealTimeDataByMicrocontroller_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "microcontrollerId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["microcontrollerId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getRealTimeDataBySensor_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "sensorId", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["sensorId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getRealTimeData_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "plantId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["plantId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getSensorById_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getSensorsByLocation_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "locationId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["locationId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getSingleMetricReport_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "controllerId", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["controllerId"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "metric", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["metric"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "filters", ec.unmarshalOAnalyticsFilterInput2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐAnalyticsFilterInput)
	if err != nil {
		return nil, err
	}
	args["filters"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getThresholdsByType_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "plantId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["plantId"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "sensorType", ec.unmarshalNSensorType2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐSensorType)
	if err != nil {
		return nil, err
	}
	args["sensorType"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getThresholds_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "plantId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["plantId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getTrendAnalysis_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "controllerId", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["controllerId"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "metric", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["metric"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "interval", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["interval"] = arg2
	arg3, err := graphql.ProcessArgField(ctx, rawArgs, "filters", ec.unmarshalOAnalyticsFilterInput2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐAnalyticsFilterInput)
	if err != nil {
		return nil, err
	}
	args["filters"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_getUnreadNotifications_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "userId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["userId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUserById_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUserDeviceAssociations_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "userId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["userId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUserDeviceById_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "deviceId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["deviceId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUserDevices_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "filters", ec.unmarshalODeviceFilterInput2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐDeviceFilterInput)
	if err != nil {
		return nil, err
	}
	args["filters"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUserNotifications_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "userId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["userId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_alertStatusChanged_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "alertId", ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["alertId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_microcontrollerStatusChanged_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "microcontrollerId", ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["microcontrollerId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_newAlerts_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "plantId", ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["plantId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_newNotifications_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "userId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["userId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_plantHealthScoreChanged_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "plantId", ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["plantId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_plantStatusChanged_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "plantId", ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["plantId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_realTimeDataByMicrocontroller_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "microcontrollerId", ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["microcontrollerId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_realTimeDataBySensor_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "sensorId", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["sensorId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_realTimeData_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "plantId", ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["plantId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_sensorStatusChanged_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "sensorId", ec.unmarshalOString2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["sensorId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_userDeviceAssociationChanged_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "userId", ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID)
	if err != nil {
		return nil, err
	}
	args["userId"] = arg0
	return args, nil
}

func (ec *executionContext) field___Directive_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2ᚖbool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Field_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2ᚖbool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2bool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2bool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Alert_id(ctx context.Context, field graphql.CollectedField, obj *domain.Alert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Alert_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Alert_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Alert_plantId(ctx context.Context, field graphql.CollectedField, obj *domain.Alert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Alert_plantId,
		func(ctx context.Context) (any, error) {
			return obj.PlantID, nil
		},
		nil,
		ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Alert_plantId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Alert_plant(ctx context.Context, field graphql.CollectedField, obj *domain.Alert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Alert_plant,
		func(ctx context.Context) (any, error) {
			return obj.Plant, nil
		},
		nil,
		ec.marshalNPlant2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlant,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Alert_plant(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Plant_id(ctx, field)
			case "name":
				return ec.fieldContext_Plant_name(ctx, field)
			case "type":
				return ec.fieldContext_Plant_type(ctx, field)
			case "sensor":
				return ec.fieldContext_Plant_sensor(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Plant_microcontroller(ctx, field)
			case "score":
				return ec.fieldContext_Plant_score(ctx, field)
			case "change":
				return ec.fieldContext_Plant_change(ctx, field)
			case "status":
				return ec.fieldContext_Plant_status(ctx, field)
			case "temperature":
				return ec.fieldContext_Plant_temperature(ctx, field)
			case "humidity":
				return ec.fieldContext_Plant_humidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_Plant_lightLevel(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_Plant_soilHumidity(ctx, field)
			case "location":
				return ec.fieldContext_Plant_location(ctx, field)
			case "locationName":
				return ec.fieldContext_Plant_locationName(ctx, field)
			case "ownerUserId":
				return ec.fieldContext_Plant_ownerUserId(ctx, field)
			case "owner":
				return ec.fieldContext_Plant_owner(ctx, field)
			case "lastUpdate":
				return ec.fieldContext_Plant_lastUpdate(ctx, field)
			case "image":
				return ec.fieldContext_Plant_image(ctx, field)
			case "imageUrl":
				return ec.fieldContext_Plant_imageUrl(ctx, field)
			case "alerts":
				return ec.fieldContext_Plant_alerts(ctx, field)
			case "thresholds":
				return ec.fieldContext_Plant_thresholds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Plant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Plant_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Plant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Alert_type(ctx context.Context, field graphql.CollectedField, obj *domain.Alert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Alert_type,
		func(ctx context.Context) (any, error) {
			return obj.Type, nil
		},
		nil,
		ec.marshalNAlertType2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐAlertType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Alert_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AlertType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Alert_priority(ctx context.Context, field graphql.CollectedField, obj *domain.Alert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Alert_priority,
		func(ctx context.Context) (any, error) {
			return obj.Priority, nil
		},
		nil,
		ec.marshalNAlertPriority2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐAlertPriority,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Alert_priority(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AlertPriority does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Alert_message(ctx context.Context, field graphql.CollectedField, obj *domain.Alert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Alert_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Alert_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Alert_value(ctx context.Context, field graphql.CollectedField, obj *domain.Alert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Alert_value,
		func(ctx context.Context) (any, error) {
			return obj.Value, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Alert_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Alert_threshold(ctx context.Context, field graphql.CollectedField, obj *domain.Alert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Alert_threshold,
		func(ctx context.Context) (any, error) {
			return obj.Threshold, nil
		},
		nil,
		ec.marshalOThreshold2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐThreshold,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Alert_threshold(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Threshold_id(ctx, field)
			case "plantId":
				return ec.fieldContext_Threshold_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Threshold_plant(ctx, field)
			case "sensorType":
				return ec.fieldContext_Threshold_sensorType(ctx, field)
			case "minValue":
				return ec.fieldContext_Threshold_minValue(ctx, field)
			case "maxValue":
				return ec.fieldContext_Threshold_maxValue(ctx, field)
			case "criticalMin":
				return ec.fieldContext_Threshold_criticalMin(ctx, field)
			case "criticalMax":
				return ec.fieldContext_Threshold_criticalMax(ctx, field)
			case "unit":
				return ec.fieldContext_Threshold_unit(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Threshold", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Alert_timestamp(ctx context.Context, field graphql.CollectedField, obj *domain.Alert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Alert_timestamp,
		func(ctx context.Context) (any, error) {
			return obj.Timestamp, nil
		},
		nil,
		ec.marshalNDateTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Alert_timestamp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Alert_isRead(ctx context.Context, field graphql.CollectedField, obj *domain.Alert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Alert_isRead,
		func(ctx context.Context) (any, error) {
			return obj.IsRead, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Alert_isRead(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Alert_resolvedAt(ctx context.Context, field graphql.CollectedField, obj *domain.Alert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Alert_resolvedAt,
		func(ctx context.Context) (any, error) {
			return obj.ResolvedAt, nil
		},
		nil,
		ec.marshalODateTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Alert_resolvedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnalyticsFilter_startTime(ctx context.Context, field graphql.CollectedField, obj *domain.AnalyticsFilter) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_AnalyticsFilter_startTime,
		func(ctx context.Context) (any, error) {
			return obj.StartTime, nil
		},
		nil,
		ec.marshalODateTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_AnalyticsFilter_startTime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnalyticsFilter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnalyticsFilter_endTime(ctx context.Context, field graphql.CollectedField, obj *domain.AnalyticsFilter) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_AnalyticsFilter_endTime,
		func(ctx context.Context) (any, error) {
			return obj.EndTime, nil
		},
		nil,
		ec.marshalODateTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_AnalyticsFilter_endTime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnalyticsFilter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnalyticsFilter_limit(ctx context.Context, field graphql.CollectedField, obj *domain.AnalyticsFilter) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_AnalyticsFilter_limit,
		func(ctx context.Context) (any, error) {
			return obj.Limit, nil
		},
		nil,
		ec.marshalOInt2ᚖint,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_AnalyticsFilter_limit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnalyticsFilter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnalyticsReport_controllerId(ctx context.Context, field graphql.CollectedField, obj *domain.AnalyticsReport) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_AnalyticsReport_controllerId,
		func(ctx context.Context) (any, error) {
			return obj.ControllerID, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_AnalyticsReport_controllerId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnalyticsReport",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnalyticsReport_microcontrollerId(ctx context.Context, field graphql.CollectedField, obj *domain.AnalyticsReport) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_AnalyticsReport_microcontrollerId,
		func(ctx context.Context) (any, error) {
			return obj.MicrocontrollerID, nil
		},
		nil,
		ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_AnalyticsReport_microcontrollerId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnalyticsReport",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnalyticsReport_metrics(ctx context.Context, field graphql.CollectedField, obj *domain.AnalyticsReport) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_AnalyticsReport_metrics,
		func(ctx context.Context) (any, error) {
			return obj.Metrics, nil
		},
		nil,
		ec.marshalNMetricResult2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐMetricResultᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_AnalyticsReport_metrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnalyticsReport",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metricName":
				return ec.fieldContext_MetricResult_metricName(ctx, field)
			case "value":
				return ec.fieldContext_MetricResult_value(ctx, field)
			case "unit":
				return ec.fieldContext_MetricResult_unit(ctx, field)
			case "calculatedAt":
				return ec.fieldContext_MetricResult_calculatedAt(ctx, field)
			case "controllerId":
				return ec.fieldContext_MetricResult_controllerId(ctx, field)
			case "microcontrollerId":
				return ec.fieldContext_MetricResult_microcontrollerId(ctx, field)
			case "description":
				return ec.fieldContext_MetricResult_description(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetricResult", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnalyticsReport_generatedAt(ctx context.Context, field graphql.CollectedField, obj *domain.AnalyticsReport) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_AnalyticsReport_generatedAt,
		func(ctx context.Context) (any, error) {
			return obj.GeneratedAt, nil
		},
		nil,
		ec.marshalNDateTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_AnalyticsReport_generatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnalyticsReport",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnalyticsReport_dataPointsCount(ctx context.Context, field graphql.CollectedField, obj *domain.AnalyticsReport) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_AnalyticsReport_dataPointsCount,
		func(ctx context.Context) (any, error) {
			return obj.DataPointsCount, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_AnalyticsReport_dataPointsCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnalyticsReport",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnalyticsReport_filters(ctx context.Context, field graphql.CollectedField, obj *domain.AnalyticsReport) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_AnalyticsReport_filters,
		func(ctx context.Context) (any, error) {
			return obj.Filters, nil
		},
		nil,
		ec.marshalNAnalyticsFilter2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐAnalyticsFilter,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_AnalyticsReport_filters(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnalyticsReport",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startTime":
				return ec.fieldContext_AnalyticsFilter_startTime(ctx, field)
			case "endTime":
				return ec.fieldContext_AnalyticsFilter_endTime(ctx, field)
			case "limit":
				return ec.fieldContext_AnalyticsFilter_limit(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AnalyticsFilter", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChartData_plantId(ctx context.Context, field graphql.CollectedField, obj *domain.ChartData) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ChartData_plantId,
		func(ctx context.Context) (any, error) {
			return obj.PlantID, nil
		},
		nil,
		ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ChartData_plantId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChartData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChartData_time(ctx context.Context, field graphql.CollectedField, obj *domain.ChartData) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ChartData_time,
		func(ctx context.Context) (any, error) {
			return obj.Time, nil
		},
		nil,
		ec.marshalNDateTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ChartData_time(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChartData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChartData_temperature(ctx context.Context, field graphql.CollectedField, obj *domain.ChartData) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ChartData_temperature,
		func(ctx context.Context) (any, error) {
			return obj.Temperature, nil
		},
		nil,
		ec.marshalOFloat2ᚖfloat64,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ChartData_temperature(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChartData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChartData_humidity(ctx context.Context, field graphql.CollectedField, obj *domain.ChartData) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ChartData_humidity,
		func(ctx context.Context) (any, error) {
			return obj.Humidity, nil
		},
		nil,
		ec.marshalOFloat2ᚖfloat64,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ChartData_humidity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChartData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChartData_soilHumidity(ctx context.Context, field graphql.CollectedField, obj *domain.ChartData) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ChartData_soilHumidity,
		func(ctx context.Context) (any, error) {
			return obj.SoilHumidity, nil
		},
		nil,
		ec.marshalOFloat2ᚖfloat64,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ChartData_soilHumidity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChartData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChartData_lightLevel(ctx context.Context, field graphql.CollectedField, obj *domain.ChartData) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ChartData_lightLevel,
		func(ctx context.Context) (any, error) {
			return obj.LightLevel, nil
		},
		nil,
		ec.marshalOFloat2ᚖfloat64,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ChartData_lightLevel(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChartData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Coordinates_lat(ctx context.Context, field graphql.CollectedField, obj *domain.Coordinates) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Coordinates_lat,
		func(ctx context.Context) (any, error) {
			return obj.Lat, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Coordinates_lat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Coordinates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Coordinates_lng(ctx context.Context, field graphql.CollectedField, obj *domain.Coordinates) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Coordinates_lng,
		func(ctx context.Context) (any, error) {
			return obj.Lng, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Coordinates_lng(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Coordinates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceOperationResult_id(ctx context.Context, field graphql.CollectedField, obj *domain.DeviceOperationResult) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_DeviceOperationResult_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_DeviceOperationResult_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceOperationResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceOperationResult_success(ctx context.Context, field graphql.CollectedField, obj *domain.DeviceOperationResult) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_DeviceOperationResult_success,
		func(ctx context.Context) (any, error) {
			return obj.Success, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_DeviceOperationResult_success(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceOperationResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceOperationResult_message(ctx context.Context, field graphql.CollectedField, obj *domain.DeviceOperationResult) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_DeviceOperationResult_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_DeviceOperationResult_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceOperationResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceOperationResult_device(ctx context.Context, field graphql.CollectedField, obj *domain.DeviceOperationResult) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_DeviceOperationResult_device,
		func(ctx context.Context) (any, error) {
			return obj.Device, nil
		},
		nil,
		ec.marshalOMicrocontroller2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐMicrocontroller,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_DeviceOperationResult_device(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceOperationResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Microcontroller_id(ctx, field)
			case "uniqueId":
				return ec.fieldContext_Microcontroller_uniqueId(ctx, field)
			case "type":
				return ec.fieldContext_Microcontroller_type(ctx, field)
			case "location":
				return ec.fieldContext_Microcontroller_location(ctx, field)
			case "enabled":
				return ec.fieldContext_Microcontroller_enabled(ctx, field)
			case "plantId":
				return ec.fieldContext_Microcontroller_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Microcontroller_plant(ctx, field)
			case "status":
				return ec.fieldContext_Microcontroller_status(ctx, field)
			case "lastReading":
				return ec.fieldContext_Microcontroller_lastReading(ctx, field)
			case "isActive":
				return ec.fieldContext_Microcontroller_isActive(ctx, field)
			case "batteryLevel":
				return ec.fieldContext_Microcontroller_batteryLevel(ctx, field)
			case "signalStrength":
				return ec.fieldContext_Microcontroller_signalStrength(ctx, field)
			case "userAssociations":
				return ec.fieldContext_Microcontroller_userAssociations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Microcontroller_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Microcontroller", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GlobalStats_totalPlants(ctx context.Context, field graphql.CollectedField, obj *domain.GlobalStats) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GlobalStats_totalPlants,
		func(ctx context.Context) (any, error) {
			return obj.TotalPlants, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GlobalStats_totalPlants(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GlobalStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GlobalStats_healthyPlants(ctx context.Context, field graphql.CollectedField, obj *domain.GlobalStats) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GlobalStats_healthyPlants,
		func(ctx context.Context) (any, error) {
			return obj.HealthyPlants, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GlobalStats_healthyPlants(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GlobalStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GlobalStats_alertPlants(ctx context.Context, field graphql.CollectedField, obj *domain.GlobalStats) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GlobalStats_alertPlants,
		func(ctx context.Context) (any, error) {
			return obj.AlertPlants, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GlobalStats_alertPlants(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GlobalStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GlobalStats_criticalPlants(ctx context.Context, field graphql.CollectedField, obj *domain.GlobalStats) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GlobalStats_criticalPlants,
		func(ctx context.Context) (any, error) {
			return obj.CriticalPlants, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GlobalStats_criticalPlants(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GlobalStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GlobalStats_averageTemperature(ctx context.Context, field graphql.CollectedField, obj *domain.GlobalStats) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GlobalStats_averageTemperature,
		func(ctx context.Context) (any, error) {
			return obj.AverageTemperature, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GlobalStats_averageTemperature(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GlobalStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GlobalStats_averageHumidity(ctx context.Context, field graphql.CollectedField, obj *domain.GlobalStats) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GlobalStats_averageHumidity,
		func(ctx context.Context) (any, error) {
			return obj.AverageHumidity, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GlobalStats_averageHumidity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GlobalStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GlobalStats_activeSensors(ctx context.Context, field graphql.CollectedField, obj *domain.GlobalStats) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GlobalStats_activeSensors,
		func(ctx context.Context) (any, error) {
			return obj.ActiveSensors, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GlobalStats_activeSensors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GlobalStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GlobalStats_activeMicrocontrollers(ctx context.Context, field graphql.CollectedField, obj *domain.GlobalStats) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GlobalStats_activeMicrocontrollers,
		func(ctx context.Context) (any, error) {
			return obj.ActiveMicrocontrollers, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GlobalStats_activeMicrocontrollers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GlobalStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GlobalStats_totalMicrocontrollers(ctx context.Context, field graphql.CollectedField, obj *domain.GlobalStats) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GlobalStats_totalMicrocontrollers,
		func(ctx context.Context) (any, error) {
			return obj.TotalMicrocontrollers, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GlobalStats_totalMicrocontrollers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GlobalStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GlobalStats_enabledMicrocontrollers(ctx context.Context, field graphql.CollectedField, obj *domain.GlobalStats) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GlobalStats_enabledMicrocontrollers,
		func(ctx context.Context) (any, error) {
			return obj.EnabledMicrocontrollers, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GlobalStats_enabledMicrocontrollers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GlobalStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GlobalStats_uptime(ctx context.Context, field graphql.CollectedField, obj *domain.GlobalStats) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GlobalStats_uptime,
		func(ctx context.Context) (any, error) {
			return obj.Uptime, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GlobalStats_uptime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GlobalStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GlobalStats_lastUpdated(ctx context.Context, field graphql.CollectedField, obj *domain.GlobalStats) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GlobalStats_lastUpdated,
		func(ctx context.Context) (any, error) {
			return obj.LastUpdated, nil
		},
		nil,
		ec.marshalNDateTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GlobalStats_lastUpdated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GlobalStats",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HealthStatus_status(ctx context.Context, field graphql.CollectedField, obj *domain.HealthStatus) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_HealthStatus_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_HealthStatus_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HealthStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HealthStatus_service(ctx context.Context, field graphql.CollectedField, obj *domain.HealthStatus) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_HealthStatus_service,
		func(ctx context.Context) (any, error) {
			return obj.Service, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_HealthStatus_service(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HealthStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HealthStatus_timestamp(ctx context.Context, field graphql.CollectedField, obj *domain.HealthStatus) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_HealthStatus_timestamp,
		func(ctx context.Context) (any, error) {
			return obj.Timestamp, nil
		},
		nil,
		ec.marshalNDateTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_HealthStatus_timestamp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HealthStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HealthStatus_details(ctx context.Context, field graphql.CollectedField, obj *domain.HealthStatus) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_HealthStatus_details,
		func(ctx context.Context) (any, error) {
			return obj.Details, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_HealthStatus_details(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HealthStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_id(ctx context.Context, field graphql.CollectedField, obj *domain.Location) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Location_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Location_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_name(ctx context.Context, field graphql.CollectedField, obj *domain.Location) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Location_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Location_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_description(ctx context.Context, field graphql.CollectedField, obj *domain.Location) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Location_description,
		func(ctx context.Context) (any, error) {
			return obj.Description, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Location_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_coordinates(ctx context.Context, field graphql.CollectedField, obj *domain.Location) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Location_coordinates,
		func(ctx context.Context) (any, error) {
			return obj.Coordinates, nil
		},
		nil,
		ec.marshalOCoordinates2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐCoordinates,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Location_coordinates(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "lat":
				return ec.fieldContext_Coordinates_lat(ctx, field)
			case "lng":
				return ec.fieldContext_Coordinates_lng(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Coordinates", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_plants(ctx context.Context, field graphql.CollectedField, obj *domain.Location) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Location_plants,
		func(ctx context.Context) (any, error) {
			return obj.Plants, nil
		},
		nil,
		ec.marshalNPlant2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlantᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Location_plants(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Plant_id(ctx, field)
			case "name":
				return ec.fieldContext_Plant_name(ctx, field)
			case "type":
				return ec.fieldContext_Plant_type(ctx, field)
			case "sensor":
				return ec.fieldContext_Plant_sensor(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Plant_microcontroller(ctx, field)
			case "score":
				return ec.fieldContext_Plant_score(ctx, field)
			case "change":
				return ec.fieldContext_Plant_change(ctx, field)
			case "status":
				return ec.fieldContext_Plant_status(ctx, field)
			case "temperature":
				return ec.fieldContext_Plant_temperature(ctx, field)
			case "humidity":
				return ec.fieldContext_Plant_humidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_Plant_lightLevel(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_Plant_soilHumidity(ctx, field)
			case "location":
				return ec.fieldContext_Plant_location(ctx, field)
			case "locationName":
				return ec.fieldContext_Plant_locationName(ctx, field)
			case "ownerUserId":
				return ec.fieldContext_Plant_ownerUserId(ctx, field)
			case "owner":
				return ec.fieldContext_Plant_owner(ctx, field)
			case "lastUpdate":
				return ec.fieldContext_Plant_lastUpdate(ctx, field)
			case "image":
				return ec.fieldContext_Plant_image(ctx, field)
			case "imageUrl":
				return ec.fieldContext_Plant_imageUrl(ctx, field)
			case "alerts":
				return ec.fieldContext_Plant_alerts(ctx, field)
			case "thresholds":
				return ec.fieldContext_Plant_thresholds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Plant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Plant_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Plant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_sensors(ctx context.Context, field graphql.CollectedField, obj *domain.Location) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Location_sensors,
		func(ctx context.Context) (any, error) {
			return obj.Sensors, nil
		},
		nil,
		ec.marshalNSensor2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐSensorᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Location_sensors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Sensor_id(ctx, field)
			case "plantId":
				return ec.fieldContext_Sensor_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Sensor_plant(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Sensor_microcontroller(ctx, field)
			case "status":
				return ec.fieldContext_Sensor_status(ctx, field)
			case "lastReading":
				return ec.fieldContext_Sensor_lastReading(ctx, field)
			case "location":
				return ec.fieldContext_Sensor_location(ctx, field)
			case "isActive":
				return ec.fieldContext_Sensor_isActive(ctx, field)
			case "batteryLevel":
				return ec.fieldContext_Sensor_batteryLevel(ctx, field)
			case "signalStrength":
				return ec.fieldContext_Sensor_signalStrength(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Sensor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_microcontrollers(ctx context.Context, field graphql.CollectedField, obj *domain.Location) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Location_microcontrollers,
		func(ctx context.Context) (any, error) {
			return obj.Microcontrollers, nil
		},
		nil,
		ec.marshalNMicrocontroller2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐMicrocontrollerᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Location_microcontrollers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Microcontroller_id(ctx, field)
			case "uniqueId":
				return ec.fieldContext_Microcontroller_uniqueId(ctx, field)
			case "type":
				return ec.fieldContext_Microcontroller_type(ctx, field)
			case "location":
				return ec.fieldContext_Microcontroller_location(ctx, field)
			case "enabled":
				return ec.fieldContext_Microcontroller_enabled(ctx, field)
			case "plantId":
				return ec.fieldContext_Microcontroller_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Microcontroller_plant(ctx, field)
			case "status":
				return ec.fieldContext_Microcontroller_status(ctx, field)
			case "lastReading":
				return ec.fieldContext_Microcontroller_lastReading(ctx, field)
			case "isActive":
				return ec.fieldContext_Microcontroller_isActive(ctx, field)
			case "batteryLevel":
				return ec.fieldContext_Microcontroller_batteryLevel(ctx, field)
			case "signalStrength":
				return ec.fieldContext_Microcontroller_signalStrength(ctx, field)
			case "userAssociations":
				return ec.fieldContext_Microcontroller_userAssociations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Microcontroller_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Microcontroller", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetricResult_metricName(ctx context.Context, field graphql.CollectedField, obj *domain.MetricResult) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MetricResult_metricName,
		func(ctx context.Context) (any, error) {
			return obj.MetricName, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MetricResult_metricName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetricResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetricResult_value(ctx context.Context, field graphql.CollectedField, obj *domain.MetricResult) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MetricResult_value,
		func(ctx context.Context) (any, error) {
			return obj.Value, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MetricResult_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetricResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetricResult_unit(ctx context.Context, field graphql.CollectedField, obj *domain.MetricResult) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MetricResult_unit,
		func(ctx context.Context) (any, error) {
			return obj.Unit, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MetricResult_unit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetricResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetricResult_calculatedAt(ctx context.Context, field graphql.CollectedField, obj *domain.MetricResult) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MetricResult_calculatedAt,
		func(ctx context.Context) (any, error) {
			return obj.CalculatedAt, nil
		},
		nil,
		ec.marshalNDateTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MetricResult_calculatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetricResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetricResult_controllerId(ctx context.Context, field graphql.CollectedField, obj *domain.MetricResult) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MetricResult_controllerId,
		func(ctx context.Context) (any, error) {
			return obj.ControllerID, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MetricResult_controllerId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetricResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetricResult_microcontrollerId(ctx context.Context, field graphql.CollectedField, obj *domain.MetricResult) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MetricResult_microcontrollerId,
		func(ctx context.Context) (any, error) {
			return obj.MicrocontrollerID, nil
		},
		nil,
		ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_MetricResult_microcontrollerId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetricResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetricResult_description(ctx context.Context, field graphql.CollectedField, obj *domain.MetricResult) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MetricResult_description,
		func(ctx context.Context) (any, error) {
			return obj.Description, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_MetricResult_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetricResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Microcontroller_id(ctx context.Context, field graphql.CollectedField, obj *domain.Microcontroller) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Microcontroller_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Microcontroller_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Microcontroller",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Microcontroller_uniqueId(ctx context.Context, field graphql.CollectedField, obj *domain.Microcontroller) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Microcontroller_uniqueId,
		func(ctx context.Context) (any, error) {
			return obj.UniqueID, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Microcontroller_uniqueId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Microcontroller",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Microcontroller_type(ctx context.Context, field graphql.CollectedField, obj *domain.Microcontroller) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Microcontroller_type,
		func(ctx context.Context) (any, error) {
			return obj.Type, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Microcontroller_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Microcontroller",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Microcontroller_location(ctx context.Context, field graphql.CollectedField, obj *domain.Microcontroller) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Microcontroller_location,
		func(ctx context.Context) (any, error) {
			return obj.Location, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Microcontroller_location(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Microcontroller",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Microcontroller_enabled(ctx context.Context, field graphql.CollectedField, obj *domain.Microcontroller) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Microcontroller_enabled,
		func(ctx context.Context) (any, error) {
			return obj.Enabled, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Microcontroller_enabled(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Microcontroller",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Microcontroller_plantId(ctx context.Context, field graphql.CollectedField, obj *domain.Microcontroller) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Microcontroller_plantId,
		func(ctx context.Context) (any, error) {
			return obj.PlantID, nil
		},
		nil,
		ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Microcontroller_plantId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Microcontroller",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Microcontroller_plant(ctx context.Context, field graphql.CollectedField, obj *domain.Microcontroller) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Microcontroller_plant,
		func(ctx context.Context) (any, error) {
			return obj.Plant, nil
		},
		nil,
		ec.marshalOPlant2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlant,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Microcontroller_plant(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Microcontroller",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Plant_id(ctx, field)
			case "name":
				return ec.fieldContext_Plant_name(ctx, field)
			case "type":
				return ec.fieldContext_Plant_type(ctx, field)
			case "sensor":
				return ec.fieldContext_Plant_sensor(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Plant_microcontroller(ctx, field)
			case "score":
				return ec.fieldContext_Plant_score(ctx, field)
			case "change":
				return ec.fieldContext_Plant_change(ctx, field)
			case "status":
				return ec.fieldContext_Plant_status(ctx, field)
			case "temperature":
				return ec.fieldContext_Plant_temperature(ctx, field)
			case "humidity":
				return ec.fieldContext_Plant_humidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_Plant_lightLevel(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_Plant_soilHumidity(ctx, field)
			case "location":
				return ec.fieldContext_Plant_location(ctx, field)
			case "locationName":
				return ec.fieldContext_Plant_locationName(ctx, field)
			case "ownerUserId":
				return ec.fieldContext_Plant_ownerUserId(ctx, field)
			case "owner":
				return ec.fieldContext_Plant_owner(ctx, field)
			case "lastUpdate":
				return ec.fieldContext_Plant_lastUpdate(ctx, field)
			case "image":
				return ec.fieldContext_Plant_image(ctx, field)
			case "imageUrl":
				return ec.fieldContext_Plant_imageUrl(ctx, field)
			case "alerts":
				return ec.fieldContext_Plant_alerts(ctx, field)
			case "thresholds":
				return ec.fieldContext_Plant_thresholds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Plant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Plant_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Plant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Microcontroller_status(ctx context.Context, field graphql.CollectedField, obj *domain.Microcontroller) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Microcontroller_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNSensorStatus2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐSensorStatus,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Microcontroller_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Microcontroller",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SensorStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Microcontroller_lastReading(ctx context.Context, field graphql.CollectedField, obj *domain.Microcontroller) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Microcontroller_lastReading,
		func(ctx context.Context) (any, error) {
			return obj.LastReading, nil
		},
		nil,
		ec.marshalODateTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Microcontroller_lastReading(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Microcontroller",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Microcontroller_isActive(ctx context.Context, field graphql.CollectedField, obj *domain.Microcontroller) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Microcontroller_isActive,
		func(ctx context.Context) (any, error) {
			return obj.IsActive, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Microcontroller_isActive(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Microcontroller",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Microcontroller_batteryLevel(ctx context.Context, field graphql.CollectedField, obj *domain.Microcontroller) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Microcontroller_batteryLevel,
		func(ctx context.Context) (any, error) {
			return obj.BatteryLevel, nil
		},
		nil,
		ec.marshalOFloat2ᚖfloat64,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Microcontroller_batteryLevel(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Microcontroller",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Microcontroller_signalStrength(ctx context.Context, field graphql.CollectedField, obj *domain.Microcontroller) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Microcontroller_signalStrength,
		func(ctx context.Context) (any, error) {
			return obj.SignalStrength, nil
		},
		nil,
		ec.marshalOFloat2ᚖfloat64,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Microcontroller_signalStrength(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Microcontroller",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Microcontroller_userAssociations(ctx context.Context, field graphql.CollectedField, obj *domain.Microcontroller) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Microcontroller_userAssociations,
		func(ctx context.Context) (any, error) {
			return obj.UserAssociations, nil
		},
		nil,
		ec.marshalNUserMicrocontrollerAssociation2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUserMicrocontrollerAssociationᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Microcontroller_userAssociations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Microcontroller",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userId":
				return ec.fieldContext_UserMicrocontrollerAssociation_userId(ctx, field)
			case "user":
				return ec.fieldContext_UserMicrocontrollerAssociation_user(ctx, field)
			case "microcontrollerId":
				return ec.fieldContext_UserMicrocontrollerAssociation_microcontrollerId(ctx, field)
			case "microcontroller":
				return ec.fieldContext_UserMicrocontrollerAssociation_microcontroller(ctx, field)
			case "role":
				return ec.fieldContext_UserMicrocontrollerAssociation_role(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserMicrocontrollerAssociation_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserMicrocontrollerAssociation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Microcontroller_createdAt(ctx context.Context, field graphql.CollectedField, obj *domain.Microcontroller) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Microcontroller_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNDateTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Microcontroller_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Microcontroller",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MultiReportResponse_reports(ctx context.Context, field graphql.CollectedField, obj *domain.MultiReportResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MultiReportResponse_reports,
		func(ctx context.Context) (any, error) {
			return obj.Reports, nil
		},
		nil,
		ec.marshalNAnalyticsReport2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐAnalyticsReportᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MultiReportResponse_reports(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MultiReportResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "controllerId":
				return ec.fieldContext_AnalyticsReport_controllerId(ctx, field)
			case "microcontrollerId":
				return ec.fieldContext_AnalyticsReport_microcontrollerId(ctx, field)
			case "metrics":
				return ec.fieldContext_AnalyticsReport_metrics(ctx, field)
			case "generatedAt":
				return ec.fieldContext_AnalyticsReport_generatedAt(ctx, field)
			case "dataPointsCount":
				return ec.fieldContext_AnalyticsReport_dataPointsCount(ctx, field)
			case "filters":
				return ec.fieldContext_AnalyticsReport_filters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AnalyticsReport", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MultiReportResponse_generatedAt(ctx context.Context, field graphql.CollectedField, obj *domain.MultiReportResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MultiReportResponse_generatedAt,
		func(ctx context.Context) (any, error) {
			return obj.GeneratedAt, nil
		},
		nil,
		ec.marshalNDateTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MultiReportResponse_generatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MultiReportResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MultiReportResponse_totalControllers(ctx context.Context, field graphql.CollectedField, obj *domain.MultiReportResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MultiReportResponse_totalControllers,
		func(ctx context.Context) (any, error) {
			return obj.TotalControllers, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MultiReportResponse_totalControllers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MultiReportResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MultiReportResponse_totalMetrics(ctx context.Context, field graphql.CollectedField, obj *domain.MultiReportResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MultiReportResponse_totalMetrics,
		func(ctx context.Context) (any, error) {
			return obj.TotalMetrics, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MultiReportResponse_totalMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MultiReportResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_login(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_login,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().Login(ctx, fc.Args["input"].(LoginInput))
		},
		nil,
		ec.marshalNSession2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐSession,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_login(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userId":
				return ec.fieldContext_Session_userId(ctx, field)
			case "user":
				return ec.fieldContext_Session_user(ctx, field)
			case "token":
				return ec.fieldContext_Session_token(ctx, field)
			case "expiresAt":
				return ec.fieldContext_Session_expiresAt(ctx, field)
			case "deviceInfo":
				return ec.fieldContext_Session_deviceInfo(ctx, field)
			case "lastActivity":
				return ec.fieldContext_Session_lastActivity(ctx, field)
			case "isActive":
				return ec.fieldContext_Session_isActive(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Session", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_login_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_register(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_register,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().Register(ctx, fc.Args["input"].(RegisterInput))
		},
		nil,
		ec.marshalNUser2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUser,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_register(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "permissions":
				return ec.fieldContext_User_permissions(ctx, field)
			case "isActive":
				return ec.fieldContext_User_isActive(ctx, field)
			case "deviceAssociations":
				return ec.fieldContext_User_deviceAssociations(ctx, field)
			case "ownedPlants":
				return ec.fieldContext_User_ownedPlants(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastLogin":
				return ec.fieldContext_User_lastLogin(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_register_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_logout(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_logout,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Mutation().Logout(ctx)
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_logout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_refreshToken(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_refreshToken,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().RefreshToken(ctx, fc.Args["token"].(string))
		},
		nil,
		ec.marshalNSession2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐSession,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_refreshToken(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userId":
				return ec.fieldContext_Session_userId(ctx, field)
			case "user":
				return ec.fieldContext_Session_user(ctx, field)
			case "token":
				return ec.fieldContext_Session_token(ctx, field)
			case "expiresAt":
				return ec.fieldContext_Session_expiresAt(ctx, field)
			case "deviceInfo":
				return ec.fieldContext_Session_deviceInfo(ctx, field)
			case "lastActivity":
				return ec.fieldContext_Session_lastActivity(ctx, field)
			case "isActive":
				return ec.fieldContext_Session_isActive(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Session", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_refreshToken_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createPlant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createPlant,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreatePlant(ctx, fc.Args["input"].(CreatePlantInput))
		},
		nil,
		ec.marshalNPlant2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlant,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_createPlant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Plant_id(ctx, field)
			case "name":
				return ec.fieldContext_Plant_name(ctx, field)
			case "type":
				return ec.fieldContext_Plant_type(ctx, field)
			case "sensor":
				return ec.fieldContext_Plant_sensor(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Plant_microcontroller(ctx, field)
			case "score":
				return ec.fieldContext_Plant_score(ctx, field)
			case "change":
				return ec.fieldContext_Plant_change(ctx, field)
			case "status":
				return ec.fieldContext_Plant_status(ctx, field)
			case "temperature":
				return ec.fieldContext_Plant_temperature(ctx, field)
			case "humidity":
				return ec.fieldContext_Plant_humidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_Plant_lightLevel(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_Plant_soilHumidity(ctx, field)
			case "location":
				return ec.fieldContext_Plant_location(ctx, field)
			case "locationName":
				return ec.fieldContext_Plant_locationName(ctx, field)
			case "ownerUserId":
				return ec.fieldContext_Plant_ownerUserId(ctx, field)
			case "owner":
				return ec.fieldContext_Plant_owner(ctx, field)
			case "lastUpdate":
				return ec.fieldContext_Plant_lastUpdate(ctx, field)
			case "image":
				return ec.fieldContext_Plant_image(ctx, field)
			case "imageUrl":
				return ec.fieldContext_Plant_imageUrl(ctx, field)
			case "alerts":
				return ec.fieldContext_Plant_alerts(ctx, field)
			case "thresholds":
				return ec.fieldContext_Plant_thresholds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Plant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Plant_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Plant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createPlant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePlant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updatePlant,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdatePlant(ctx, fc.Args["id"].(uuid.UUID), fc.Args["input"].(UpdatePlantInput))
		},
		nil,
		ec.marshalNPlant2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlant,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updatePlant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Plant_id(ctx, field)
			case "name":
				return ec.fieldContext_Plant_name(ctx, field)
			case "type":
				return ec.fieldContext_Plant_type(ctx, field)
			case "sensor":
				return ec.fieldContext_Plant_sensor(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Plant_microcontroller(ctx, field)
			case "score":
				return ec.fieldContext_Plant_score(ctx, field)
			case "change":
				return ec.fieldContext_Plant_change(ctx, field)
			case "status":
				return ec.fieldContext_Plant_status(ctx, field)
			case "temperature":
				return ec.fieldContext_Plant_temperature(ctx, field)
			case "humidity":
				return ec.fieldContext_Plant_humidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_Plant_lightLevel(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_Plant_soilHumidity(ctx, field)
			case "location":
				return ec.fieldContext_Plant_location(ctx, field)
			case "locationName":
				return ec.fieldContext_Plant_locationName(ctx, field)
			case "ownerUserId":
				return ec.fieldContext_Plant_ownerUserId(ctx, field)
			case "owner":
				return ec.fieldContext_Plant_owner(ctx, field)
			case "lastUpdate":
				return ec.fieldContext_Plant_lastUpdate(ctx, field)
			case "image":
				return ec.fieldContext_Plant_image(ctx, field)
			case "imageUrl":
				return ec.fieldContext_Plant_imageUrl(ctx, field)
			case "alerts":
				return ec.fieldContext_Plant_alerts(ctx, field)
			case "thresholds":
				return ec.fieldContext_Plant_thresholds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Plant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Plant_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Plant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePlant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deletePlant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deletePlant,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeletePlant(ctx, fc.Args["id"].(uuid.UUID))
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_deletePlant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deletePlant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_assignMicrocontrollerToPlant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_assignMicrocontrollerToPlant,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().AssignMicrocontrollerToPlant(ctx, fc.Args["plantId"].(uuid.UUID), fc.Args["microcontrollerId"].(uuid.UUID))
		},
		nil,
		ec.marshalNPlant2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlant,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_assignMicrocontrollerToPlant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Plant_id(ctx, field)
			case "name":
				return ec.fieldContext_Plant_name(ctx, field)
			case "type":
				return ec.fieldContext_Plant_type(ctx, field)
			case "sensor":
				return ec.fieldContext_Plant_sensor(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Plant_microcontroller(ctx, field)
			case "score":
				return ec.fieldContext_Plant_score(ctx, field)
			case "change":
				return ec.fieldContext_Plant_change(ctx, field)
			case "status":
				return ec.fieldContext_Plant_status(ctx, field)
			case "temperature":
				return ec.fieldContext_Plant_temperature(ctx, field)
			case "humidity":
				return ec.fieldContext_Plant_humidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_Plant_lightLevel(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_Plant_soilHumidity(ctx, field)
			case "location":
				return ec.fieldContext_Plant_location(ctx, field)
			case "locationName":
				return ec.fieldContext_Plant_locationName(ctx, field)
			case "ownerUserId":
				return ec.fieldContext_Plant_ownerUserId(ctx, field)
			case "owner":
				return ec.fieldContext_Plant_owner(ctx, field)
			case "lastUpdate":
				return ec.fieldContext_Plant_lastUpdate(ctx, field)
			case "image":
				return ec.fieldContext_Plant_image(ctx, field)
			case "imageUrl":
				return ec.fieldContext_Plant_imageUrl(ctx, field)
			case "alerts":
				return ec.fieldContext_Plant_alerts(ctx, field)
			case "thresholds":
				return ec.fieldContext_Plant_thresholds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Plant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Plant_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Plant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_assignMicrocontrollerToPlant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_unassignMicrocontrollerFromPlant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_unassignMicrocontrollerFromPlant,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UnassignMicrocontrollerFromPlant(ctx, fc.Args["plantId"].(uuid.UUID))
		},
		nil,
		ec.marshalNPlant2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlant,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_unassignMicrocontrollerFromPlant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Plant_id(ctx, field)
			case "name":
				return ec.fieldContext_Plant_name(ctx, field)
			case "type":
				return ec.fieldContext_Plant_type(ctx, field)
			case "sensor":
				return ec.fieldContext_Plant_sensor(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Plant_microcontroller(ctx, field)
			case "score":
				return ec.fieldContext_Plant_score(ctx, field)
			case "change":
				return ec.fieldContext_Plant_change(ctx, field)
			case "status":
				return ec.fieldContext_Plant_status(ctx, field)
			case "temperature":
				return ec.fieldContext_Plant_temperature(ctx, field)
			case "humidity":
				return ec.fieldContext_Plant_humidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_Plant_lightLevel(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_Plant_soilHumidity(ctx, field)
			case "location":
				return ec.fieldContext_Plant_location(ctx, field)
			case "locationName":
				return ec.fieldContext_Plant_locationName(ctx, field)
			case "ownerUserId":
				return ec.fieldContext_Plant_ownerUserId(ctx, field)
			case "owner":
				return ec.fieldContext_Plant_owner(ctx, field)
			case "lastUpdate":
				return ec.fieldContext_Plant_lastUpdate(ctx, field)
			case "image":
				return ec.fieldContext_Plant_image(ctx, field)
			case "imageUrl":
				return ec.fieldContext_Plant_imageUrl(ctx, field)
			case "alerts":
				return ec.fieldContext_Plant_alerts(ctx, field)
			case "thresholds":
				return ec.fieldContext_Plant_thresholds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Plant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Plant_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Plant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_unassignMicrocontrollerFromPlant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_assignSensorToPlant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_assignSensorToPlant,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().AssignSensorToPlant(ctx, fc.Args["plantId"].(uuid.UUID), fc.Args["sensorId"].(string))
		},
		nil,
		ec.marshalNPlant2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlant,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_assignSensorToPlant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Plant_id(ctx, field)
			case "name":
				return ec.fieldContext_Plant_name(ctx, field)
			case "type":
				return ec.fieldContext_Plant_type(ctx, field)
			case "sensor":
				return ec.fieldContext_Plant_sensor(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Plant_microcontroller(ctx, field)
			case "score":
				return ec.fieldContext_Plant_score(ctx, field)
			case "change":
				return ec.fieldContext_Plant_change(ctx, field)
			case "status":
				return ec.fieldContext_Plant_status(ctx, field)
			case "temperature":
				return ec.fieldContext_Plant_temperature(ctx, field)
			case "humidity":
				return ec.fieldContext_Plant_humidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_Plant_lightLevel(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_Plant_soilHumidity(ctx, field)
			case "location":
				return ec.fieldContext_Plant_location(ctx, field)
			case "locationName":
				return ec.fieldContext_Plant_locationName(ctx, field)
			case "ownerUserId":
				return ec.fieldContext_Plant_ownerUserId(ctx, field)
			case "owner":
				return ec.fieldContext_Plant_owner(ctx, field)
			case "lastUpdate":
				return ec.fieldContext_Plant_lastUpdate(ctx, field)
			case "image":
				return ec.fieldContext_Plant_image(ctx, field)
			case "imageUrl":
				return ec.fieldContext_Plant_imageUrl(ctx, field)
			case "alerts":
				return ec.fieldContext_Plant_alerts(ctx, field)
			case "thresholds":
				return ec.fieldContext_Plant_thresholds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Plant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Plant_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Plant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_assignSensorToPlant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_unassignSensorFromPlant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_unassignSensorFromPlant,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UnassignSensorFromPlant(ctx, fc.Args["plantId"].(uuid.UUID))
		},
		nil,
		ec.marshalNPlant2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlant,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_unassignSensorFromPlant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Plant_id(ctx, field)
			case "name":
				return ec.fieldContext_Plant_name(ctx, field)
			case "type":
				return ec.fieldContext_Plant_type(ctx, field)
			case "sensor":
				return ec.fieldContext_Plant_sensor(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Plant_microcontroller(ctx, field)
			case "score":
				return ec.fieldContext_Plant_score(ctx, field)
			case "change":
				return ec.fieldContext_Plant_change(ctx, field)
			case "status":
				return ec.fieldContext_Plant_status(ctx, field)
			case "temperature":
				return ec.fieldContext_Plant_temperature(ctx, field)
			case "humidity":
				return ec.fieldContext_Plant_humidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_Plant_lightLevel(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_Plant_soilHumidity(ctx, field)
			case "location":
				return ec.fieldContext_Plant_location(ctx, field)
			case "locationName":
				return ec.fieldContext_Plant_locationName(ctx, field)
			case "ownerUserId":
				return ec.fieldContext_Plant_ownerUserId(ctx, field)
			case "owner":
				return ec.fieldContext_Plant_owner(ctx, field)
			case "lastUpdate":
				return ec.fieldContext_Plant_lastUpdate(ctx, field)
			case "image":
				return ec.fieldContext_Plant_image(ctx, field)
			case "imageUrl":
				return ec.fieldContext_Plant_imageUrl(ctx, field)
			case "alerts":
				return ec.fieldContext_Plant_alerts(ctx, field)
			case "thresholds":
				return ec.fieldContext_Plant_thresholds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Plant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Plant_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Plant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_unassignSensorFromPlant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateMicrocontrollerStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateMicrocontrollerStatus,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateMicrocontrollerStatus(ctx, fc.Args["id"].(uuid.UUID), fc.Args["status"].(domain.SensorStatus))
		},
		nil,
		ec.marshalNMicrocontroller2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐMicrocontroller,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateMicrocontrollerStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Microcontroller_id(ctx, field)
			case "uniqueId":
				return ec.fieldContext_Microcontroller_uniqueId(ctx, field)
			case "type":
				return ec.fieldContext_Microcontroller_type(ctx, field)
			case "location":
				return ec.fieldContext_Microcontroller_location(ctx, field)
			case "enabled":
				return ec.fieldContext_Microcontroller_enabled(ctx, field)
			case "plantId":
				return ec.fieldContext_Microcontroller_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Microcontroller_plant(ctx, field)
			case "status":
				return ec.fieldContext_Microcontroller_status(ctx, field)
			case "lastReading":
				return ec.fieldContext_Microcontroller_lastReading(ctx, field)
			case "isActive":
				return ec.fieldContext_Microcontroller_isActive(ctx, field)
			case "batteryLevel":
				return ec.fieldContext_Microcontroller_batteryLevel(ctx, field)
			case "signalStrength":
				return ec.fieldContext_Microcontroller_signalStrength(ctx, field)
			case "userAssociations":
				return ec.fieldContext_Microcontroller_userAssociations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Microcontroller_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Microcontroller", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateMicrocontrollerStatus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_enableMicrocontroller(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_enableMicrocontroller,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().EnableMicrocontroller(ctx, fc.Args["id"].(uuid.UUID))
		},
		nil,
		ec.marshalNMicrocontroller2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐMicrocontroller,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_enableMicrocontroller(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Microcontroller_id(ctx, field)
			case "uniqueId":
				return ec.fieldContext_Microcontroller_uniqueId(ctx, field)
			case "type":
				return ec.fieldContext_Microcontroller_type(ctx, field)
			case "location":
				return ec.fieldContext_Microcontroller_location(ctx, field)
			case "enabled":
				return ec.fieldContext_Microcontroller_enabled(ctx, field)
			case "plantId":
				return ec.fieldContext_Microcontroller_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Microcontroller_plant(ctx, field)
			case "status":
				return ec.fieldContext_Microcontroller_status(ctx, field)
			case "lastReading":
				return ec.fieldContext_Microcontroller_lastReading(ctx, field)
			case "isActive":
				return ec.fieldContext_Microcontroller_isActive(ctx, field)
			case "batteryLevel":
				return ec.fieldContext_Microcontroller_batteryLevel(ctx, field)
			case "signalStrength":
				return ec.fieldContext_Microcontroller_signalStrength(ctx, field)
			case "userAssociations":
				return ec.fieldContext_Microcontroller_userAssociations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Microcontroller_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Microcontroller", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_enableMicrocontroller_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_disableMicrocontroller(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_disableMicrocontroller,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DisableMicrocontroller(ctx, fc.Args["id"].(uuid.UUID))
		},
		nil,
		ec.marshalNMicrocontroller2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐMicrocontroller,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_disableMicrocontroller(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Microcontroller_id(ctx, field)
			case "uniqueId":
				return ec.fieldContext_Microcontroller_uniqueId(ctx, field)
			case "type":
				return ec.fieldContext_Microcontroller_type(ctx, field)
			case "location":
				return ec.fieldContext_Microcontroller_location(ctx, field)
			case "enabled":
				return ec.fieldContext_Microcontroller_enabled(ctx, field)
			case "plantId":
				return ec.fieldContext_Microcontroller_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Microcontroller_plant(ctx, field)
			case "status":
				return ec.fieldContext_Microcontroller_status(ctx, field)
			case "lastReading":
				return ec.fieldContext_Microcontroller_lastReading(ctx, field)
			case "isActive":
				return ec.fieldContext_Microcontroller_isActive(ctx, field)
			case "batteryLevel":
				return ec.fieldContext_Microcontroller_batteryLevel(ctx, field)
			case "signalStrength":
				return ec.fieldContext_Microcontroller_signalStrength(ctx, field)
			case "userAssociations":
				return ec.fieldContext_Microcontroller_userAssociations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Microcontroller_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Microcontroller", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_disableMicrocontroller_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateMicrocontroller(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateMicrocontroller,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateMicrocontroller(ctx, fc.Args["id"].(uuid.UUID), fc.Args["input"].(DeviceUpdateInput))
		},
		nil,
		ec.marshalNMicrocontroller2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐMicrocontroller,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateMicrocontroller(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Microcontroller_id(ctx, field)
			case "uniqueId":
				return ec.fieldContext_Microcontroller_uniqueId(ctx, field)
			case "type":
				return ec.fieldContext_Microcontroller_type(ctx, field)
			case "location":
				return ec.fieldContext_Microcontroller_location(ctx, field)
			case "enabled":
				return ec.fieldContext_Microcontroller_enabled(ctx, field)
			case "plantId":
				return ec.fieldContext_Microcontroller_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Microcontroller_plant(ctx, field)
			case "status":
				return ec.fieldContext_Microcontroller_status(ctx, field)
			case "lastReading":
				return ec.fieldContext_Microcontroller_lastReading(ctx, field)
			case "isActive":
				return ec.fieldContext_Microcontroller_isActive(ctx, field)
			case "batteryLevel":
				return ec.fieldContext_Microcontroller_batteryLevel(ctx, field)
			case "signalStrength":
				return ec.fieldContext_Microcontroller_signalStrength(ctx, field)
			case "userAssociations":
				return ec.fieldContext_Microcontroller_userAssociations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Microcontroller_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Microcontroller", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateMicrocontroller_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_calibrateMicrocontroller(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_calibrateMicrocontroller,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CalibrateMicrocontroller(ctx, fc.Args["id"].(uuid.UUID))
		},
		nil,
		ec.marshalNMicrocontroller2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐMicrocontroller,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_calibrateMicrocontroller(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Microcontroller_id(ctx, field)
			case "uniqueId":
				return ec.fieldContext_Microcontroller_uniqueId(ctx, field)
			case "type":
				return ec.fieldContext_Microcontroller_type(ctx, field)
			case "location":
				return ec.fieldContext_Microcontroller_location(ctx, field)
			case "enabled":
				return ec.fieldContext_Microcontroller_enabled(ctx, field)
			case "plantId":
				return ec.fieldContext_Microcontroller_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Microcontroller_plant(ctx, field)
			case "status":
				return ec.fieldContext_Microcontroller_status(ctx, field)
			case "lastReading":
				return ec.fieldContext_Microcontroller_lastReading(ctx, field)
			case "isActive":
				return ec.fieldContext_Microcontroller_isActive(ctx, field)
			case "batteryLevel":
				return ec.fieldContext_Microcontroller_batteryLevel(ctx, field)
			case "signalStrength":
				return ec.fieldContext_Microcontroller_signalStrength(ctx, field)
			case "userAssociations":
				return ec.fieldContext_Microcontroller_userAssociations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Microcontroller_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Microcontroller", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_calibrateMicrocontroller_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_associateUserWithDevice(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_associateUserWithDevice,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().AssociateUserWithDevice(ctx, fc.Args["input"].(DeviceAssociationInput))
		},
		nil,
		ec.marshalNUserMicrocontrollerAssociation2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUserMicrocontrollerAssociation,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_associateUserWithDevice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userId":
				return ec.fieldContext_UserMicrocontrollerAssociation_userId(ctx, field)
			case "user":
				return ec.fieldContext_UserMicrocontrollerAssociation_user(ctx, field)
			case "microcontrollerId":
				return ec.fieldContext_UserMicrocontrollerAssociation_microcontrollerId(ctx, field)
			case "microcontroller":
				return ec.fieldContext_UserMicrocontrollerAssociation_microcontroller(ctx, field)
			case "role":
				return ec.fieldContext_UserMicrocontrollerAssociation_role(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserMicrocontrollerAssociation_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserMicrocontrollerAssociation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_associateUserWithDevice_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateDeviceAssociation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateDeviceAssociation,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateDeviceAssociation(ctx, fc.Args["microcontrollerId"].(uuid.UUID), fc.Args["plantId"].(*uuid.UUID), fc.Args["role"].(*domain.DeviceRole))
		},
		nil,
		ec.marshalNUserMicrocontrollerAssociation2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUserMicrocontrollerAssociation,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateDeviceAssociation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userId":
				return ec.fieldContext_UserMicrocontrollerAssociation_userId(ctx, field)
			case "user":
				return ec.fieldContext_UserMicrocontrollerAssociation_user(ctx, field)
			case "microcontrollerId":
				return ec.fieldContext_UserMicrocontrollerAssociation_microcontrollerId(ctx, field)
			case "microcontroller":
				return ec.fieldContext_UserMicrocontrollerAssociation_microcontroller(ctx, field)
			case "role":
				return ec.fieldContext_UserMicrocontrollerAssociation_role(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserMicrocontrollerAssociation_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserMicrocontrollerAssociation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateDeviceAssociation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_removeDeviceAssociation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_removeDeviceAssociation,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().RemoveDeviceAssociation(ctx, fc.Args["microcontrollerId"].(uuid.UUID))
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_removeDeviceAssociation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_removeDeviceAssociation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateSensorStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateSensorStatus,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateSensorStatus(ctx, fc.Args["id"].(string), fc.Args["status"].(domain.SensorStatus))
		},
		nil,
		ec.marshalNSensor2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐSensor,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateSensorStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Sensor_id(ctx, field)
			case "plantId":
				return ec.fieldContext_Sensor_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Sensor_plant(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Sensor_microcontroller(ctx, field)
			case "status":
				return ec.fieldContext_Sensor_status(ctx, field)
			case "lastReading":
				return ec.fieldContext_Sensor_lastReading(ctx, field)
			case "location":
				return ec.fieldContext_Sensor_location(ctx, field)
			case "isActive":
				return ec.fieldContext_Sensor_isActive(ctx, field)
			case "batteryLevel":
				return ec.fieldContext_Sensor_batteryLevel(ctx, field)
			case "signalStrength":
				return ec.fieldContext_Sensor_signalStrength(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Sensor", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateSensorStatus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_calibrateSensor(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_calibrateSensor,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CalibrateSensor(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalNSensor2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐSensor,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_calibrateSensor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Sensor_id(ctx, field)
			case "plantId":
				return ec.fieldContext_Sensor_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Sensor_plant(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Sensor_microcontroller(ctx, field)
			case "status":
				return ec.fieldContext_Sensor_status(ctx, field)
			case "lastReading":
				return ec.fieldContext_Sensor_lastReading(ctx, field)
			case "location":
				return ec.fieldContext_Sensor_location(ctx, field)
			case "isActive":
				return ec.fieldContext_Sensor_isActive(ctx, field)
			case "batteryLevel":
				return ec.fieldContext_Sensor_batteryLevel(ctx, field)
			case "signalStrength":
				return ec.fieldContext_Sensor_signalStrength(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Sensor", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_calibrateSensor_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_markAlertAsRead(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_markAlertAsRead,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().MarkAlertAsRead(ctx, fc.Args["alertId"].(uuid.UUID))
		},
		nil,
		ec.marshalNAlert2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐAlert,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_markAlertAsRead(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Alert_id(ctx, field)
			case "plantId":
				return ec.fieldContext_Alert_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Alert_plant(ctx, field)
			case "type":
				return ec.fieldContext_Alert_type(ctx, field)
			case "priority":
				return ec.fieldContext_Alert_priority(ctx, field)
			case "message":
				return ec.fieldContext_Alert_message(ctx, field)
			case "value":
				return ec.fieldContext_Alert_value(ctx, field)
			case "threshold":
				return ec.fieldContext_Alert_threshold(ctx, field)
			case "timestamp":
				return ec.fieldContext_Alert_timestamp(ctx, field)
			case "isRead":
				return ec.fieldContext_Alert_isRead(ctx, field)
			case "resolvedAt":
				return ec.fieldContext_Alert_resolvedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Alert", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_markAlertAsRead_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_markAllAlertsAsRead(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_markAllAlertsAsRead,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().MarkAllAlertsAsRead(ctx, fc.Args["plantId"].(*uuid.UUID))
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_markAllAlertsAsRead(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_markAllAlertsAsRead_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_resolveAlert(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_resolveAlert,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().ResolveAlert(ctx, fc.Args["alertId"].(uuid.UUID))
		},
		nil,
		ec.marshalNAlert2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐAlert,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_resolveAlert(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Alert_id(ctx, field)
			case "plantId":
				return ec.fieldContext_Alert_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Alert_plant(ctx, field)
			case "type":
				return ec.fieldContext_Alert_type(ctx, field)
			case "priority":
				return ec.fieldContext_Alert_priority(ctx, field)
			case "message":
				return ec.fieldContext_Alert_message(ctx, field)
			case "value":
				return ec.fieldContext_Alert_value(ctx, field)
			case "threshold":
				return ec.fieldContext_Alert_threshold(ctx, field)
			case "timestamp":
				return ec.fieldContext_Alert_timestamp(ctx, field)
			case "isRead":
				return ec.fieldContext_Alert_isRead(ctx, field)
			case "resolvedAt":
				return ec.fieldContext_Alert_resolvedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Alert", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_resolveAlert_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_dismissAlert(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_dismissAlert,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DismissAlert(ctx, fc.Args["alertId"].(uuid.UUID))
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_dismissAlert(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_dismissAlert_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_markNotificationAsRead(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_markNotificationAsRead,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().MarkNotificationAsRead(ctx, fc.Args["notificationId"].(uuid.UUID))
		},
		nil,
		ec.marshalNNotification2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐNotification,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_markNotificationAsRead(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Notification_id(ctx, field)
			case "userId":
				return ec.fieldContext_Notification_userId(ctx, field)
			case "user":
				return ec.fieldContext_Notification_user(ctx, field)
			case "type":
				return ec.fieldContext_Notification_type(ctx, field)
			case "title":
				return ec.fieldContext_Notification_title(ctx, field)
			case "message":
				return ec.fieldContext_Notification_message(ctx, field)
			case "timestamp":
				return ec.fieldContext_Notification_timestamp(ctx, field)
			case "isRead":
				return ec.fieldContext_Notification_isRead(ctx, field)
			case "plantId":
				return ec.fieldContext_Notification_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Notification_plant(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Notification", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_markNotificationAsRead_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_markAllNotificationsAsRead(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_markAllNotificationsAsRead,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().MarkAllNotificationsAsRead(ctx, fc.Args["userId"].(uuid.UUID))
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_markAllNotificationsAsRead(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_markAllNotificationsAsRead_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_dismissNotification(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_dismissNotification,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DismissNotification(ctx, fc.Args["notificationId"].(uuid.UUID))
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_dismissNotification(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_dismissNotification_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateThresholds(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateThresholds,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateThresholds(ctx, fc.Args["plantId"].(uuid.UUID), fc.Args["thresholds"].([]*ThresholdInput))
		},
		nil,
		ec.marshalNThreshold2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐThresholdᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateThresholds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Threshold_id(ctx, field)
			case "plantId":
				return ec.fieldContext_Threshold_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Threshold_plant(ctx, field)
			case "sensorType":
				return ec.fieldContext_Threshold_sensorType(ctx, field)
			case "minValue":
				return ec.fieldContext_Threshold_minValue(ctx, field)
			case "maxValue":
				return ec.fieldContext_Threshold_maxValue(ctx, field)
			case "criticalMin":
				return ec.fieldContext_Threshold_criticalMin(ctx, field)
			case "criticalMax":
				return ec.fieldContext_Threshold_criticalMax(ctx, field)
			case "unit":
				return ec.fieldContext_Threshold_unit(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Threshold", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateThresholds_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_resetThresholdsToDefault(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_resetThresholdsToDefault,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().ResetThresholdsToDefault(ctx, fc.Args["plantId"].(uuid.UUID))
		},
		nil,
		ec.marshalNThreshold2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐThresholdᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_resetThresholdsToDefault(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Threshold_id(ctx, field)
			case "plantId":
				return ec.fieldContext_Threshold_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Threshold_plant(ctx, field)
			case "sensorType":
				return ec.fieldContext_Threshold_sensorType(ctx, field)
			case "minValue":
				return ec.fieldContext_Threshold_minValue(ctx, field)
			case "maxValue":
				return ec.fieldContext_Threshold_maxValue(ctx, field)
			case "criticalMin":
				return ec.fieldContext_Threshold_criticalMin(ctx, field)
			case "criticalMax":
				return ec.fieldContext_Threshold_criticalMax(ctx, field)
			case "unit":
				return ec.fieldContext_Threshold_unit(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Threshold", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_resetThresholdsToDefault_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createLocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createLocation,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateLocation(ctx, fc.Args["input"].(CreateLocationInput))
		},
		nil,
		ec.marshalNLocation2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐLocation,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_createLocation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Location_id(ctx, field)
			case "name":
				return ec.fieldContext_Location_name(ctx, field)
			case "description":
				return ec.fieldContext_Location_description(ctx, field)
			case "coordinates":
				return ec.fieldContext_Location_coordinates(ctx, field)
			case "plants":
				return ec.fieldContext_Location_plants(ctx, field)
			case "sensors":
				return ec.fieldContext_Location_sensors(ctx, field)
			case "microcontrollers":
				return ec.fieldContext_Location_microcontrollers(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Location", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createLocation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateLocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateLocation,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateLocation(ctx, fc.Args["id"].(uuid.UUID), fc.Args["input"].(CreateLocationInput))
		},
		nil,
		ec.marshalNLocation2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐLocation,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateLocation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Location_id(ctx, field)
			case "name":
				return ec.fieldContext_Location_name(ctx, field)
			case "description":
				return ec.fieldContext_Location_description(ctx, field)
			case "coordinates":
				return ec.fieldContext_Location_coordinates(ctx, field)
			case "plants":
				return ec.fieldContext_Location_plants(ctx, field)
			case "sensors":
				return ec.fieldContext_Location_sensors(ctx, field)
			case "microcontrollers":
				return ec.fieldContext_Location_microcontrollers(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Location", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateLocation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteLocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteLocation,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteLocation(ctx, fc.Args["id"].(uuid.UUID))
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteLocation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteLocation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createPlantType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createPlantType,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreatePlantType(ctx, fc.Args["input"].(CreatePlantTypeInput))
		},
		nil,
		ec.marshalNPlantType2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlantType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_createPlantType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlantType_id(ctx, field)
			case "name":
				return ec.fieldContext_PlantType_name(ctx, field)
			case "description":
				return ec.fieldContext_PlantType_description(ctx, field)
			case "optimalTemperature":
				return ec.fieldContext_PlantType_optimalTemperature(ctx, field)
			case "optimalHumidity":
				return ec.fieldContext_PlantType_optimalHumidity(ctx, field)
			case "optimalSoilHumidity":
				return ec.fieldContext_PlantType_optimalSoilHumidity(ctx, field)
			case "optimalLightLevel":
				return ec.fieldContext_PlantType_optimalLightLevel(ctx, field)
			case "image":
				return ec.fieldContext_PlantType_image(ctx, field)
			case "plants":
				return ec.fieldContext_PlantType_plants(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlantType", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createPlantType_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePlantType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updatePlantType,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdatePlantType(ctx, fc.Args["id"].(uuid.UUID), fc.Args["input"].(CreatePlantTypeInput))
		},
		nil,
		ec.marshalNPlantType2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlantType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updatePlantType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlantType_id(ctx, field)
			case "name":
				return ec.fieldContext_PlantType_name(ctx, field)
			case "description":
				return ec.fieldContext_PlantType_description(ctx, field)
			case "optimalTemperature":
				return ec.fieldContext_PlantType_optimalTemperature(ctx, field)
			case "optimalHumidity":
				return ec.fieldContext_PlantType_optimalHumidity(ctx, field)
			case "optimalSoilHumidity":
				return ec.fieldContext_PlantType_optimalSoilHumidity(ctx, field)
			case "optimalLightLevel":
				return ec.fieldContext_PlantType_optimalLightLevel(ctx, field)
			case "image":
				return ec.fieldContext_PlantType_image(ctx, field)
			case "plants":
				return ec.fieldContext_PlantType_plants(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlantType", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePlantType_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deletePlantType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deletePlantType,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeletePlantType(ctx, fc.Args["id"].(uuid.UUID))
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_deletePlantType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deletePlantType_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUserProfile(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateUserProfile,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateUserProfile(ctx, fc.Args["id"].(uuid.UUID), fc.Args["firstName"].(*string), fc.Args["lastName"].(*string), fc.Args["profilePhoto"].(*graphql.Upload))
		},
		nil,
		ec.marshalNUser2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUser,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateUserProfile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "permissions":
				return ec.fieldContext_User_permissions(ctx, field)
			case "isActive":
				return ec.fieldContext_User_isActive(ctx, field)
			case "deviceAssociations":
				return ec.fieldContext_User_deviceAssociations(ctx, field)
			case "ownedPlants":
				return ec.fieldContext_User_ownedPlants(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastLogin":
				return ec.fieldContext_User_lastLogin(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUserProfile_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deactivateUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deactivateUser,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeactivateUser(ctx, fc.Args["id"].(uuid.UUID))
		},
		nil,
		ec.marshalNUser2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUser,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_deactivateUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "permissions":
				return ec.fieldContext_User_permissions(ctx, field)
			case "isActive":
				return ec.fieldContext_User_isActive(ctx, field)
			case "deviceAssociations":
				return ec.fieldContext_User_deviceAssociations(ctx, field)
			case "ownedPlants":
				return ec.fieldContext_User_ownedPlants(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastLogin":
				return ec.fieldContext_User_lastLogin(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deactivateUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_activateUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_activateUser,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().ActivateUser(ctx, fc.Args["id"].(uuid.UUID))
		},
		nil,
		ec.marshalNUser2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUser,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_activateUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "permissions":
				return ec.fieldContext_User_permissions(ctx, field)
			case "isActive":
				return ec.fieldContext_User_isActive(ctx, field)
			case "deviceAssociations":
				return ec.fieldContext_User_deviceAssociations(ctx, field)
			case "ownedPlants":
				return ec.fieldContext_User_ownedPlants(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastLogin":
				return ec.fieldContext_User_lastLogin(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_activateUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_changePassword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_changePassword,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().ChangePassword(ctx, fc.Args["currentPassword"].(string), fc.Args["newPassword"].(string))
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_changePassword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_changePassword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_terminateSession(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_terminateSession,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().TerminateSession(ctx, fc.Args["sessionId"].(string))
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_terminateSession(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_terminateSession_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_terminateAllSessions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_terminateAllSessions,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().TerminateAllSessions(ctx, fc.Args["userId"].(uuid.UUID))
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_terminateAllSessions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_terminateAllSessions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Notification_id(ctx context.Context, field graphql.CollectedField, obj *domain.Notification) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Notification_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Notification_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_userId(ctx context.Context, field graphql.CollectedField, obj *domain.Notification) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Notification_userId,
		func(ctx context.Context) (any, error) {
			return obj.UserID, nil
		},
		nil,
		ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Notification_userId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_user(ctx context.Context, field graphql.CollectedField, obj *domain.Notification) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Notification_user,
		func(ctx context.Context) (any, error) {
			return obj.User, nil
		},
		nil,
		ec.marshalNUser2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUser,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Notification_user(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "permissions":
				return ec.fieldContext_User_permissions(ctx, field)
			case "isActive":
				return ec.fieldContext_User_isActive(ctx, field)
			case "deviceAssociations":
				return ec.fieldContext_User_deviceAssociations(ctx, field)
			case "ownedPlants":
				return ec.fieldContext_User_ownedPlants(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastLogin":
				return ec.fieldContext_User_lastLogin(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_type(ctx context.Context, field graphql.CollectedField, obj *domain.Notification) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Notification_type,
		func(ctx context.Context) (any, error) {
			return obj.Type, nil
		},
		nil,
		ec.marshalNNotificationType2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐNotificationType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Notification_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NotificationType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_title(ctx context.Context, field graphql.CollectedField, obj *domain.Notification) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Notification_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Notification_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_message(ctx context.Context, field graphql.CollectedField, obj *domain.Notification) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Notification_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Notification_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_timestamp(ctx context.Context, field graphql.CollectedField, obj *domain.Notification) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Notification_timestamp,
		func(ctx context.Context) (any, error) {
			return obj.Timestamp, nil
		},
		nil,
		ec.marshalNDateTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Notification_timestamp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_isRead(ctx context.Context, field graphql.CollectedField, obj *domain.Notification) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Notification_isRead,
		func(ctx context.Context) (any, error) {
			return obj.IsRead, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Notification_isRead(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_plantId(ctx context.Context, field graphql.CollectedField, obj *domain.Notification) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Notification_plantId,
		func(ctx context.Context) (any, error) {
			return obj.PlantID, nil
		},
		nil,
		ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Notification_plantId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_plant(ctx context.Context, field graphql.CollectedField, obj *domain.Notification) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Notification_plant,
		func(ctx context.Context) (any, error) {
			return obj.Plant, nil
		},
		nil,
		ec.marshalOPlant2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlant,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Notification_plant(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Plant_id(ctx, field)
			case "name":
				return ec.fieldContext_Plant_name(ctx, field)
			case "type":
				return ec.fieldContext_Plant_type(ctx, field)
			case "sensor":
				return ec.fieldContext_Plant_sensor(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Plant_microcontroller(ctx, field)
			case "score":
				return ec.fieldContext_Plant_score(ctx, field)
			case "change":
				return ec.fieldContext_Plant_change(ctx, field)
			case "status":
				return ec.fieldContext_Plant_status(ctx, field)
			case "temperature":
				return ec.fieldContext_Plant_temperature(ctx, field)
			case "humidity":
				return ec.fieldContext_Plant_humidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_Plant_lightLevel(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_Plant_soilHumidity(ctx, field)
			case "location":
				return ec.fieldContext_Plant_location(ctx, field)
			case "locationName":
				return ec.fieldContext_Plant_locationName(ctx, field)
			case "ownerUserId":
				return ec.fieldContext_Plant_ownerUserId(ctx, field)
			case "owner":
				return ec.fieldContext_Plant_owner(ctx, field)
			case "lastUpdate":
				return ec.fieldContext_Plant_lastUpdate(ctx, field)
			case "image":
				return ec.fieldContext_Plant_image(ctx, field)
			case "imageUrl":
				return ec.fieldContext_Plant_imageUrl(ctx, field)
			case "alerts":
				return ec.fieldContext_Plant_alerts(ctx, field)
			case "thresholds":
				return ec.fieldContext_Plant_thresholds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Plant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Plant_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Plant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Permission_id(ctx context.Context, field graphql.CollectedField, obj *domain.Permission) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Permission_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Permission_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Permission_name(ctx context.Context, field graphql.CollectedField, obj *domain.Permission) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Permission_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Permission_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Permission_description(ctx context.Context, field graphql.CollectedField, obj *domain.Permission) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Permission_description,
		func(ctx context.Context) (any, error) {
			return obj.Description, nil
		},
		nil,
		ec.marshalNString2ᚖstring,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Permission_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Permission_resource(ctx context.Context, field graphql.CollectedField, obj *domain.Permission) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Permission_resource,
		func(ctx context.Context) (any, error) {
			return obj.Resource, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Permission_resource(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Permission_action(ctx context.Context, field graphql.CollectedField, obj *domain.Permission) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Permission_action,
		func(ctx context.Context) (any, error) {
			return obj.Action, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Permission_action(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plant_id(ctx context.Context, field graphql.CollectedField, obj *domain.Plant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Plant_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Plant_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plant_name(ctx context.Context, field graphql.CollectedField, obj *domain.Plant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Plant_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Plant_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plant_type(ctx context.Context, field graphql.CollectedField, obj *domain.Plant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Plant_type,
		func(ctx context.Context) (any, error) {
			return obj.Type, nil
		},
		nil,
		ec.marshalOPlantType2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlantType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Plant_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlantType_id(ctx, field)
			case "name":
				return ec.fieldContext_PlantType_name(ctx, field)
			case "description":
				return ec.fieldContext_PlantType_description(ctx, field)
			case "optimalTemperature":
				return ec.fieldContext_PlantType_optimalTemperature(ctx, field)
			case "optimalHumidity":
				return ec.fieldContext_PlantType_optimalHumidity(ctx, field)
			case "optimalSoilHumidity":
				return ec.fieldContext_PlantType_optimalSoilHumidity(ctx, field)
			case "optimalLightLevel":
				return ec.fieldContext_PlantType_optimalLightLevel(ctx, field)
			case "image":
				return ec.fieldContext_PlantType_image(ctx, field)
			case "plants":
				return ec.fieldContext_PlantType_plants(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlantType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plant_sensor(ctx context.Context, field graphql.CollectedField, obj *domain.Plant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Plant_sensor,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Plant().Sensor(ctx, obj)
		},
		nil,
		ec.marshalOSensor2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐSensor,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Plant_sensor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plant",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Sensor_id(ctx, field)
			case "plantId":
				return ec.fieldContext_Sensor_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Sensor_plant(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Sensor_microcontroller(ctx, field)
			case "status":
				return ec.fieldContext_Sensor_status(ctx, field)
			case "lastReading":
				return ec.fieldContext_Sensor_lastReading(ctx, field)
			case "location":
				return ec.fieldContext_Sensor_location(ctx, field)
			case "isActive":
				return ec.fieldContext_Sensor_isActive(ctx, field)
			case "batteryLevel":
				return ec.fieldContext_Sensor_batteryLevel(ctx, field)
			case "signalStrength":
				return ec.fieldContext_Sensor_signalStrength(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Sensor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plant_microcontroller(ctx context.Context, field graphql.CollectedField, obj *domain.Plant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Plant_microcontroller,
		func(ctx context.Context) (any, error) {
			return obj.Microcontroller, nil
		},
		nil,
		ec.marshalOMicrocontroller2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐMicrocontroller,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Plant_microcontroller(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Microcontroller_id(ctx, field)
			case "uniqueId":
				return ec.fieldContext_Microcontroller_uniqueId(ctx, field)
			case "type":
				return ec.fieldContext_Microcontroller_type(ctx, field)
			case "location":
				return ec.fieldContext_Microcontroller_location(ctx, field)
			case "enabled":
				return ec.fieldContext_Microcontroller_enabled(ctx, field)
			case "plantId":
				return ec.fieldContext_Microcontroller_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Microcontroller_plant(ctx, field)
			case "status":
				return ec.fieldContext_Microcontroller_status(ctx, field)
			case "lastReading":
				return ec.fieldContext_Microcontroller_lastReading(ctx, field)
			case "isActive":
				return ec.fieldContext_Microcontroller_isActive(ctx, field)
			case "batteryLevel":
				return ec.fieldContext_Microcontroller_batteryLevel(ctx, field)
			case "signalStrength":
				return ec.fieldContext_Microcontroller_signalStrength(ctx, field)
			case "userAssociations":
				return ec.fieldContext_Microcontroller_userAssociations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Microcontroller_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Microcontroller", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plant_score(ctx context.Context, field graphql.CollectedField, obj *domain.Plant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Plant_score,
		func(ctx context.Context) (any, error) {
			return obj.Score, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Plant_score(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plant_change(ctx context.Context, field graphql.CollectedField, obj *domain.Plant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Plant_change,
		func(ctx context.Context) (any, error) {
			return obj.Change, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Plant_change(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plant_status(ctx context.Context, field graphql.CollectedField, obj *domain.Plant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Plant_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNPlantStatus2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlantStatus,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Plant_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PlantStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plant_temperature(ctx context.Context, field graphql.CollectedField, obj *domain.Plant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Plant_temperature,
		func(ctx context.Context) (any, error) {
			return obj.Temperature, nil
		},
		nil,
		ec.marshalOFloat2ᚖfloat64,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Plant_temperature(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plant_humidity(ctx context.Context, field graphql.CollectedField, obj *domain.Plant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Plant_humidity,
		func(ctx context.Context) (any, error) {
			return obj.Humidity, nil
		},
		nil,
		ec.marshalOFloat2ᚖfloat64,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Plant_humidity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plant_lightLevel(ctx context.Context, field graphql.CollectedField, obj *domain.Plant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Plant_lightLevel,
		func(ctx context.Context) (any, error) {
			return obj.LightLevel, nil
		},
		nil,
		ec.marshalOFloat2ᚖfloat64,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Plant_lightLevel(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plant_soilHumidity(ctx context.Context, field graphql.CollectedField, obj *domain.Plant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Plant_soilHumidity,
		func(ctx context.Context) (any, error) {
			return obj.SoilHumidity, nil
		},
		nil,
		ec.marshalOFloat2ᚖfloat64,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Plant_soilHumidity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plant_location(ctx context.Context, field graphql.CollectedField, obj *domain.Plant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Plant_location,
		func(ctx context.Context) (any, error) {
			return obj.Location, nil
		},
		nil,
		ec.marshalOLocation2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐLocation,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Plant_location(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Location_id(ctx, field)
			case "name":
				return ec.fieldContext_Location_name(ctx, field)
			case "description":
				return ec.fieldContext_Location_description(ctx, field)
			case "coordinates":
				return ec.fieldContext_Location_coordinates(ctx, field)
			case "plants":
				return ec.fieldContext_Location_plants(ctx, field)
			case "sensors":
				return ec.fieldContext_Location_sensors(ctx, field)
			case "microcontrollers":
				return ec.fieldContext_Location_microcontrollers(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Location", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plant_locationName(ctx context.Context, field graphql.CollectedField, obj *domain.Plant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Plant_locationName,
		func(ctx context.Context) (any, error) {
			return obj.LocationName, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Plant_locationName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plant_ownerUserId(ctx context.Context, field graphql.CollectedField, obj *domain.Plant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Plant_ownerUserId,
		func(ctx context.Context) (any, error) {
			return obj.OwnerUserID, nil
		},
		nil,
		ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Plant_ownerUserId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plant_owner(ctx context.Context, field graphql.CollectedField, obj *domain.Plant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Plant_owner,
		func(ctx context.Context) (any, error) {
			return obj.Owner, nil
		},
		nil,
		ec.marshalOUser2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUser,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Plant_owner(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "permissions":
				return ec.fieldContext_User_permissions(ctx, field)
			case "isActive":
				return ec.fieldContext_User_isActive(ctx, field)
			case "deviceAssociations":
				return ec.fieldContext_User_deviceAssociations(ctx, field)
			case "ownedPlants":
				return ec.fieldContext_User_ownedPlants(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastLogin":
				return ec.fieldContext_User_lastLogin(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plant_lastUpdate(ctx context.Context, field graphql.CollectedField, obj *domain.Plant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Plant_lastUpdate,
		func(ctx context.Context) (any, error) {
			return obj.LastUpdate, nil
		},
		nil,
		ec.marshalNDateTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Plant_lastUpdate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plant_image(ctx context.Context, field graphql.CollectedField, obj *domain.Plant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Plant_image,
		func(ctx context.Context) (any, error) {
			return obj.Image, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Plant_image(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plant_imageUrl(ctx context.Context, field graphql.CollectedField, obj *domain.Plant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Plant_imageUrl,
		func(ctx context.Context) (any, error) {
			return obj.ImageURL, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Plant_imageUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plant_alerts(ctx context.Context, field graphql.CollectedField, obj *domain.Plant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Plant_alerts,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Plant().Alerts(ctx, obj)
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Plant_alerts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plant",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plant_thresholds(ctx context.Context, field graphql.CollectedField, obj *domain.Plant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Plant_thresholds,
		func(ctx context.Context) (any, error) {
			return obj.Thresholds, nil
		},
		nil,
		ec.marshalNThreshold2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐThresholdᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Plant_thresholds(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Threshold_id(ctx, field)
			case "plantId":
				return ec.fieldContext_Threshold_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Threshold_plant(ctx, field)
			case "sensorType":
				return ec.fieldContext_Threshold_sensorType(ctx, field)
			case "minValue":
				return ec.fieldContext_Threshold_minValue(ctx, field)
			case "maxValue":
				return ec.fieldContext_Threshold_maxValue(ctx, field)
			case "criticalMin":
				return ec.fieldContext_Threshold_criticalMin(ctx, field)
			case "criticalMax":
				return ec.fieldContext_Threshold_criticalMax(ctx, field)
			case "unit":
				return ec.fieldContext_Threshold_unit(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Threshold", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plant_createdAt(ctx context.Context, field graphql.CollectedField, obj *domain.Plant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Plant_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNDateTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Plant_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plant_updatedAt(ctx context.Context, field graphql.CollectedField, obj *domain.Plant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Plant_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalNDateTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Plant_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlantType_id(ctx context.Context, field graphql.CollectedField, obj *domain.PlantType) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PlantType_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PlantType_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlantType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlantType_name(ctx context.Context, field graphql.CollectedField, obj *domain.PlantType) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PlantType_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PlantType_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlantType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlantType_description(ctx context.Context, field graphql.CollectedField, obj *domain.PlantType) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PlantType_description,
		func(ctx context.Context) (any, error) {
			return obj.Description, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_PlantType_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlantType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlantType_optimalTemperature(ctx context.Context, field graphql.CollectedField, obj *domain.PlantType) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PlantType_optimalTemperature,
		func(ctx context.Context) (any, error) {
			return obj.OptimalTemperature, nil
		},
		nil,
		ec.marshalNRange2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐRange,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PlantType_optimalTemperature(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlantType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "min":
				return ec.fieldContext_Range_min(ctx, field)
			case "max":
				return ec.fieldContext_Range_max(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Range", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlantType_optimalHumidity(ctx context.Context, field graphql.CollectedField, obj *domain.PlantType) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PlantType_optimalHumidity,
		func(ctx context.Context) (any, error) {
			return obj.OptimalHumidity, nil
		},
		nil,
		ec.marshalNRange2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐRange,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PlantType_optimalHumidity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlantType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "min":
				return ec.fieldContext_Range_min(ctx, field)
			case "max":
				return ec.fieldContext_Range_max(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Range", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlantType_optimalSoilHumidity(ctx context.Context, field graphql.CollectedField, obj *domain.PlantType) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PlantType_optimalSoilHumidity,
		func(ctx context.Context) (any, error) {
			return obj.OptimalSoilHumidity, nil
		},
		nil,
		ec.marshalNRange2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐRange,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PlantType_optimalSoilHumidity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlantType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "min":
				return ec.fieldContext_Range_min(ctx, field)
			case "max":
				return ec.fieldContext_Range_max(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Range", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlantType_optimalLightLevel(ctx context.Context, field graphql.CollectedField, obj *domain.PlantType) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PlantType_optimalLightLevel,
		func(ctx context.Context) (any, error) {
			return obj.OptimalLightLevel, nil
		},
		nil,
		ec.marshalNRange2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐRange,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PlantType_optimalLightLevel(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlantType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "min":
				return ec.fieldContext_Range_min(ctx, field)
			case "max":
				return ec.fieldContext_Range_max(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Range", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlantType_image(ctx context.Context, field graphql.CollectedField, obj *domain.PlantType) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PlantType_image,
		func(ctx context.Context) (any, error) {
			return obj.Image, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_PlantType_image(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlantType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlantType_plants(ctx context.Context, field graphql.CollectedField, obj *domain.PlantType) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PlantType_plants,
		func(ctx context.Context) (any, error) {
			return obj.Plants, nil
		},
		nil,
		ec.marshalNPlant2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlantᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PlantType_plants(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlantType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Plant_id(ctx, field)
			case "name":
				return ec.fieldContext_Plant_name(ctx, field)
			case "type":
				return ec.fieldContext_Plant_type(ctx, field)
			case "sensor":
				return ec.fieldContext_Plant_sensor(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Plant_microcontroller(ctx, field)
			case "score":
				return ec.fieldContext_Plant_score(ctx, field)
			case "change":
				return ec.fieldContext_Plant_change(ctx, field)
			case "status":
				return ec.fieldContext_Plant_status(ctx, field)
			case "temperature":
				return ec.fieldContext_Plant_temperature(ctx, field)
			case "humidity":
				return ec.fieldContext_Plant_humidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_Plant_lightLevel(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_Plant_soilHumidity(ctx, field)
			case "location":
				return ec.fieldContext_Plant_location(ctx, field)
			case "locationName":
				return ec.fieldContext_Plant_locationName(ctx, field)
			case "ownerUserId":
				return ec.fieldContext_Plant_ownerUserId(ctx, field)
			case "owner":
				return ec.fieldContext_Plant_owner(ctx, field)
			case "lastUpdate":
				return ec.fieldContext_Plant_lastUpdate(ctx, field)
			case "image":
				return ec.fieldContext_Plant_image(ctx, field)
			case "imageUrl":
				return ec.fieldContext_Plant_imageUrl(ctx, field)
			case "alerts":
				return ec.fieldContext_Plant_alerts(ctx, field)
			case "thresholds":
				return ec.fieldContext_Plant_thresholds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Plant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Plant_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Plant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_health(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_health,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().Health(ctx)
		},
		nil,
		ec.marshalNHealthStatus2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐHealthStatus,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_health(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_HealthStatus_status(ctx, field)
			case "service":
				return ec.fieldContext_HealthStatus_service(ctx, field)
			case "timestamp":
				return ec.fieldContext_HealthStatus_timestamp(ctx, field)
			case "details":
				return ec.fieldContext_HealthStatus_details(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HealthStatus", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAllPlants(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getAllPlants,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().GetAllPlants(ctx)
		},
		nil,
		ec.marshalNPlant2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlantᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getAllPlants(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Plant_id(ctx, field)
			case "name":
				return ec.fieldContext_Plant_name(ctx, field)
			case "type":
				return ec.fieldContext_Plant_type(ctx, field)
			case "sensor":
				return ec.fieldContext_Plant_sensor(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Plant_microcontroller(ctx, field)
			case "score":
				return ec.fieldContext_Plant_score(ctx, field)
			case "change":
				return ec.fieldContext_Plant_change(ctx, field)
			case "status":
				return ec.fieldContext_Plant_status(ctx, field)
			case "temperature":
				return ec.fieldContext_Plant_temperature(ctx, field)
			case "humidity":
				return ec.fieldContext_Plant_humidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_Plant_lightLevel(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_Plant_soilHumidity(ctx, field)
			case "location":
				return ec.fieldContext_Plant_location(ctx, field)
			case "locationName":
				return ec.fieldContext_Plant_locationName(ctx, field)
			case "ownerUserId":
				return ec.fieldContext_Plant_ownerUserId(ctx, field)
			case "owner":
				return ec.fieldContext_Plant_owner(ctx, field)
			case "lastUpdate":
				return ec.fieldContext_Plant_lastUpdate(ctx, field)
			case "image":
				return ec.fieldContext_Plant_image(ctx, field)
			case "imageUrl":
				return ec.fieldContext_Plant_imageUrl(ctx, field)
			case "alerts":
				return ec.fieldContext_Plant_alerts(ctx, field)
			case "thresholds":
				return ec.fieldContext_Plant_thresholds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Plant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Plant_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Plant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPlantById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getPlantById,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetPlantByID(ctx, fc.Args["id"].(uuid.UUID))
		},
		nil,
		ec.marshalOPlant2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlant,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_getPlantById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Plant_id(ctx, field)
			case "name":
				return ec.fieldContext_Plant_name(ctx, field)
			case "type":
				return ec.fieldContext_Plant_type(ctx, field)
			case "sensor":
				return ec.fieldContext_Plant_sensor(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Plant_microcontroller(ctx, field)
			case "score":
				return ec.fieldContext_Plant_score(ctx, field)
			case "change":
				return ec.fieldContext_Plant_change(ctx, field)
			case "status":
				return ec.fieldContext_Plant_status(ctx, field)
			case "temperature":
				return ec.fieldContext_Plant_temperature(ctx, field)
			case "humidity":
				return ec.fieldContext_Plant_humidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_Plant_lightLevel(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_Plant_soilHumidity(ctx, field)
			case "location":
				return ec.fieldContext_Plant_location(ctx, field)
			case "locationName":
				return ec.fieldContext_Plant_locationName(ctx, field)
			case "ownerUserId":
				return ec.fieldContext_Plant_ownerUserId(ctx, field)
			case "owner":
				return ec.fieldContext_Plant_owner(ctx, field)
			case "lastUpdate":
				return ec.fieldContext_Plant_lastUpdate(ctx, field)
			case "image":
				return ec.fieldContext_Plant_image(ctx, field)
			case "imageUrl":
				return ec.fieldContext_Plant_imageUrl(ctx, field)
			case "alerts":
				return ec.fieldContext_Plant_alerts(ctx, field)
			case "thresholds":
				return ec.fieldContext_Plant_thresholds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Plant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Plant_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Plant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getPlantById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPlantsByStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getPlantsByStatus,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetPlantsByStatus(ctx, fc.Args["status"].(domain.PlantStatus))
		},
		nil,
		ec.marshalNPlant2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlantᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getPlantsByStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Plant_id(ctx, field)
			case "name":
				return ec.fieldContext_Plant_name(ctx, field)
			case "type":
				return ec.fieldContext_Plant_type(ctx, field)
			case "sensor":
				return ec.fieldContext_Plant_sensor(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Plant_microcontroller(ctx, field)
			case "score":
				return ec.fieldContext_Plant_score(ctx, field)
			case "change":
				return ec.fieldContext_Plant_change(ctx, field)
			case "status":
				return ec.fieldContext_Plant_status(ctx, field)
			case "temperature":
				return ec.fieldContext_Plant_temperature(ctx, field)
			case "humidity":
				return ec.fieldContext_Plant_humidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_Plant_lightLevel(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_Plant_soilHumidity(ctx, field)
			case "location":
				return ec.fieldContext_Plant_location(ctx, field)
			case "locationName":
				return ec.fieldContext_Plant_locationName(ctx, field)
			case "ownerUserId":
				return ec.fieldContext_Plant_ownerUserId(ctx, field)
			case "owner":
				return ec.fieldContext_Plant_owner(ctx, field)
			case "lastUpdate":
				return ec.fieldContext_Plant_lastUpdate(ctx, field)
			case "image":
				return ec.fieldContext_Plant_image(ctx, field)
			case "imageUrl":
				return ec.fieldContext_Plant_imageUrl(ctx, field)
			case "alerts":
				return ec.fieldContext_Plant_alerts(ctx, field)
			case "thresholds":
				return ec.fieldContext_Plant_thresholds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Plant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Plant_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Plant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getPlantsByStatus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPlantsByLocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getPlantsByLocation,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetPlantsByLocation(ctx, fc.Args["locationId"].(uuid.UUID))
		},
		nil,
		ec.marshalNPlant2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlantᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getPlantsByLocation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Plant_id(ctx, field)
			case "name":
				return ec.fieldContext_Plant_name(ctx, field)
			case "type":
				return ec.fieldContext_Plant_type(ctx, field)
			case "sensor":
				return ec.fieldContext_Plant_sensor(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Plant_microcontroller(ctx, field)
			case "score":
				return ec.fieldContext_Plant_score(ctx, field)
			case "change":
				return ec.fieldContext_Plant_change(ctx, field)
			case "status":
				return ec.fieldContext_Plant_status(ctx, field)
			case "temperature":
				return ec.fieldContext_Plant_temperature(ctx, field)
			case "humidity":
				return ec.fieldContext_Plant_humidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_Plant_lightLevel(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_Plant_soilHumidity(ctx, field)
			case "location":
				return ec.fieldContext_Plant_location(ctx, field)
			case "locationName":
				return ec.fieldContext_Plant_locationName(ctx, field)
			case "ownerUserId":
				return ec.fieldContext_Plant_ownerUserId(ctx, field)
			case "owner":
				return ec.fieldContext_Plant_owner(ctx, field)
			case "lastUpdate":
				return ec.fieldContext_Plant_lastUpdate(ctx, field)
			case "image":
				return ec.fieldContext_Plant_image(ctx, field)
			case "imageUrl":
				return ec.fieldContext_Plant_imageUrl(ctx, field)
			case "alerts":
				return ec.fieldContext_Plant_alerts(ctx, field)
			case "thresholds":
				return ec.fieldContext_Plant_thresholds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Plant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Plant_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Plant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getPlantsByLocation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPlantsByLocationName(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getPlantsByLocationName,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetPlantsByLocationName(ctx, fc.Args["locationName"].(string))
		},
		nil,
		ec.marshalNPlant2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlantᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getPlantsByLocationName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Plant_id(ctx, field)
			case "name":
				return ec.fieldContext_Plant_name(ctx, field)
			case "type":
				return ec.fieldContext_Plant_type(ctx, field)
			case "sensor":
				return ec.fieldContext_Plant_sensor(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Plant_microcontroller(ctx, field)
			case "score":
				return ec.fieldContext_Plant_score(ctx, field)
			case "change":
				return ec.fieldContext_Plant_change(ctx, field)
			case "status":
				return ec.fieldContext_Plant_status(ctx, field)
			case "temperature":
				return ec.fieldContext_Plant_temperature(ctx, field)
			case "humidity":
				return ec.fieldContext_Plant_humidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_Plant_lightLevel(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_Plant_soilHumidity(ctx, field)
			case "location":
				return ec.fieldContext_Plant_location(ctx, field)
			case "locationName":
				return ec.fieldContext_Plant_locationName(ctx, field)
			case "ownerUserId":
				return ec.fieldContext_Plant_ownerUserId(ctx, field)
			case "owner":
				return ec.fieldContext_Plant_owner(ctx, field)
			case "lastUpdate":
				return ec.fieldContext_Plant_lastUpdate(ctx, field)
			case "image":
				return ec.fieldContext_Plant_image(ctx, field)
			case "imageUrl":
				return ec.fieldContext_Plant_imageUrl(ctx, field)
			case "alerts":
				return ec.fieldContext_Plant_alerts(ctx, field)
			case "thresholds":
				return ec.fieldContext_Plant_thresholds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Plant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Plant_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Plant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getPlantsByLocationName_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPlantsWithAlerts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getPlantsWithAlerts,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().GetPlantsWithAlerts(ctx)
		},
		nil,
		ec.marshalNPlant2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlantᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getPlantsWithAlerts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Plant_id(ctx, field)
			case "name":
				return ec.fieldContext_Plant_name(ctx, field)
			case "type":
				return ec.fieldContext_Plant_type(ctx, field)
			case "sensor":
				return ec.fieldContext_Plant_sensor(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Plant_microcontroller(ctx, field)
			case "score":
				return ec.fieldContext_Plant_score(ctx, field)
			case "change":
				return ec.fieldContext_Plant_change(ctx, field)
			case "status":
				return ec.fieldContext_Plant_status(ctx, field)
			case "temperature":
				return ec.fieldContext_Plant_temperature(ctx, field)
			case "humidity":
				return ec.fieldContext_Plant_humidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_Plant_lightLevel(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_Plant_soilHumidity(ctx, field)
			case "location":
				return ec.fieldContext_Plant_location(ctx, field)
			case "locationName":
				return ec.fieldContext_Plant_locationName(ctx, field)
			case "ownerUserId":
				return ec.fieldContext_Plant_ownerUserId(ctx, field)
			case "owner":
				return ec.fieldContext_Plant_owner(ctx, field)
			case "lastUpdate":
				return ec.fieldContext_Plant_lastUpdate(ctx, field)
			case "image":
				return ec.fieldContext_Plant_image(ctx, field)
			case "imageUrl":
				return ec.fieldContext_Plant_imageUrl(ctx, field)
			case "alerts":
				return ec.fieldContext_Plant_alerts(ctx, field)
			case "thresholds":
				return ec.fieldContext_Plant_thresholds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Plant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Plant_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Plant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPlantsByOwner(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getPlantsByOwner,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetPlantsByOwner(ctx, fc.Args["ownerId"].(uuid.UUID))
		},
		nil,
		ec.marshalNPlant2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlantᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getPlantsByOwner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Plant_id(ctx, field)
			case "name":
				return ec.fieldContext_Plant_name(ctx, field)
			case "type":
				return ec.fieldContext_Plant_type(ctx, field)
			case "sensor":
				return ec.fieldContext_Plant_sensor(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Plant_microcontroller(ctx, field)
			case "score":
				return ec.fieldContext_Plant_score(ctx, field)
			case "change":
				return ec.fieldContext_Plant_change(ctx, field)
			case "status":
				return ec.fieldContext_Plant_status(ctx, field)
			case "temperature":
				return ec.fieldContext_Plant_temperature(ctx, field)
			case "humidity":
				return ec.fieldContext_Plant_humidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_Plant_lightLevel(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_Plant_soilHumidity(ctx, field)
			case "location":
				return ec.fieldContext_Plant_location(ctx, field)
			case "locationName":
				return ec.fieldContext_Plant_locationName(ctx, field)
			case "ownerUserId":
				return ec.fieldContext_Plant_ownerUserId(ctx, field)
			case "owner":
				return ec.fieldContext_Plant_owner(ctx, field)
			case "lastUpdate":
				return ec.fieldContext_Plant_lastUpdate(ctx, field)
			case "image":
				return ec.fieldContext_Plant_image(ctx, field)
			case "imageUrl":
				return ec.fieldContext_Plant_imageUrl(ctx, field)
			case "alerts":
				return ec.fieldContext_Plant_alerts(ctx, field)
			case "thresholds":
				return ec.fieldContext_Plant_thresholds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Plant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Plant_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Plant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getPlantsByOwner_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserOwnedPlants(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getUserOwnedPlants,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().GetUserOwnedPlants(ctx)
		},
		nil,
		ec.marshalNPlant2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlantᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getUserOwnedPlants(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Plant_id(ctx, field)
			case "name":
				return ec.fieldContext_Plant_name(ctx, field)
			case "type":
				return ec.fieldContext_Plant_type(ctx, field)
			case "sensor":
				return ec.fieldContext_Plant_sensor(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Plant_microcontroller(ctx, field)
			case "score":
				return ec.fieldContext_Plant_score(ctx, field)
			case "change":
				return ec.fieldContext_Plant_change(ctx, field)
			case "status":
				return ec.fieldContext_Plant_status(ctx, field)
			case "temperature":
				return ec.fieldContext_Plant_temperature(ctx, field)
			case "humidity":
				return ec.fieldContext_Plant_humidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_Plant_lightLevel(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_Plant_soilHumidity(ctx, field)
			case "location":
				return ec.fieldContext_Plant_location(ctx, field)
			case "locationName":
				return ec.fieldContext_Plant_locationName(ctx, field)
			case "ownerUserId":
				return ec.fieldContext_Plant_ownerUserId(ctx, field)
			case "owner":
				return ec.fieldContext_Plant_owner(ctx, field)
			case "lastUpdate":
				return ec.fieldContext_Plant_lastUpdate(ctx, field)
			case "image":
				return ec.fieldContext_Plant_image(ctx, field)
			case "imageUrl":
				return ec.fieldContext_Plant_imageUrl(ctx, field)
			case "alerts":
				return ec.fieldContext_Plant_alerts(ctx, field)
			case "thresholds":
				return ec.fieldContext_Plant_thresholds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Plant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Plant_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Plant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAllMicrocontrollers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getAllMicrocontrollers,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().GetAllMicrocontrollers(ctx)
		},
		nil,
		ec.marshalNMicrocontroller2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐMicrocontrollerᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getAllMicrocontrollers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Microcontroller_id(ctx, field)
			case "uniqueId":
				return ec.fieldContext_Microcontroller_uniqueId(ctx, field)
			case "type":
				return ec.fieldContext_Microcontroller_type(ctx, field)
			case "location":
				return ec.fieldContext_Microcontroller_location(ctx, field)
			case "enabled":
				return ec.fieldContext_Microcontroller_enabled(ctx, field)
			case "plantId":
				return ec.fieldContext_Microcontroller_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Microcontroller_plant(ctx, field)
			case "status":
				return ec.fieldContext_Microcontroller_status(ctx, field)
			case "lastReading":
				return ec.fieldContext_Microcontroller_lastReading(ctx, field)
			case "isActive":
				return ec.fieldContext_Microcontroller_isActive(ctx, field)
			case "batteryLevel":
				return ec.fieldContext_Microcontroller_batteryLevel(ctx, field)
			case "signalStrength":
				return ec.fieldContext_Microcontroller_signalStrength(ctx, field)
			case "userAssociations":
				return ec.fieldContext_Microcontroller_userAssociations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Microcontroller_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Microcontroller", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getMicrocontrollerById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getMicrocontrollerById,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetMicrocontrollerByID(ctx, fc.Args["id"].(uuid.UUID))
		},
		nil,
		ec.marshalOMicrocontroller2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐMicrocontroller,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_getMicrocontrollerById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Microcontroller_id(ctx, field)
			case "uniqueId":
				return ec.fieldContext_Microcontroller_uniqueId(ctx, field)
			case "type":
				return ec.fieldContext_Microcontroller_type(ctx, field)
			case "location":
				return ec.fieldContext_Microcontroller_location(ctx, field)
			case "enabled":
				return ec.fieldContext_Microcontroller_enabled(ctx, field)
			case "plantId":
				return ec.fieldContext_Microcontroller_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Microcontroller_plant(ctx, field)
			case "status":
				return ec.fieldContext_Microcontroller_status(ctx, field)
			case "lastReading":
				return ec.fieldContext_Microcontroller_lastReading(ctx, field)
			case "isActive":
				return ec.fieldContext_Microcontroller_isActive(ctx, field)
			case "batteryLevel":
				return ec.fieldContext_Microcontroller_batteryLevel(ctx, field)
			case "signalStrength":
				return ec.fieldContext_Microcontroller_signalStrength(ctx, field)
			case "userAssociations":
				return ec.fieldContext_Microcontroller_userAssociations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Microcontroller_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Microcontroller", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getMicrocontrollerById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getMicrocontrollerByUniqueId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getMicrocontrollerByUniqueId,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetMicrocontrollerByUniqueID(ctx, fc.Args["uniqueId"].(string))
		},
		nil,
		ec.marshalOMicrocontroller2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐMicrocontroller,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_getMicrocontrollerByUniqueId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Microcontroller_id(ctx, field)
			case "uniqueId":
				return ec.fieldContext_Microcontroller_uniqueId(ctx, field)
			case "type":
				return ec.fieldContext_Microcontroller_type(ctx, field)
			case "location":
				return ec.fieldContext_Microcontroller_location(ctx, field)
			case "enabled":
				return ec.fieldContext_Microcontroller_enabled(ctx, field)
			case "plantId":
				return ec.fieldContext_Microcontroller_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Microcontroller_plant(ctx, field)
			case "status":
				return ec.fieldContext_Microcontroller_status(ctx, field)
			case "lastReading":
				return ec.fieldContext_Microcontroller_lastReading(ctx, field)
			case "isActive":
				return ec.fieldContext_Microcontroller_isActive(ctx, field)
			case "batteryLevel":
				return ec.fieldContext_Microcontroller_batteryLevel(ctx, field)
			case "signalStrength":
				return ec.fieldContext_Microcontroller_signalStrength(ctx, field)
			case "userAssociations":
				return ec.fieldContext_Microcontroller_userAssociations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Microcontroller_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Microcontroller", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getMicrocontrollerByUniqueId_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getActiveMicrocontrollers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getActiveMicrocontrollers,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().GetActiveMicrocontrollers(ctx)
		},
		nil,
		ec.marshalNMicrocontroller2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐMicrocontrollerᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getActiveMicrocontrollers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Microcontroller_id(ctx, field)
			case "uniqueId":
				return ec.fieldContext_Microcontroller_uniqueId(ctx, field)
			case "type":
				return ec.fieldContext_Microcontroller_type(ctx, field)
			case "location":
				return ec.fieldContext_Microcontroller_location(ctx, field)
			case "enabled":
				return ec.fieldContext_Microcontroller_enabled(ctx, field)
			case "plantId":
				return ec.fieldContext_Microcontroller_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Microcontroller_plant(ctx, field)
			case "status":
				return ec.fieldContext_Microcontroller_status(ctx, field)
			case "lastReading":
				return ec.fieldContext_Microcontroller_lastReading(ctx, field)
			case "isActive":
				return ec.fieldContext_Microcontroller_isActive(ctx, field)
			case "batteryLevel":
				return ec.fieldContext_Microcontroller_batteryLevel(ctx, field)
			case "signalStrength":
				return ec.fieldContext_Microcontroller_signalStrength(ctx, field)
			case "userAssociations":
				return ec.fieldContext_Microcontroller_userAssociations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Microcontroller_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Microcontroller", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getEnabledMicrocontrollers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getEnabledMicrocontrollers,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().GetEnabledMicrocontrollers(ctx)
		},
		nil,
		ec.marshalNMicrocontroller2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐMicrocontrollerᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getEnabledMicrocontrollers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Microcontroller_id(ctx, field)
			case "uniqueId":
				return ec.fieldContext_Microcontroller_uniqueId(ctx, field)
			case "type":
				return ec.fieldContext_Microcontroller_type(ctx, field)
			case "location":
				return ec.fieldContext_Microcontroller_location(ctx, field)
			case "enabled":
				return ec.fieldContext_Microcontroller_enabled(ctx, field)
			case "plantId":
				return ec.fieldContext_Microcontroller_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Microcontroller_plant(ctx, field)
			case "status":
				return ec.fieldContext_Microcontroller_status(ctx, field)
			case "lastReading":
				return ec.fieldContext_Microcontroller_lastReading(ctx, field)
			case "isActive":
				return ec.fieldContext_Microcontroller_isActive(ctx, field)
			case "batteryLevel":
				return ec.fieldContext_Microcontroller_batteryLevel(ctx, field)
			case "signalStrength":
				return ec.fieldContext_Microcontroller_signalStrength(ctx, field)
			case "userAssociations":
				return ec.fieldContext_Microcontroller_userAssociations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Microcontroller_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Microcontroller", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getMicrocontrollersByLocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getMicrocontrollersByLocation,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetMicrocontrollersByLocation(ctx, fc.Args["location"].(string))
		},
		nil,
		ec.marshalNMicrocontroller2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐMicrocontrollerᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getMicrocontrollersByLocation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Microcontroller_id(ctx, field)
			case "uniqueId":
				return ec.fieldContext_Microcontroller_uniqueId(ctx, field)
			case "type":
				return ec.fieldContext_Microcontroller_type(ctx, field)
			case "location":
				return ec.fieldContext_Microcontroller_location(ctx, field)
			case "enabled":
				return ec.fieldContext_Microcontroller_enabled(ctx, field)
			case "plantId":
				return ec.fieldContext_Microcontroller_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Microcontroller_plant(ctx, field)
			case "status":
				return ec.fieldContext_Microcontroller_status(ctx, field)
			case "lastReading":
				return ec.fieldContext_Microcontroller_lastReading(ctx, field)
			case "isActive":
				return ec.fieldContext_Microcontroller_isActive(ctx, field)
			case "batteryLevel":
				return ec.fieldContext_Microcontroller_batteryLevel(ctx, field)
			case "signalStrength":
				return ec.fieldContext_Microcontroller_signalStrength(ctx, field)
			case "userAssociations":
				return ec.fieldContext_Microcontroller_userAssociations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Microcontroller_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Microcontroller", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getMicrocontrollersByLocation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getMicrocontrollersByType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getMicrocontrollersByType,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetMicrocontrollersByType(ctx, fc.Args["type"].(string))
		},
		nil,
		ec.marshalNMicrocontroller2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐMicrocontrollerᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getMicrocontrollersByType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Microcontroller_id(ctx, field)
			case "uniqueId":
				return ec.fieldContext_Microcontroller_uniqueId(ctx, field)
			case "type":
				return ec.fieldContext_Microcontroller_type(ctx, field)
			case "location":
				return ec.fieldContext_Microcontroller_location(ctx, field)
			case "enabled":
				return ec.fieldContext_Microcontroller_enabled(ctx, field)
			case "plantId":
				return ec.fieldContext_Microcontroller_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Microcontroller_plant(ctx, field)
			case "status":
				return ec.fieldContext_Microcontroller_status(ctx, field)
			case "lastReading":
				return ec.fieldContext_Microcontroller_lastReading(ctx, field)
			case "isActive":
				return ec.fieldContext_Microcontroller_isActive(ctx, field)
			case "batteryLevel":
				return ec.fieldContext_Microcontroller_batteryLevel(ctx, field)
			case "signalStrength":
				return ec.fieldContext_Microcontroller_signalStrength(ctx, field)
			case "userAssociations":
				return ec.fieldContext_Microcontroller_userAssociations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Microcontroller_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Microcontroller", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getMicrocontrollersByType_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserDevices(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getUserDevices,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetUserDevices(ctx, fc.Args["filters"].(*DeviceFilterInput))
		},
		nil,
		ec.marshalNUserDeviceList2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUserDeviceList,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getUserDevices(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "devices":
				return ec.fieldContext_UserDeviceList_devices(ctx, field)
			case "totalCount":
				return ec.fieldContext_UserDeviceList_totalCount(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_UserDeviceList_hasNextPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserDeviceList", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserDevices_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserDeviceById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getUserDeviceById,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetUserDeviceByID(ctx, fc.Args["deviceId"].(uuid.UUID))
		},
		nil,
		ec.marshalOUserDevice2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUserDevice,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_getUserDeviceById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserDevice_id(ctx, field)
			case "uniqueId":
				return ec.fieldContext_UserDevice_uniqueId(ctx, field)
			case "type":
				return ec.fieldContext_UserDevice_type(ctx, field)
			case "location":
				return ec.fieldContext_UserDevice_location(ctx, field)
			case "enabled":
				return ec.fieldContext_UserDevice_enabled(ctx, field)
			case "role":
				return ec.fieldContext_UserDevice_role(ctx, field)
			case "plant":
				return ec.fieldContext_UserDevice_plant(ctx, field)
			case "microcontroller":
				return ec.fieldContext_UserDevice_microcontroller(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserDevice", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserDeviceById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserDeviceAssociations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getUserDeviceAssociations,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetUserDeviceAssociations(ctx, fc.Args["userId"].(uuid.UUID))
		},
		nil,
		ec.marshalNUserMicrocontrollerAssociation2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUserMicrocontrollerAssociationᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getUserDeviceAssociations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userId":
				return ec.fieldContext_UserMicrocontrollerAssociation_userId(ctx, field)
			case "user":
				return ec.fieldContext_UserMicrocontrollerAssociation_user(ctx, field)
			case "microcontrollerId":
				return ec.fieldContext_UserMicrocontrollerAssociation_microcontrollerId(ctx, field)
			case "microcontroller":
				return ec.fieldContext_UserMicrocontrollerAssociation_microcontroller(ctx, field)
			case "role":
				return ec.fieldContext_UserMicrocontrollerAssociation_role(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserMicrocontrollerAssociation_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserMicrocontrollerAssociation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserDeviceAssociations_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_canUserAccessDevice(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_canUserAccessDevice,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().CanUserAccessDevice(ctx, fc.Args["deviceId"].(uuid.UUID), fc.Args["requiredRole"].(*domain.DeviceRole))
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_canUserAccessDevice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_canUserAccessDevice_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAllSensors(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getAllSensors,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().GetAllSensors(ctx)
		},
		nil,
		ec.marshalNSensor2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐSensorᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getAllSensors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Sensor_id(ctx, field)
			case "plantId":
				return ec.fieldContext_Sensor_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Sensor_plant(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Sensor_microcontroller(ctx, field)
			case "status":
				return ec.fieldContext_Sensor_status(ctx, field)
			case "lastReading":
				return ec.fieldContext_Sensor_lastReading(ctx, field)
			case "location":
				return ec.fieldContext_Sensor_location(ctx, field)
			case "isActive":
				return ec.fieldContext_Sensor_isActive(ctx, field)
			case "batteryLevel":
				return ec.fieldContext_Sensor_batteryLevel(ctx, field)
			case "signalStrength":
				return ec.fieldContext_Sensor_signalStrength(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Sensor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getSensorById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getSensorById,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetSensorByID(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalOSensor2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐSensor,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_getSensorById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Sensor_id(ctx, field)
			case "plantId":
				return ec.fieldContext_Sensor_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Sensor_plant(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Sensor_microcontroller(ctx, field)
			case "status":
				return ec.fieldContext_Sensor_status(ctx, field)
			case "lastReading":
				return ec.fieldContext_Sensor_lastReading(ctx, field)
			case "location":
				return ec.fieldContext_Sensor_location(ctx, field)
			case "isActive":
				return ec.fieldContext_Sensor_isActive(ctx, field)
			case "batteryLevel":
				return ec.fieldContext_Sensor_batteryLevel(ctx, field)
			case "signalStrength":
				return ec.fieldContext_Sensor_signalStrength(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Sensor", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getSensorById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getActiveSensors(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getActiveSensors,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().GetActiveSensors(ctx)
		},
		nil,
		ec.marshalNSensor2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐSensorᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getActiveSensors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Sensor_id(ctx, field)
			case "plantId":
				return ec.fieldContext_Sensor_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Sensor_plant(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Sensor_microcontroller(ctx, field)
			case "status":
				return ec.fieldContext_Sensor_status(ctx, field)
			case "lastReading":
				return ec.fieldContext_Sensor_lastReading(ctx, field)
			case "location":
				return ec.fieldContext_Sensor_location(ctx, field)
			case "isActive":
				return ec.fieldContext_Sensor_isActive(ctx, field)
			case "batteryLevel":
				return ec.fieldContext_Sensor_batteryLevel(ctx, field)
			case "signalStrength":
				return ec.fieldContext_Sensor_signalStrength(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Sensor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getSensorsByLocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getSensorsByLocation,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetSensorsByLocation(ctx, fc.Args["locationId"].(uuid.UUID))
		},
		nil,
		ec.marshalNSensor2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐSensorᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getSensorsByLocation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Sensor_id(ctx, field)
			case "plantId":
				return ec.fieldContext_Sensor_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Sensor_plant(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Sensor_microcontroller(ctx, field)
			case "status":
				return ec.fieldContext_Sensor_status(ctx, field)
			case "lastReading":
				return ec.fieldContext_Sensor_lastReading(ctx, field)
			case "location":
				return ec.fieldContext_Sensor_location(ctx, field)
			case "isActive":
				return ec.fieldContext_Sensor_isActive(ctx, field)
			case "batteryLevel":
				return ec.fieldContext_Sensor_batteryLevel(ctx, field)
			case "signalStrength":
				return ec.fieldContext_Sensor_signalStrength(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Sensor", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getSensorsByLocation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getRealTimeData(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getRealTimeData,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetRealTimeData(ctx, fc.Args["plantId"].(uuid.UUID))
		},
		nil,
		ec.marshalORealTimeData2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐRealTimeData,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_getRealTimeData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "plantId":
				return ec.fieldContext_RealTimeData_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_RealTimeData_plant(ctx, field)
			case "sensorId":
				return ec.fieldContext_RealTimeData_sensorId(ctx, field)
			case "microcontrollerId":
				return ec.fieldContext_RealTimeData_microcontrollerId(ctx, field)
			case "microcontroller":
				return ec.fieldContext_RealTimeData_microcontroller(ctx, field)
			case "timestamp":
				return ec.fieldContext_RealTimeData_timestamp(ctx, field)
			case "temperature":
				return ec.fieldContext_RealTimeData_temperature(ctx, field)
			case "airHumidity":
				return ec.fieldContext_RealTimeData_airHumidity(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_RealTimeData_soilHumidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_RealTimeData_lightLevel(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RealTimeData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getRealTimeData_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getRealTimeDataBySensor(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getRealTimeDataBySensor,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetRealTimeDataBySensor(ctx, fc.Args["sensorId"].(string))
		},
		nil,
		ec.marshalORealTimeData2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐRealTimeData,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_getRealTimeDataBySensor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "plantId":
				return ec.fieldContext_RealTimeData_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_RealTimeData_plant(ctx, field)
			case "sensorId":
				return ec.fieldContext_RealTimeData_sensorId(ctx, field)
			case "microcontrollerId":
				return ec.fieldContext_RealTimeData_microcontrollerId(ctx, field)
			case "microcontroller":
				return ec.fieldContext_RealTimeData_microcontroller(ctx, field)
			case "timestamp":
				return ec.fieldContext_RealTimeData_timestamp(ctx, field)
			case "temperature":
				return ec.fieldContext_RealTimeData_temperature(ctx, field)
			case "airHumidity":
				return ec.fieldContext_RealTimeData_airHumidity(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_RealTimeData_soilHumidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_RealTimeData_lightLevel(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RealTimeData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getRealTimeDataBySensor_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getRealTimeDataByMicrocontroller(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getRealTimeDataByMicrocontroller,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetRealTimeDataByMicrocontroller(ctx, fc.Args["microcontrollerId"].(uuid.UUID))
		},
		nil,
		ec.marshalORealTimeData2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐRealTimeData,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_getRealTimeDataByMicrocontroller(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "plantId":
				return ec.fieldContext_RealTimeData_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_RealTimeData_plant(ctx, field)
			case "sensorId":
				return ec.fieldContext_RealTimeData_sensorId(ctx, field)
			case "microcontrollerId":
				return ec.fieldContext_RealTimeData_microcontrollerId(ctx, field)
			case "microcontroller":
				return ec.fieldContext_RealTimeData_microcontroller(ctx, field)
			case "timestamp":
				return ec.fieldContext_RealTimeData_timestamp(ctx, field)
			case "temperature":
				return ec.fieldContext_RealTimeData_temperature(ctx, field)
			case "airHumidity":
				return ec.fieldContext_RealTimeData_airHumidity(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_RealTimeData_soilHumidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_RealTimeData_lightLevel(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RealTimeData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getRealTimeDataByMicrocontroller_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getBulkRealTimeData(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getBulkRealTimeData,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetBulkRealTimeData(ctx, fc.Args["plantIds"].([]uuid.UUID))
		},
		nil,
		ec.marshalNRealTimeData2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐRealTimeDataᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getBulkRealTimeData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "plantId":
				return ec.fieldContext_RealTimeData_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_RealTimeData_plant(ctx, field)
			case "sensorId":
				return ec.fieldContext_RealTimeData_sensorId(ctx, field)
			case "microcontrollerId":
				return ec.fieldContext_RealTimeData_microcontrollerId(ctx, field)
			case "microcontroller":
				return ec.fieldContext_RealTimeData_microcontroller(ctx, field)
			case "timestamp":
				return ec.fieldContext_RealTimeData_timestamp(ctx, field)
			case "temperature":
				return ec.fieldContext_RealTimeData_temperature(ctx, field)
			case "airHumidity":
				return ec.fieldContext_RealTimeData_airHumidity(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_RealTimeData_soilHumidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_RealTimeData_lightLevel(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RealTimeData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getBulkRealTimeData_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getHistoricalData(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getHistoricalData,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetHistoricalData(ctx, fc.Args["plantId"].(uuid.UUID), fc.Args["period"].(domain.TimePeriod), fc.Args["startTime"].(*time.Time), fc.Args["endTime"].(*time.Time), fc.Args["limit"].(*int))
		},
		nil,
		ec.marshalNChartData2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐChartDataᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getHistoricalData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "plantId":
				return ec.fieldContext_ChartData_plantId(ctx, field)
			case "time":
				return ec.fieldContext_ChartData_time(ctx, field)
			case "temperature":
				return ec.fieldContext_ChartData_temperature(ctx, field)
			case "humidity":
				return ec.fieldContext_ChartData_humidity(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_ChartData_soilHumidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_ChartData_lightLevel(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChartData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getHistoricalData_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getHistoricalDataBySensor(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getHistoricalDataBySensor,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetHistoricalDataBySensor(ctx, fc.Args["sensorId"].(string), fc.Args["period"].(domain.TimePeriod), fc.Args["startTime"].(*time.Time), fc.Args["endTime"].(*time.Time), fc.Args["limit"].(*int))
		},
		nil,
		ec.marshalNChartData2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐChartDataᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getHistoricalDataBySensor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "plantId":
				return ec.fieldContext_ChartData_plantId(ctx, field)
			case "time":
				return ec.fieldContext_ChartData_time(ctx, field)
			case "temperature":
				return ec.fieldContext_ChartData_temperature(ctx, field)
			case "humidity":
				return ec.fieldContext_ChartData_humidity(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_ChartData_soilHumidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_ChartData_lightLevel(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChartData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getHistoricalDataBySensor_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getHistoricalDataByMicrocontroller(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getHistoricalDataByMicrocontroller,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetHistoricalDataByMicrocontroller(ctx, fc.Args["microcontrollerId"].(uuid.UUID), fc.Args["period"].(domain.TimePeriod), fc.Args["startTime"].(*time.Time), fc.Args["endTime"].(*time.Time), fc.Args["limit"].(*int))
		},
		nil,
		ec.marshalNChartData2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐChartDataᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getHistoricalDataByMicrocontroller(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "plantId":
				return ec.fieldContext_ChartData_plantId(ctx, field)
			case "time":
				return ec.fieldContext_ChartData_time(ctx, field)
			case "temperature":
				return ec.fieldContext_ChartData_temperature(ctx, field)
			case "humidity":
				return ec.fieldContext_ChartData_humidity(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_ChartData_soilHumidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_ChartData_lightLevel(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChartData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getHistoricalDataByMicrocontroller_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAllAlerts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getAllAlerts,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().GetAllAlerts(ctx)
		},
		nil,
		ec.marshalNAlert2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐAlertᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getAllAlerts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Alert_id(ctx, field)
			case "plantId":
				return ec.fieldContext_Alert_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Alert_plant(ctx, field)
			case "type":
				return ec.fieldContext_Alert_type(ctx, field)
			case "priority":
				return ec.fieldContext_Alert_priority(ctx, field)
			case "message":
				return ec.fieldContext_Alert_message(ctx, field)
			case "value":
				return ec.fieldContext_Alert_value(ctx, field)
			case "threshold":
				return ec.fieldContext_Alert_threshold(ctx, field)
			case "timestamp":
				return ec.fieldContext_Alert_timestamp(ctx, field)
			case "isRead":
				return ec.fieldContext_Alert_isRead(ctx, field)
			case "resolvedAt":
				return ec.fieldContext_Alert_resolvedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Alert", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAlertsByPlant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getAlertsByPlant,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetAlertsByPlant(ctx, fc.Args["plantId"].(uuid.UUID))
		},
		nil,
		ec.marshalNAlert2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐAlertᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getAlertsByPlant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Alert_id(ctx, field)
			case "plantId":
				return ec.fieldContext_Alert_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Alert_plant(ctx, field)
			case "type":
				return ec.fieldContext_Alert_type(ctx, field)
			case "priority":
				return ec.fieldContext_Alert_priority(ctx, field)
			case "message":
				return ec.fieldContext_Alert_message(ctx, field)
			case "value":
				return ec.fieldContext_Alert_value(ctx, field)
			case "threshold":
				return ec.fieldContext_Alert_threshold(ctx, field)
			case "timestamp":
				return ec.fieldContext_Alert_timestamp(ctx, field)
			case "isRead":
				return ec.fieldContext_Alert_isRead(ctx, field)
			case "resolvedAt":
				return ec.fieldContext_Alert_resolvedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Alert", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getAlertsByPlant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUnreadAlerts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getUnreadAlerts,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().GetUnreadAlerts(ctx)
		},
		nil,
		ec.marshalNAlert2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐAlertᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getUnreadAlerts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Alert_id(ctx, field)
			case "plantId":
				return ec.fieldContext_Alert_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Alert_plant(ctx, field)
			case "type":
				return ec.fieldContext_Alert_type(ctx, field)
			case "priority":
				return ec.fieldContext_Alert_priority(ctx, field)
			case "message":
				return ec.fieldContext_Alert_message(ctx, field)
			case "value":
				return ec.fieldContext_Alert_value(ctx, field)
			case "threshold":
				return ec.fieldContext_Alert_threshold(ctx, field)
			case "timestamp":
				return ec.fieldContext_Alert_timestamp(ctx, field)
			case "isRead":
				return ec.fieldContext_Alert_isRead(ctx, field)
			case "resolvedAt":
				return ec.fieldContext_Alert_resolvedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Alert", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAlertsByPriority(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getAlertsByPriority,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetAlertsByPriority(ctx, fc.Args["priority"].(domain.AlertPriority))
		},
		nil,
		ec.marshalNAlert2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐAlertᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getAlertsByPriority(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Alert_id(ctx, field)
			case "plantId":
				return ec.fieldContext_Alert_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Alert_plant(ctx, field)
			case "type":
				return ec.fieldContext_Alert_type(ctx, field)
			case "priority":
				return ec.fieldContext_Alert_priority(ctx, field)
			case "message":
				return ec.fieldContext_Alert_message(ctx, field)
			case "value":
				return ec.fieldContext_Alert_value(ctx, field)
			case "threshold":
				return ec.fieldContext_Alert_threshold(ctx, field)
			case "timestamp":
				return ec.fieldContext_Alert_timestamp(ctx, field)
			case "isRead":
				return ec.fieldContext_Alert_isRead(ctx, field)
			case "resolvedAt":
				return ec.fieldContext_Alert_resolvedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Alert", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getAlertsByPriority_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAlertsByType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getAlertsByType,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetAlertsByType(ctx, fc.Args["type"].(domain.AlertType))
		},
		nil,
		ec.marshalNAlert2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐAlertᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getAlertsByType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Alert_id(ctx, field)
			case "plantId":
				return ec.fieldContext_Alert_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Alert_plant(ctx, field)
			case "type":
				return ec.fieldContext_Alert_type(ctx, field)
			case "priority":
				return ec.fieldContext_Alert_priority(ctx, field)
			case "message":
				return ec.fieldContext_Alert_message(ctx, field)
			case "value":
				return ec.fieldContext_Alert_value(ctx, field)
			case "threshold":
				return ec.fieldContext_Alert_threshold(ctx, field)
			case "timestamp":
				return ec.fieldContext_Alert_timestamp(ctx, field)
			case "isRead":
				return ec.fieldContext_Alert_isRead(ctx, field)
			case "resolvedAt":
				return ec.fieldContext_Alert_resolvedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Alert", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getAlertsByType_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getCurrentUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getCurrentUser,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().GetCurrentUser(ctx)
		},
		nil,
		ec.marshalOUser2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUser,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_getCurrentUser(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "permissions":
				return ec.fieldContext_User_permissions(ctx, field)
			case "isActive":
				return ec.fieldContext_User_isActive(ctx, field)
			case "deviceAssociations":
				return ec.fieldContext_User_deviceAssociations(ctx, field)
			case "ownedPlants":
				return ec.fieldContext_User_ownedPlants(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastLogin":
				return ec.fieldContext_User_lastLogin(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getUserById,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetUserByID(ctx, fc.Args["id"].(uuid.UUID))
		},
		nil,
		ec.marshalOUser2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUser,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_getUserById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "permissions":
				return ec.fieldContext_User_permissions(ctx, field)
			case "isActive":
				return ec.fieldContext_User_isActive(ctx, field)
			case "deviceAssociations":
				return ec.fieldContext_User_deviceAssociations(ctx, field)
			case "ownedPlants":
				return ec.fieldContext_User_ownedPlants(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastLogin":
				return ec.fieldContext_User_lastLogin(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAllUsers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getAllUsers,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().GetAllUsers(ctx)
		},
		nil,
		ec.marshalNUser2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUserᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getAllUsers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "permissions":
				return ec.fieldContext_User_permissions(ctx, field)
			case "isActive":
				return ec.fieldContext_User_isActive(ctx, field)
			case "deviceAssociations":
				return ec.fieldContext_User_deviceAssociations(ctx, field)
			case "ownedPlants":
				return ec.fieldContext_User_ownedPlants(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastLogin":
				return ec.fieldContext_User_lastLogin(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserNotifications(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getUserNotifications,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetUserNotifications(ctx, fc.Args["userId"].(uuid.UUID))
		},
		nil,
		ec.marshalNNotification2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐNotificationᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getUserNotifications(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Notification_id(ctx, field)
			case "userId":
				return ec.fieldContext_Notification_userId(ctx, field)
			case "user":
				return ec.fieldContext_Notification_user(ctx, field)
			case "type":
				return ec.fieldContext_Notification_type(ctx, field)
			case "title":
				return ec.fieldContext_Notification_title(ctx, field)
			case "message":
				return ec.fieldContext_Notification_message(ctx, field)
			case "timestamp":
				return ec.fieldContext_Notification_timestamp(ctx, field)
			case "isRead":
				return ec.fieldContext_Notification_isRead(ctx, field)
			case "plantId":
				return ec.fieldContext_Notification_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Notification_plant(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Notification", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserNotifications_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUnreadNotifications(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getUnreadNotifications,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetUnreadNotifications(ctx, fc.Args["userId"].(uuid.UUID))
		},
		nil,
		ec.marshalNNotification2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐNotificationᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getUnreadNotifications(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Notification_id(ctx, field)
			case "userId":
				return ec.fieldContext_Notification_userId(ctx, field)
			case "user":
				return ec.fieldContext_Notification_user(ctx, field)
			case "type":
				return ec.fieldContext_Notification_type(ctx, field)
			case "title":
				return ec.fieldContext_Notification_title(ctx, field)
			case "message":
				return ec.fieldContext_Notification_message(ctx, field)
			case "timestamp":
				return ec.fieldContext_Notification_timestamp(ctx, field)
			case "isRead":
				return ec.fieldContext_Notification_isRead(ctx, field)
			case "plantId":
				return ec.fieldContext_Notification_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Notification_plant(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Notification", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUnreadNotifications_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAllLocations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getAllLocations,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().GetAllLocations(ctx)
		},
		nil,
		ec.marshalNLocation2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐLocationᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getAllLocations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Location_id(ctx, field)
			case "name":
				return ec.fieldContext_Location_name(ctx, field)
			case "description":
				return ec.fieldContext_Location_description(ctx, field)
			case "coordinates":
				return ec.fieldContext_Location_coordinates(ctx, field)
			case "plants":
				return ec.fieldContext_Location_plants(ctx, field)
			case "sensors":
				return ec.fieldContext_Location_sensors(ctx, field)
			case "microcontrollers":
				return ec.fieldContext_Location_microcontrollers(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Location", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getLocationById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getLocationById,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetLocationByID(ctx, fc.Args["id"].(uuid.UUID))
		},
		nil,
		ec.marshalOLocation2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐLocation,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_getLocationById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Location_id(ctx, field)
			case "name":
				return ec.fieldContext_Location_name(ctx, field)
			case "description":
				return ec.fieldContext_Location_description(ctx, field)
			case "coordinates":
				return ec.fieldContext_Location_coordinates(ctx, field)
			case "plants":
				return ec.fieldContext_Location_plants(ctx, field)
			case "sensors":
				return ec.fieldContext_Location_sensors(ctx, field)
			case "microcontrollers":
				return ec.fieldContext_Location_microcontrollers(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Location", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getLocationById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getLocationWithPlants(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getLocationWithPlants,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetLocationWithPlants(ctx, fc.Args["id"].(uuid.UUID))
		},
		nil,
		ec.marshalOLocation2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐLocation,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_getLocationWithPlants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Location_id(ctx, field)
			case "name":
				return ec.fieldContext_Location_name(ctx, field)
			case "description":
				return ec.fieldContext_Location_description(ctx, field)
			case "coordinates":
				return ec.fieldContext_Location_coordinates(ctx, field)
			case "plants":
				return ec.fieldContext_Location_plants(ctx, field)
			case "sensors":
				return ec.fieldContext_Location_sensors(ctx, field)
			case "microcontrollers":
				return ec.fieldContext_Location_microcontrollers(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Location", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getLocationWithPlants_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAllPlantTypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getAllPlantTypes,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().GetAllPlantTypes(ctx)
		},
		nil,
		ec.marshalNPlantType2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlantTypeᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getAllPlantTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlantType_id(ctx, field)
			case "name":
				return ec.fieldContext_PlantType_name(ctx, field)
			case "description":
				return ec.fieldContext_PlantType_description(ctx, field)
			case "optimalTemperature":
				return ec.fieldContext_PlantType_optimalTemperature(ctx, field)
			case "optimalHumidity":
				return ec.fieldContext_PlantType_optimalHumidity(ctx, field)
			case "optimalSoilHumidity":
				return ec.fieldContext_PlantType_optimalSoilHumidity(ctx, field)
			case "optimalLightLevel":
				return ec.fieldContext_PlantType_optimalLightLevel(ctx, field)
			case "image":
				return ec.fieldContext_PlantType_image(ctx, field)
			case "plants":
				return ec.fieldContext_PlantType_plants(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlantType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPlantTypeById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getPlantTypeById,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetPlantTypeByID(ctx, fc.Args["id"].(uuid.UUID))
		},
		nil,
		ec.marshalOPlantType2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlantType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_getPlantTypeById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlantType_id(ctx, field)
			case "name":
				return ec.fieldContext_PlantType_name(ctx, field)
			case "description":
				return ec.fieldContext_PlantType_description(ctx, field)
			case "optimalTemperature":
				return ec.fieldContext_PlantType_optimalTemperature(ctx, field)
			case "optimalHumidity":
				return ec.fieldContext_PlantType_optimalHumidity(ctx, field)
			case "optimalSoilHumidity":
				return ec.fieldContext_PlantType_optimalSoilHumidity(ctx, field)
			case "optimalLightLevel":
				return ec.fieldContext_PlantType_optimalLightLevel(ctx, field)
			case "image":
				return ec.fieldContext_PlantType_image(ctx, field)
			case "plants":
				return ec.fieldContext_PlantType_plants(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlantType", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getPlantTypeById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getThresholds(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getThresholds,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetThresholds(ctx, fc.Args["plantId"].(uuid.UUID))
		},
		nil,
		ec.marshalNThreshold2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐThresholdᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getThresholds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Threshold_id(ctx, field)
			case "plantId":
				return ec.fieldContext_Threshold_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Threshold_plant(ctx, field)
			case "sensorType":
				return ec.fieldContext_Threshold_sensorType(ctx, field)
			case "minValue":
				return ec.fieldContext_Threshold_minValue(ctx, field)
			case "maxValue":
				return ec.fieldContext_Threshold_maxValue(ctx, field)
			case "criticalMin":
				return ec.fieldContext_Threshold_criticalMin(ctx, field)
			case "criticalMax":
				return ec.fieldContext_Threshold_criticalMax(ctx, field)
			case "unit":
				return ec.fieldContext_Threshold_unit(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Threshold", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getThresholds_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getThresholdsByType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getThresholdsByType,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetThresholdsByType(ctx, fc.Args["plantId"].(uuid.UUID), fc.Args["sensorType"].(domain.SensorType))
		},
		nil,
		ec.marshalOThreshold2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐThreshold,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_getThresholdsByType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Threshold_id(ctx, field)
			case "plantId":
				return ec.fieldContext_Threshold_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Threshold_plant(ctx, field)
			case "sensorType":
				return ec.fieldContext_Threshold_sensorType(ctx, field)
			case "minValue":
				return ec.fieldContext_Threshold_minValue(ctx, field)
			case "maxValue":
				return ec.fieldContext_Threshold_maxValue(ctx, field)
			case "criticalMin":
				return ec.fieldContext_Threshold_criticalMin(ctx, field)
			case "criticalMax":
				return ec.fieldContext_Threshold_criticalMax(ctx, field)
			case "unit":
				return ec.fieldContext_Threshold_unit(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Threshold", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getThresholdsByType_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getGlobalStats(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getGlobalStats,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().GetGlobalStats(ctx)
		},
		nil,
		ec.marshalNGlobalStats2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐGlobalStats,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getGlobalStats(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalPlants":
				return ec.fieldContext_GlobalStats_totalPlants(ctx, field)
			case "healthyPlants":
				return ec.fieldContext_GlobalStats_healthyPlants(ctx, field)
			case "alertPlants":
				return ec.fieldContext_GlobalStats_alertPlants(ctx, field)
			case "criticalPlants":
				return ec.fieldContext_GlobalStats_criticalPlants(ctx, field)
			case "averageTemperature":
				return ec.fieldContext_GlobalStats_averageTemperature(ctx, field)
			case "averageHumidity":
				return ec.fieldContext_GlobalStats_averageHumidity(ctx, field)
			case "activeSensors":
				return ec.fieldContext_GlobalStats_activeSensors(ctx, field)
			case "activeMicrocontrollers":
				return ec.fieldContext_GlobalStats_activeMicrocontrollers(ctx, field)
			case "totalMicrocontrollers":
				return ec.fieldContext_GlobalStats_totalMicrocontrollers(ctx, field)
			case "enabledMicrocontrollers":
				return ec.fieldContext_GlobalStats_enabledMicrocontrollers(ctx, field)
			case "uptime":
				return ec.fieldContext_GlobalStats_uptime(ctx, field)
			case "lastUpdated":
				return ec.fieldContext_GlobalStats_lastUpdated(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GlobalStats", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPlantStats(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getPlantStats,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetPlantStats(ctx, fc.Args["plantId"].(uuid.UUID))
		},
		nil,
		ec.marshalOGlobalStats2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐGlobalStats,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_getPlantStats(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalPlants":
				return ec.fieldContext_GlobalStats_totalPlants(ctx, field)
			case "healthyPlants":
				return ec.fieldContext_GlobalStats_healthyPlants(ctx, field)
			case "alertPlants":
				return ec.fieldContext_GlobalStats_alertPlants(ctx, field)
			case "criticalPlants":
				return ec.fieldContext_GlobalStats_criticalPlants(ctx, field)
			case "averageTemperature":
				return ec.fieldContext_GlobalStats_averageTemperature(ctx, field)
			case "averageHumidity":
				return ec.fieldContext_GlobalStats_averageHumidity(ctx, field)
			case "activeSensors":
				return ec.fieldContext_GlobalStats_activeSensors(ctx, field)
			case "activeMicrocontrollers":
				return ec.fieldContext_GlobalStats_activeMicrocontrollers(ctx, field)
			case "totalMicrocontrollers":
				return ec.fieldContext_GlobalStats_totalMicrocontrollers(ctx, field)
			case "enabledMicrocontrollers":
				return ec.fieldContext_GlobalStats_enabledMicrocontrollers(ctx, field)
			case "uptime":
				return ec.fieldContext_GlobalStats_uptime(ctx, field)
			case "lastUpdated":
				return ec.fieldContext_GlobalStats_lastUpdated(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GlobalStats", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getPlantStats_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getLocationStats(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getLocationStats,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetLocationStats(ctx, fc.Args["locationId"].(uuid.UUID))
		},
		nil,
		ec.marshalOGlobalStats2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐGlobalStats,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_getLocationStats(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalPlants":
				return ec.fieldContext_GlobalStats_totalPlants(ctx, field)
			case "healthyPlants":
				return ec.fieldContext_GlobalStats_healthyPlants(ctx, field)
			case "alertPlants":
				return ec.fieldContext_GlobalStats_alertPlants(ctx, field)
			case "criticalPlants":
				return ec.fieldContext_GlobalStats_criticalPlants(ctx, field)
			case "averageTemperature":
				return ec.fieldContext_GlobalStats_averageTemperature(ctx, field)
			case "averageHumidity":
				return ec.fieldContext_GlobalStats_averageHumidity(ctx, field)
			case "activeSensors":
				return ec.fieldContext_GlobalStats_activeSensors(ctx, field)
			case "activeMicrocontrollers":
				return ec.fieldContext_GlobalStats_activeMicrocontrollers(ctx, field)
			case "totalMicrocontrollers":
				return ec.fieldContext_GlobalStats_totalMicrocontrollers(ctx, field)
			case "enabledMicrocontrollers":
				return ec.fieldContext_GlobalStats_enabledMicrocontrollers(ctx, field)
			case "uptime":
				return ec.fieldContext_GlobalStats_uptime(ctx, field)
			case "lastUpdated":
				return ec.fieldContext_GlobalStats_lastUpdated(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GlobalStats", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getLocationStats_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserDeviceStats(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getUserDeviceStats,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().GetUserDeviceStats(ctx)
		},
		nil,
		ec.marshalNGlobalStats2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐGlobalStats,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getUserDeviceStats(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalPlants":
				return ec.fieldContext_GlobalStats_totalPlants(ctx, field)
			case "healthyPlants":
				return ec.fieldContext_GlobalStats_healthyPlants(ctx, field)
			case "alertPlants":
				return ec.fieldContext_GlobalStats_alertPlants(ctx, field)
			case "criticalPlants":
				return ec.fieldContext_GlobalStats_criticalPlants(ctx, field)
			case "averageTemperature":
				return ec.fieldContext_GlobalStats_averageTemperature(ctx, field)
			case "averageHumidity":
				return ec.fieldContext_GlobalStats_averageHumidity(ctx, field)
			case "activeSensors":
				return ec.fieldContext_GlobalStats_activeSensors(ctx, field)
			case "activeMicrocontrollers":
				return ec.fieldContext_GlobalStats_activeMicrocontrollers(ctx, field)
			case "totalMicrocontrollers":
				return ec.fieldContext_GlobalStats_totalMicrocontrollers(ctx, field)
			case "enabledMicrocontrollers":
				return ec.fieldContext_GlobalStats_enabledMicrocontrollers(ctx, field)
			case "uptime":
				return ec.fieldContext_GlobalStats_uptime(ctx, field)
			case "lastUpdated":
				return ec.fieldContext_GlobalStats_lastUpdated(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GlobalStats", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getSingleMetricReport(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getSingleMetricReport,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetSingleMetricReport(ctx, fc.Args["controllerId"].(string), fc.Args["metric"].(string), fc.Args["filters"].(*AnalyticsFilterInput))
		},
		nil,
		ec.marshalOAnalyticsReport2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐAnalyticsReport,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_getSingleMetricReport(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "controllerId":
				return ec.fieldContext_AnalyticsReport_controllerId(ctx, field)
			case "microcontrollerId":
				return ec.fieldContext_AnalyticsReport_microcontrollerId(ctx, field)
			case "metrics":
				return ec.fieldContext_AnalyticsReport_metrics(ctx, field)
			case "generatedAt":
				return ec.fieldContext_AnalyticsReport_generatedAt(ctx, field)
			case "dataPointsCount":
				return ec.fieldContext_AnalyticsReport_dataPointsCount(ctx, field)
			case "filters":
				return ec.fieldContext_AnalyticsReport_filters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AnalyticsReport", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getSingleMetricReport_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getMultiMetricReport(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getMultiMetricReport,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetMultiMetricReport(ctx, fc.Args["input"].(MultiReportInput))
		},
		nil,
		ec.marshalNMultiReportResponse2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐMultiReportResponse,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getMultiMetricReport(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "reports":
				return ec.fieldContext_MultiReportResponse_reports(ctx, field)
			case "generatedAt":
				return ec.fieldContext_MultiReportResponse_generatedAt(ctx, field)
			case "totalControllers":
				return ec.fieldContext_MultiReportResponse_totalControllers(ctx, field)
			case "totalMetrics":
				return ec.fieldContext_MultiReportResponse_totalMetrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MultiReportResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getMultiMetricReport_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getTrendAnalysis(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getTrendAnalysis,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetTrendAnalysis(ctx, fc.Args["controllerId"].(string), fc.Args["metric"].(string), fc.Args["interval"].(string), fc.Args["filters"].(*AnalyticsFilterInput))
		},
		nil,
		ec.marshalOTrendAnalysis2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐTrendAnalysis,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_getTrendAnalysis(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metricName":
				return ec.fieldContext_TrendAnalysis_metricName(ctx, field)
			case "controllerId":
				return ec.fieldContext_TrendAnalysis_controllerId(ctx, field)
			case "microcontrollerId":
				return ec.fieldContext_TrendAnalysis_microcontrollerId(ctx, field)
			case "dataPoints":
				return ec.fieldContext_TrendAnalysis_dataPoints(ctx, field)
			case "interval":
				return ec.fieldContext_TrendAnalysis_interval(ctx, field)
			case "generatedAt":
				return ec.fieldContext_TrendAnalysis_generatedAt(ctx, field)
			case "filters":
				return ec.fieldContext_TrendAnalysis_filters(ctx, field)
			case "totalPoints":
				return ec.fieldContext_TrendAnalysis_totalPoints(ctx, field)
			case "averageValue":
				return ec.fieldContext_TrendAnalysis_averageValue(ctx, field)
			case "minValue":
				return ec.fieldContext_TrendAnalysis_minValue(ctx, field)
			case "maxValue":
				return ec.fieldContext_TrendAnalysis_maxValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrendAnalysis", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getTrendAnalysis_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getSupportedMetrics(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getSupportedMetrics,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().GetSupportedMetrics(ctx)
		},
		nil,
		ec.marshalNString2ᚕstringᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getSupportedMetrics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getActiveSessions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getActiveSessions,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetActiveSessions(ctx, fc.Args["userId"].(uuid.UUID))
		},
		nil,
		ec.marshalNSession2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐSessionᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getActiveSessions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userId":
				return ec.fieldContext_Session_userId(ctx, field)
			case "user":
				return ec.fieldContext_Session_user(ctx, field)
			case "token":
				return ec.fieldContext_Session_token(ctx, field)
			case "expiresAt":
				return ec.fieldContext_Session_expiresAt(ctx, field)
			case "deviceInfo":
				return ec.fieldContext_Session_deviceInfo(ctx, field)
			case "lastActivity":
				return ec.fieldContext_Session_lastActivity(ctx, field)
			case "isActive":
				return ec.fieldContext_Session_isActive(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Session", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getActiveSessions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query___type,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.introspectType(fc.Args["name"].(string))
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query___schema,
		func(ctx context.Context) (any, error) {
			return ec.introspectSchema()
		},
		nil,
		ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Range_min(ctx context.Context, field graphql.CollectedField, obj *domain.Range) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Range_min,
		func(ctx context.Context) (any, error) {
			return obj.Min, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Range_min(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Range",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Range_max(ctx context.Context, field graphql.CollectedField, obj *domain.Range) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Range_max,
		func(ctx context.Context) (any, error) {
			return obj.Max, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Range_max(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Range",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RealTimeData_plantId(ctx context.Context, field graphql.CollectedField, obj *domain.RealTimeData) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RealTimeData_plantId,
		func(ctx context.Context) (any, error) {
			return obj.PlantID, nil
		},
		nil,
		ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_RealTimeData_plantId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RealTimeData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RealTimeData_plant(ctx context.Context, field graphql.CollectedField, obj *domain.RealTimeData) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RealTimeData_plant,
		func(ctx context.Context) (any, error) {
			return obj.Plant, nil
		},
		nil,
		ec.marshalOPlant2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlant,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_RealTimeData_plant(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RealTimeData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Plant_id(ctx, field)
			case "name":
				return ec.fieldContext_Plant_name(ctx, field)
			case "type":
				return ec.fieldContext_Plant_type(ctx, field)
			case "sensor":
				return ec.fieldContext_Plant_sensor(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Plant_microcontroller(ctx, field)
			case "score":
				return ec.fieldContext_Plant_score(ctx, field)
			case "change":
				return ec.fieldContext_Plant_change(ctx, field)
			case "status":
				return ec.fieldContext_Plant_status(ctx, field)
			case "temperature":
				return ec.fieldContext_Plant_temperature(ctx, field)
			case "humidity":
				return ec.fieldContext_Plant_humidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_Plant_lightLevel(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_Plant_soilHumidity(ctx, field)
			case "location":
				return ec.fieldContext_Plant_location(ctx, field)
			case "locationName":
				return ec.fieldContext_Plant_locationName(ctx, field)
			case "ownerUserId":
				return ec.fieldContext_Plant_ownerUserId(ctx, field)
			case "owner":
				return ec.fieldContext_Plant_owner(ctx, field)
			case "lastUpdate":
				return ec.fieldContext_Plant_lastUpdate(ctx, field)
			case "image":
				return ec.fieldContext_Plant_image(ctx, field)
			case "imageUrl":
				return ec.fieldContext_Plant_imageUrl(ctx, field)
			case "alerts":
				return ec.fieldContext_Plant_alerts(ctx, field)
			case "thresholds":
				return ec.fieldContext_Plant_thresholds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Plant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Plant_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Plant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RealTimeData_sensorId(ctx context.Context, field graphql.CollectedField, obj *domain.RealTimeData) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RealTimeData_sensorId,
		func(ctx context.Context) (any, error) {
			return obj.SensorID, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RealTimeData_sensorId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RealTimeData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RealTimeData_microcontrollerId(ctx context.Context, field graphql.CollectedField, obj *domain.RealTimeData) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RealTimeData_microcontrollerId,
		func(ctx context.Context) (any, error) {
			return obj.MicrocontrollerID, nil
		},
		nil,
		ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_RealTimeData_microcontrollerId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RealTimeData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RealTimeData_microcontroller(ctx context.Context, field graphql.CollectedField, obj *domain.RealTimeData) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RealTimeData_microcontroller,
		func(ctx context.Context) (any, error) {
			return obj.Microcontroller, nil
		},
		nil,
		ec.marshalOMicrocontroller2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐMicrocontroller,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_RealTimeData_microcontroller(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RealTimeData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Microcontroller_id(ctx, field)
			case "uniqueId":
				return ec.fieldContext_Microcontroller_uniqueId(ctx, field)
			case "type":
				return ec.fieldContext_Microcontroller_type(ctx, field)
			case "location":
				return ec.fieldContext_Microcontroller_location(ctx, field)
			case "enabled":
				return ec.fieldContext_Microcontroller_enabled(ctx, field)
			case "plantId":
				return ec.fieldContext_Microcontroller_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Microcontroller_plant(ctx, field)
			case "status":
				return ec.fieldContext_Microcontroller_status(ctx, field)
			case "lastReading":
				return ec.fieldContext_Microcontroller_lastReading(ctx, field)
			case "isActive":
				return ec.fieldContext_Microcontroller_isActive(ctx, field)
			case "batteryLevel":
				return ec.fieldContext_Microcontroller_batteryLevel(ctx, field)
			case "signalStrength":
				return ec.fieldContext_Microcontroller_signalStrength(ctx, field)
			case "userAssociations":
				return ec.fieldContext_Microcontroller_userAssociations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Microcontroller_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Microcontroller", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RealTimeData_timestamp(ctx context.Context, field graphql.CollectedField, obj *domain.RealTimeData) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RealTimeData_timestamp,
		func(ctx context.Context) (any, error) {
			return obj.Timestamp, nil
		},
		nil,
		ec.marshalNDateTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RealTimeData_timestamp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RealTimeData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RealTimeData_temperature(ctx context.Context, field graphql.CollectedField, obj *domain.RealTimeData) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RealTimeData_temperature,
		func(ctx context.Context) (any, error) {
			return obj.Temperature, nil
		},
		nil,
		ec.marshalOFloat2ᚖfloat64,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_RealTimeData_temperature(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RealTimeData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RealTimeData_airHumidity(ctx context.Context, field graphql.CollectedField, obj *domain.RealTimeData) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RealTimeData_airHumidity,
		func(ctx context.Context) (any, error) {
			return obj.AirHumidity, nil
		},
		nil,
		ec.marshalOFloat2ᚖfloat64,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_RealTimeData_airHumidity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RealTimeData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RealTimeData_soilHumidity(ctx context.Context, field graphql.CollectedField, obj *domain.RealTimeData) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RealTimeData_soilHumidity,
		func(ctx context.Context) (any, error) {
			return obj.SoilHumidity, nil
		},
		nil,
		ec.marshalOFloat2ᚖfloat64,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_RealTimeData_soilHumidity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RealTimeData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RealTimeData_lightLevel(ctx context.Context, field graphql.CollectedField, obj *domain.RealTimeData) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RealTimeData_lightLevel,
		func(ctx context.Context) (any, error) {
			return obj.LightLevel, nil
		},
		nil,
		ec.marshalOFloat2ᚖfloat64,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_RealTimeData_lightLevel(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RealTimeData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Sensor_id(ctx context.Context, field graphql.CollectedField, obj *domain.Sensor) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Sensor_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Sensor_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Sensor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Sensor_plantId(ctx context.Context, field graphql.CollectedField, obj *domain.Sensor) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Sensor_plantId,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Sensor().PlantID(ctx, obj)
		},
		nil,
		ec.marshalOID2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Sensor_plantId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Sensor",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Sensor_plant(ctx context.Context, field graphql.CollectedField, obj *domain.Sensor) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Sensor_plant,
		func(ctx context.Context) (any, error) {
			return obj.Plant, nil
		},
		nil,
		ec.marshalOPlant2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlant,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Sensor_plant(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Sensor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Plant_id(ctx, field)
			case "name":
				return ec.fieldContext_Plant_name(ctx, field)
			case "type":
				return ec.fieldContext_Plant_type(ctx, field)
			case "sensor":
				return ec.fieldContext_Plant_sensor(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Plant_microcontroller(ctx, field)
			case "score":
				return ec.fieldContext_Plant_score(ctx, field)
			case "change":
				return ec.fieldContext_Plant_change(ctx, field)
			case "status":
				return ec.fieldContext_Plant_status(ctx, field)
			case "temperature":
				return ec.fieldContext_Plant_temperature(ctx, field)
			case "humidity":
				return ec.fieldContext_Plant_humidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_Plant_lightLevel(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_Plant_soilHumidity(ctx, field)
			case "location":
				return ec.fieldContext_Plant_location(ctx, field)
			case "locationName":
				return ec.fieldContext_Plant_locationName(ctx, field)
			case "ownerUserId":
				return ec.fieldContext_Plant_ownerUserId(ctx, field)
			case "owner":
				return ec.fieldContext_Plant_owner(ctx, field)
			case "lastUpdate":
				return ec.fieldContext_Plant_lastUpdate(ctx, field)
			case "image":
				return ec.fieldContext_Plant_image(ctx, field)
			case "imageUrl":
				return ec.fieldContext_Plant_imageUrl(ctx, field)
			case "alerts":
				return ec.fieldContext_Plant_alerts(ctx, field)
			case "thresholds":
				return ec.fieldContext_Plant_thresholds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Plant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Plant_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Plant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Sensor_microcontroller(ctx context.Context, field graphql.CollectedField, obj *domain.Sensor) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Sensor_microcontroller,
		func(ctx context.Context) (any, error) {
			return obj.Microcontroller, nil
		},
		nil,
		ec.marshalOMicrocontroller2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐMicrocontroller,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Sensor_microcontroller(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Sensor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Microcontroller_id(ctx, field)
			case "uniqueId":
				return ec.fieldContext_Microcontroller_uniqueId(ctx, field)
			case "type":
				return ec.fieldContext_Microcontroller_type(ctx, field)
			case "location":
				return ec.fieldContext_Microcontroller_location(ctx, field)
			case "enabled":
				return ec.fieldContext_Microcontroller_enabled(ctx, field)
			case "plantId":
				return ec.fieldContext_Microcontroller_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Microcontroller_plant(ctx, field)
			case "status":
				return ec.fieldContext_Microcontroller_status(ctx, field)
			case "lastReading":
				return ec.fieldContext_Microcontroller_lastReading(ctx, field)
			case "isActive":
				return ec.fieldContext_Microcontroller_isActive(ctx, field)
			case "batteryLevel":
				return ec.fieldContext_Microcontroller_batteryLevel(ctx, field)
			case "signalStrength":
				return ec.fieldContext_Microcontroller_signalStrength(ctx, field)
			case "userAssociations":
				return ec.fieldContext_Microcontroller_userAssociations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Microcontroller_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Microcontroller", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Sensor_status(ctx context.Context, field graphql.CollectedField, obj *domain.Sensor) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Sensor_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNSensorStatus2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐSensorStatus,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Sensor_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Sensor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SensorStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Sensor_lastReading(ctx context.Context, field graphql.CollectedField, obj *domain.Sensor) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Sensor_lastReading,
		func(ctx context.Context) (any, error) {
			return obj.LastReading, nil
		},
		nil,
		ec.marshalODateTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Sensor_lastReading(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Sensor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Sensor_location(ctx context.Context, field graphql.CollectedField, obj *domain.Sensor) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Sensor_location,
		func(ctx context.Context) (any, error) {
			return obj.Location, nil
		},
		nil,
		ec.marshalOLocation2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐLocation,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Sensor_location(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Sensor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Location_id(ctx, field)
			case "name":
				return ec.fieldContext_Location_name(ctx, field)
			case "description":
				return ec.fieldContext_Location_description(ctx, field)
			case "coordinates":
				return ec.fieldContext_Location_coordinates(ctx, field)
			case "plants":
				return ec.fieldContext_Location_plants(ctx, field)
			case "sensors":
				return ec.fieldContext_Location_sensors(ctx, field)
			case "microcontrollers":
				return ec.fieldContext_Location_microcontrollers(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Location", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Sensor_isActive(ctx context.Context, field graphql.CollectedField, obj *domain.Sensor) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Sensor_isActive,
		func(ctx context.Context) (any, error) {
			return obj.IsActive, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Sensor_isActive(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Sensor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Sensor_batteryLevel(ctx context.Context, field graphql.CollectedField, obj *domain.Sensor) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Sensor_batteryLevel,
		func(ctx context.Context) (any, error) {
			return obj.BatteryLevel, nil
		},
		nil,
		ec.marshalOFloat2ᚖfloat64,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Sensor_batteryLevel(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Sensor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Sensor_signalStrength(ctx context.Context, field graphql.CollectedField, obj *domain.Sensor) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Sensor_signalStrength,
		func(ctx context.Context) (any, error) {
			return obj.SignalStrength, nil
		},
		nil,
		ec.marshalOFloat2ᚖfloat64,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Sensor_signalStrength(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Sensor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Session_userId(ctx context.Context, field graphql.CollectedField, obj *domain.Session) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Session_userId,
		func(ctx context.Context) (any, error) {
			return obj.UserID, nil
		},
		nil,
		ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Session_userId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Session",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Session_user(ctx context.Context, field graphql.CollectedField, obj *domain.Session) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Session_user,
		func(ctx context.Context) (any, error) {
			return obj.User, nil
		},
		nil,
		ec.marshalNUser2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUser,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Session_user(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Session",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "permissions":
				return ec.fieldContext_User_permissions(ctx, field)
			case "isActive":
				return ec.fieldContext_User_isActive(ctx, field)
			case "deviceAssociations":
				return ec.fieldContext_User_deviceAssociations(ctx, field)
			case "ownedPlants":
				return ec.fieldContext_User_ownedPlants(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastLogin":
				return ec.fieldContext_User_lastLogin(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Session_token(ctx context.Context, field graphql.CollectedField, obj *domain.Session) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Session_token,
		func(ctx context.Context) (any, error) {
			return obj.Token, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Session_token(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Session",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Session_expiresAt(ctx context.Context, field graphql.CollectedField, obj *domain.Session) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Session_expiresAt,
		func(ctx context.Context) (any, error) {
			return obj.ExpiresAt, nil
		},
		nil,
		ec.marshalNDateTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Session_expiresAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Session",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Session_deviceInfo(ctx context.Context, field graphql.CollectedField, obj *domain.Session) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Session_deviceInfo,
		func(ctx context.Context) (any, error) {
			return obj.DeviceInfo, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Session_deviceInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Session",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Session_lastActivity(ctx context.Context, field graphql.CollectedField, obj *domain.Session) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Session_lastActivity,
		func(ctx context.Context) (any, error) {
			return obj.LastActivity, nil
		},
		nil,
		ec.marshalNDateTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Session_lastActivity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Session",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Session_isActive(ctx context.Context, field graphql.CollectedField, obj *domain.Session) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Session_isActive,
		func(ctx context.Context) (any, error) {
			return obj.IsActive, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Session_isActive(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Session",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_realTimeData(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	return graphql.ResolveFieldStream(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Subscription_realTimeData,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Subscription().RealTimeData(ctx, fc.Args["plantId"].(*uuid.UUID))
		},
		nil,
		ec.marshalNRealTimeData2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐRealTimeData,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Subscription_realTimeData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "plantId":
				return ec.fieldContext_RealTimeData_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_RealTimeData_plant(ctx, field)
			case "sensorId":
				return ec.fieldContext_RealTimeData_sensorId(ctx, field)
			case "microcontrollerId":
				return ec.fieldContext_RealTimeData_microcontrollerId(ctx, field)
			case "microcontroller":
				return ec.fieldContext_RealTimeData_microcontroller(ctx, field)
			case "timestamp":
				return ec.fieldContext_RealTimeData_timestamp(ctx, field)
			case "temperature":
				return ec.fieldContext_RealTimeData_temperature(ctx, field)
			case "airHumidity":
				return ec.fieldContext_RealTimeData_airHumidity(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_RealTimeData_soilHumidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_RealTimeData_lightLevel(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RealTimeData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_realTimeData_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_realTimeDataBySensor(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	return graphql.ResolveFieldStream(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Subscription_realTimeDataBySensor,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Subscription().RealTimeDataBySensor(ctx, fc.Args["sensorId"].(*string))
		},
		nil,
		ec.marshalNRealTimeData2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐRealTimeData,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Subscription_realTimeDataBySensor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "plantId":
				return ec.fieldContext_RealTimeData_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_RealTimeData_plant(ctx, field)
			case "sensorId":
				return ec.fieldContext_RealTimeData_sensorId(ctx, field)
			case "microcontrollerId":
				return ec.fieldContext_RealTimeData_microcontrollerId(ctx, field)
			case "microcontroller":
				return ec.fieldContext_RealTimeData_microcontroller(ctx, field)
			case "timestamp":
				return ec.fieldContext_RealTimeData_timestamp(ctx, field)
			case "temperature":
				return ec.fieldContext_RealTimeData_temperature(ctx, field)
			case "airHumidity":
				return ec.fieldContext_RealTimeData_airHumidity(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_RealTimeData_soilHumidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_RealTimeData_lightLevel(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RealTimeData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_realTimeDataBySensor_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_realTimeDataByMicrocontroller(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	return graphql.ResolveFieldStream(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Subscription_realTimeDataByMicrocontroller,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Subscription().RealTimeDataByMicrocontroller(ctx, fc.Args["microcontrollerId"].(*uuid.UUID))
		},
		nil,
		ec.marshalNRealTimeData2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐRealTimeData,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Subscription_realTimeDataByMicrocontroller(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "plantId":
				return ec.fieldContext_RealTimeData_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_RealTimeData_plant(ctx, field)
			case "sensorId":
				return ec.fieldContext_RealTimeData_sensorId(ctx, field)
			case "microcontrollerId":
				return ec.fieldContext_RealTimeData_microcontrollerId(ctx, field)
			case "microcontroller":
				return ec.fieldContext_RealTimeData_microcontroller(ctx, field)
			case "timestamp":
				return ec.fieldContext_RealTimeData_timestamp(ctx, field)
			case "temperature":
				return ec.fieldContext_RealTimeData_temperature(ctx, field)
			case "airHumidity":
				return ec.fieldContext_RealTimeData_airHumidity(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_RealTimeData_soilHumidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_RealTimeData_lightLevel(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RealTimeData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_realTimeDataByMicrocontroller_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_newAlerts(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	return graphql.ResolveFieldStream(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Subscription_newAlerts,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Subscription().NewAlerts(ctx, fc.Args["plantId"].(*uuid.UUID))
		},
		nil,
		ec.marshalNAlert2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐAlert,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Subscription_newAlerts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Alert_id(ctx, field)
			case "plantId":
				return ec.fieldContext_Alert_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Alert_plant(ctx, field)
			case "type":
				return ec.fieldContext_Alert_type(ctx, field)
			case "priority":
				return ec.fieldContext_Alert_priority(ctx, field)
			case "message":
				return ec.fieldContext_Alert_message(ctx, field)
			case "value":
				return ec.fieldContext_Alert_value(ctx, field)
			case "threshold":
				return ec.fieldContext_Alert_threshold(ctx, field)
			case "timestamp":
				return ec.fieldContext_Alert_timestamp(ctx, field)
			case "isRead":
				return ec.fieldContext_Alert_isRead(ctx, field)
			case "resolvedAt":
				return ec.fieldContext_Alert_resolvedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Alert", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_newAlerts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_alertStatusChanged(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	return graphql.ResolveFieldStream(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Subscription_alertStatusChanged,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Subscription().AlertStatusChanged(ctx, fc.Args["alertId"].(*uuid.UUID))
		},
		nil,
		ec.marshalNAlert2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐAlert,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Subscription_alertStatusChanged(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Alert_id(ctx, field)
			case "plantId":
				return ec.fieldContext_Alert_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Alert_plant(ctx, field)
			case "type":
				return ec.fieldContext_Alert_type(ctx, field)
			case "priority":
				return ec.fieldContext_Alert_priority(ctx, field)
			case "message":
				return ec.fieldContext_Alert_message(ctx, field)
			case "value":
				return ec.fieldContext_Alert_value(ctx, field)
			case "threshold":
				return ec.fieldContext_Alert_threshold(ctx, field)
			case "timestamp":
				return ec.fieldContext_Alert_timestamp(ctx, field)
			case "isRead":
				return ec.fieldContext_Alert_isRead(ctx, field)
			case "resolvedAt":
				return ec.fieldContext_Alert_resolvedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Alert", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_alertStatusChanged_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_plantStatusChanged(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	return graphql.ResolveFieldStream(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Subscription_plantStatusChanged,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Subscription().PlantStatusChanged(ctx, fc.Args["plantId"].(*uuid.UUID))
		},
		nil,
		ec.marshalNPlant2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlant,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Subscription_plantStatusChanged(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Plant_id(ctx, field)
			case "name":
				return ec.fieldContext_Plant_name(ctx, field)
			case "type":
				return ec.fieldContext_Plant_type(ctx, field)
			case "sensor":
				return ec.fieldContext_Plant_sensor(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Plant_microcontroller(ctx, field)
			case "score":
				return ec.fieldContext_Plant_score(ctx, field)
			case "change":
				return ec.fieldContext_Plant_change(ctx, field)
			case "status":
				return ec.fieldContext_Plant_status(ctx, field)
			case "temperature":
				return ec.fieldContext_Plant_temperature(ctx, field)
			case "humidity":
				return ec.fieldContext_Plant_humidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_Plant_lightLevel(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_Plant_soilHumidity(ctx, field)
			case "location":
				return ec.fieldContext_Plant_location(ctx, field)
			case "locationName":
				return ec.fieldContext_Plant_locationName(ctx, field)
			case "ownerUserId":
				return ec.fieldContext_Plant_ownerUserId(ctx, field)
			case "owner":
				return ec.fieldContext_Plant_owner(ctx, field)
			case "lastUpdate":
				return ec.fieldContext_Plant_lastUpdate(ctx, field)
			case "image":
				return ec.fieldContext_Plant_image(ctx, field)
			case "imageUrl":
				return ec.fieldContext_Plant_imageUrl(ctx, field)
			case "alerts":
				return ec.fieldContext_Plant_alerts(ctx, field)
			case "thresholds":
				return ec.fieldContext_Plant_thresholds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Plant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Plant_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Plant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_plantStatusChanged_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_plantHealthScoreChanged(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	return graphql.ResolveFieldStream(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Subscription_plantHealthScoreChanged,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Subscription().PlantHealthScoreChanged(ctx, fc.Args["plantId"].(*uuid.UUID))
		},
		nil,
		ec.marshalNPlant2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlant,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Subscription_plantHealthScoreChanged(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Plant_id(ctx, field)
			case "name":
				return ec.fieldContext_Plant_name(ctx, field)
			case "type":
				return ec.fieldContext_Plant_type(ctx, field)
			case "sensor":
				return ec.fieldContext_Plant_sensor(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Plant_microcontroller(ctx, field)
			case "score":
				return ec.fieldContext_Plant_score(ctx, field)
			case "change":
				return ec.fieldContext_Plant_change(ctx, field)
			case "status":
				return ec.fieldContext_Plant_status(ctx, field)
			case "temperature":
				return ec.fieldContext_Plant_temperature(ctx, field)
			case "humidity":
				return ec.fieldContext_Plant_humidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_Plant_lightLevel(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_Plant_soilHumidity(ctx, field)
			case "location":
				return ec.fieldContext_Plant_location(ctx, field)
			case "locationName":
				return ec.fieldContext_Plant_locationName(ctx, field)
			case "ownerUserId":
				return ec.fieldContext_Plant_ownerUserId(ctx, field)
			case "owner":
				return ec.fieldContext_Plant_owner(ctx, field)
			case "lastUpdate":
				return ec.fieldContext_Plant_lastUpdate(ctx, field)
			case "image":
				return ec.fieldContext_Plant_image(ctx, field)
			case "imageUrl":
				return ec.fieldContext_Plant_imageUrl(ctx, field)
			case "alerts":
				return ec.fieldContext_Plant_alerts(ctx, field)
			case "thresholds":
				return ec.fieldContext_Plant_thresholds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Plant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Plant_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Plant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_plantHealthScoreChanged_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_microcontrollerStatusChanged(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	return graphql.ResolveFieldStream(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Subscription_microcontrollerStatusChanged,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Subscription().MicrocontrollerStatusChanged(ctx, fc.Args["microcontrollerId"].(*uuid.UUID))
		},
		nil,
		ec.marshalNMicrocontroller2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐMicrocontroller,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Subscription_microcontrollerStatusChanged(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Microcontroller_id(ctx, field)
			case "uniqueId":
				return ec.fieldContext_Microcontroller_uniqueId(ctx, field)
			case "type":
				return ec.fieldContext_Microcontroller_type(ctx, field)
			case "location":
				return ec.fieldContext_Microcontroller_location(ctx, field)
			case "enabled":
				return ec.fieldContext_Microcontroller_enabled(ctx, field)
			case "plantId":
				return ec.fieldContext_Microcontroller_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Microcontroller_plant(ctx, field)
			case "status":
				return ec.fieldContext_Microcontroller_status(ctx, field)
			case "lastReading":
				return ec.fieldContext_Microcontroller_lastReading(ctx, field)
			case "isActive":
				return ec.fieldContext_Microcontroller_isActive(ctx, field)
			case "batteryLevel":
				return ec.fieldContext_Microcontroller_batteryLevel(ctx, field)
			case "signalStrength":
				return ec.fieldContext_Microcontroller_signalStrength(ctx, field)
			case "userAssociations":
				return ec.fieldContext_Microcontroller_userAssociations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Microcontroller_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Microcontroller", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_microcontrollerStatusChanged_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_sensorStatusChanged(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	return graphql.ResolveFieldStream(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Subscription_sensorStatusChanged,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Subscription().SensorStatusChanged(ctx, fc.Args["sensorId"].(*string))
		},
		nil,
		ec.marshalNSensor2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐSensor,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Subscription_sensorStatusChanged(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Sensor_id(ctx, field)
			case "plantId":
				return ec.fieldContext_Sensor_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Sensor_plant(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Sensor_microcontroller(ctx, field)
			case "status":
				return ec.fieldContext_Sensor_status(ctx, field)
			case "lastReading":
				return ec.fieldContext_Sensor_lastReading(ctx, field)
			case "location":
				return ec.fieldContext_Sensor_location(ctx, field)
			case "isActive":
				return ec.fieldContext_Sensor_isActive(ctx, field)
			case "batteryLevel":
				return ec.fieldContext_Sensor_batteryLevel(ctx, field)
			case "signalStrength":
				return ec.fieldContext_Sensor_signalStrength(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Sensor", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_sensorStatusChanged_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_deviceConnectivityChanged(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	return graphql.ResolveFieldStream(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Subscription_deviceConnectivityChanged,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Subscription().DeviceConnectivityChanged(ctx)
		},
		nil,
		ec.marshalNMicrocontroller2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐMicrocontroller,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Subscription_deviceConnectivityChanged(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Microcontroller_id(ctx, field)
			case "uniqueId":
				return ec.fieldContext_Microcontroller_uniqueId(ctx, field)
			case "type":
				return ec.fieldContext_Microcontroller_type(ctx, field)
			case "location":
				return ec.fieldContext_Microcontroller_location(ctx, field)
			case "enabled":
				return ec.fieldContext_Microcontroller_enabled(ctx, field)
			case "plantId":
				return ec.fieldContext_Microcontroller_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Microcontroller_plant(ctx, field)
			case "status":
				return ec.fieldContext_Microcontroller_status(ctx, field)
			case "lastReading":
				return ec.fieldContext_Microcontroller_lastReading(ctx, field)
			case "isActive":
				return ec.fieldContext_Microcontroller_isActive(ctx, field)
			case "batteryLevel":
				return ec.fieldContext_Microcontroller_batteryLevel(ctx, field)
			case "signalStrength":
				return ec.fieldContext_Microcontroller_signalStrength(ctx, field)
			case "userAssociations":
				return ec.fieldContext_Microcontroller_userAssociations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Microcontroller_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Microcontroller", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_userDeviceAssociationChanged(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	return graphql.ResolveFieldStream(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Subscription_userDeviceAssociationChanged,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Subscription().UserDeviceAssociationChanged(ctx, fc.Args["userId"].(uuid.UUID))
		},
		nil,
		ec.marshalNUserMicrocontrollerAssociation2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUserMicrocontrollerAssociation,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Subscription_userDeviceAssociationChanged(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userId":
				return ec.fieldContext_UserMicrocontrollerAssociation_userId(ctx, field)
			case "user":
				return ec.fieldContext_UserMicrocontrollerAssociation_user(ctx, field)
			case "microcontrollerId":
				return ec.fieldContext_UserMicrocontrollerAssociation_microcontrollerId(ctx, field)
			case "microcontroller":
				return ec.fieldContext_UserMicrocontrollerAssociation_microcontroller(ctx, field)
			case "role":
				return ec.fieldContext_UserMicrocontrollerAssociation_role(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserMicrocontrollerAssociation_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserMicrocontrollerAssociation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_userDeviceAssociationChanged_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_newNotifications(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	return graphql.ResolveFieldStream(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Subscription_newNotifications,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Subscription().NewNotifications(ctx, fc.Args["userId"].(uuid.UUID))
		},
		nil,
		ec.marshalNNotification2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐNotification,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Subscription_newNotifications(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Notification_id(ctx, field)
			case "userId":
				return ec.fieldContext_Notification_userId(ctx, field)
			case "user":
				return ec.fieldContext_Notification_user(ctx, field)
			case "type":
				return ec.fieldContext_Notification_type(ctx, field)
			case "title":
				return ec.fieldContext_Notification_title(ctx, field)
			case "message":
				return ec.fieldContext_Notification_message(ctx, field)
			case "timestamp":
				return ec.fieldContext_Notification_timestamp(ctx, field)
			case "isRead":
				return ec.fieldContext_Notification_isRead(ctx, field)
			case "plantId":
				return ec.fieldContext_Notification_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Notification_plant(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Notification", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_newNotifications_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_systemHealthChanged(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	return graphql.ResolveFieldStream(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Subscription_systemHealthChanged,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Subscription().SystemHealthChanged(ctx)
		},
		nil,
		ec.marshalNHealthStatus2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐHealthStatus,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Subscription_systemHealthChanged(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_HealthStatus_status(ctx, field)
			case "service":
				return ec.fieldContext_HealthStatus_service(ctx, field)
			case "timestamp":
				return ec.fieldContext_HealthStatus_timestamp(ctx, field)
			case "details":
				return ec.fieldContext_HealthStatus_details(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HealthStatus", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_globalStatsChanged(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	return graphql.ResolveFieldStream(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Subscription_globalStatsChanged,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Subscription().GlobalStatsChanged(ctx)
		},
		nil,
		ec.marshalNGlobalStats2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐGlobalStats,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Subscription_globalStatsChanged(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalPlants":
				return ec.fieldContext_GlobalStats_totalPlants(ctx, field)
			case "healthyPlants":
				return ec.fieldContext_GlobalStats_healthyPlants(ctx, field)
			case "alertPlants":
				return ec.fieldContext_GlobalStats_alertPlants(ctx, field)
			case "criticalPlants":
				return ec.fieldContext_GlobalStats_criticalPlants(ctx, field)
			case "averageTemperature":
				return ec.fieldContext_GlobalStats_averageTemperature(ctx, field)
			case "averageHumidity":
				return ec.fieldContext_GlobalStats_averageHumidity(ctx, field)
			case "activeSensors":
				return ec.fieldContext_GlobalStats_activeSensors(ctx, field)
			case "activeMicrocontrollers":
				return ec.fieldContext_GlobalStats_activeMicrocontrollers(ctx, field)
			case "totalMicrocontrollers":
				return ec.fieldContext_GlobalStats_totalMicrocontrollers(ctx, field)
			case "enabledMicrocontrollers":
				return ec.fieldContext_GlobalStats_enabledMicrocontrollers(ctx, field)
			case "uptime":
				return ec.fieldContext_GlobalStats_uptime(ctx, field)
			case "lastUpdated":
				return ec.fieldContext_GlobalStats_lastUpdated(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GlobalStats", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Threshold_id(ctx context.Context, field graphql.CollectedField, obj *domain.Threshold) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Threshold_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Threshold_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Threshold",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Threshold_plantId(ctx context.Context, field graphql.CollectedField, obj *domain.Threshold) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Threshold_plantId,
		func(ctx context.Context) (any, error) {
			return obj.PlantID, nil
		},
		nil,
		ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Threshold_plantId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Threshold",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Threshold_plant(ctx context.Context, field graphql.CollectedField, obj *domain.Threshold) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Threshold_plant,
		func(ctx context.Context) (any, error) {
			return obj.Plant, nil
		},
		nil,
		ec.marshalNPlant2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlant,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Threshold_plant(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Threshold",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Plant_id(ctx, field)
			case "name":
				return ec.fieldContext_Plant_name(ctx, field)
			case "type":
				return ec.fieldContext_Plant_type(ctx, field)
			case "sensor":
				return ec.fieldContext_Plant_sensor(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Plant_microcontroller(ctx, field)
			case "score":
				return ec.fieldContext_Plant_score(ctx, field)
			case "change":
				return ec.fieldContext_Plant_change(ctx, field)
			case "status":
				return ec.fieldContext_Plant_status(ctx, field)
			case "temperature":
				return ec.fieldContext_Plant_temperature(ctx, field)
			case "humidity":
				return ec.fieldContext_Plant_humidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_Plant_lightLevel(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_Plant_soilHumidity(ctx, field)
			case "location":
				return ec.fieldContext_Plant_location(ctx, field)
			case "locationName":
				return ec.fieldContext_Plant_locationName(ctx, field)
			case "ownerUserId":
				return ec.fieldContext_Plant_ownerUserId(ctx, field)
			case "owner":
				return ec.fieldContext_Plant_owner(ctx, field)
			case "lastUpdate":
				return ec.fieldContext_Plant_lastUpdate(ctx, field)
			case "image":
				return ec.fieldContext_Plant_image(ctx, field)
			case "imageUrl":
				return ec.fieldContext_Plant_imageUrl(ctx, field)
			case "alerts":
				return ec.fieldContext_Plant_alerts(ctx, field)
			case "thresholds":
				return ec.fieldContext_Plant_thresholds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Plant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Plant_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Plant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Threshold_sensorType(ctx context.Context, field graphql.CollectedField, obj *domain.Threshold) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Threshold_sensorType,
		func(ctx context.Context) (any, error) {
			return obj.SensorType, nil
		},
		nil,
		ec.marshalNSensorType2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐSensorType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Threshold_sensorType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Threshold",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SensorType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Threshold_minValue(ctx context.Context, field graphql.CollectedField, obj *domain.Threshold) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Threshold_minValue,
		func(ctx context.Context) (any, error) {
			return obj.MinValue, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Threshold_minValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Threshold",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Threshold_maxValue(ctx context.Context, field graphql.CollectedField, obj *domain.Threshold) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Threshold_maxValue,
		func(ctx context.Context) (any, error) {
			return obj.MaxValue, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Threshold_maxValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Threshold",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Threshold_criticalMin(ctx context.Context, field graphql.CollectedField, obj *domain.Threshold) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Threshold_criticalMin,
		func(ctx context.Context) (any, error) {
			return obj.CriticalMin, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Threshold_criticalMin(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Threshold",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Threshold_criticalMax(ctx context.Context, field graphql.CollectedField, obj *domain.Threshold) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Threshold_criticalMax,
		func(ctx context.Context) (any, error) {
			return obj.CriticalMax, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Threshold_criticalMax(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Threshold",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Threshold_unit(ctx context.Context, field graphql.CollectedField, obj *domain.Threshold) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Threshold_unit,
		func(ctx context.Context) (any, error) {
			return obj.Unit, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Threshold_unit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Threshold",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendAnalysis_metricName(ctx context.Context, field graphql.CollectedField, obj *domain.TrendAnalysis) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrendAnalysis_metricName,
		func(ctx context.Context) (any, error) {
			return obj.MetricName, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TrendAnalysis_metricName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendAnalysis",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendAnalysis_controllerId(ctx context.Context, field graphql.CollectedField, obj *domain.TrendAnalysis) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrendAnalysis_controllerId,
		func(ctx context.Context) (any, error) {
			return obj.ControllerID, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TrendAnalysis_controllerId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendAnalysis",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendAnalysis_microcontrollerId(ctx context.Context, field graphql.CollectedField, obj *domain.TrendAnalysis) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrendAnalysis_microcontrollerId,
		func(ctx context.Context) (any, error) {
			return obj.MicrocontrollerID, nil
		},
		nil,
		ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TrendAnalysis_microcontrollerId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendAnalysis",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendAnalysis_dataPoints(ctx context.Context, field graphql.CollectedField, obj *domain.TrendAnalysis) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrendAnalysis_dataPoints,
		func(ctx context.Context) (any, error) {
			return obj.DataPoints, nil
		},
		nil,
		ec.marshalNTrendDataPoint2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐTrendDataPointᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TrendAnalysis_dataPoints(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendAnalysis",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_TrendDataPoint_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_TrendDataPoint_value(ctx, field)
			case "interval":
				return ec.fieldContext_TrendDataPoint_interval(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrendDataPoint", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendAnalysis_interval(ctx context.Context, field graphql.CollectedField, obj *domain.TrendAnalysis) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrendAnalysis_interval,
		func(ctx context.Context) (any, error) {
			return obj.Interval, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TrendAnalysis_interval(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendAnalysis",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendAnalysis_generatedAt(ctx context.Context, field graphql.CollectedField, obj *domain.TrendAnalysis) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrendAnalysis_generatedAt,
		func(ctx context.Context) (any, error) {
			return obj.GeneratedAt, nil
		},
		nil,
		ec.marshalNDateTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TrendAnalysis_generatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendAnalysis",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendAnalysis_filters(ctx context.Context, field graphql.CollectedField, obj *domain.TrendAnalysis) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrendAnalysis_filters,
		func(ctx context.Context) (any, error) {
			return obj.Filters, nil
		},
		nil,
		ec.marshalNAnalyticsFilter2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐAnalyticsFilter,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TrendAnalysis_filters(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendAnalysis",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startTime":
				return ec.fieldContext_AnalyticsFilter_startTime(ctx, field)
			case "endTime":
				return ec.fieldContext_AnalyticsFilter_endTime(ctx, field)
			case "limit":
				return ec.fieldContext_AnalyticsFilter_limit(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AnalyticsFilter", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendAnalysis_totalPoints(ctx context.Context, field graphql.CollectedField, obj *domain.TrendAnalysis) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrendAnalysis_totalPoints,
		func(ctx context.Context) (any, error) {
			return obj.TotalPoints, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TrendAnalysis_totalPoints(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendAnalysis",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendAnalysis_averageValue(ctx context.Context, field graphql.CollectedField, obj *domain.TrendAnalysis) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrendAnalysis_averageValue,
		func(ctx context.Context) (any, error) {
			return obj.AverageValue, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TrendAnalysis_averageValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendAnalysis",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendAnalysis_minValue(ctx context.Context, field graphql.CollectedField, obj *domain.TrendAnalysis) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrendAnalysis_minValue,
		func(ctx context.Context) (any, error) {
			return obj.MinValue, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TrendAnalysis_minValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendAnalysis",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendAnalysis_maxValue(ctx context.Context, field graphql.CollectedField, obj *domain.TrendAnalysis) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrendAnalysis_maxValue,
		func(ctx context.Context) (any, error) {
			return obj.MaxValue, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TrendAnalysis_maxValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendAnalysis",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendDataPoint_timestamp(ctx context.Context, field graphql.CollectedField, obj *domain.TrendDataPoint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrendDataPoint_timestamp,
		func(ctx context.Context) (any, error) {
			return obj.Timestamp, nil
		},
		nil,
		ec.marshalNDateTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TrendDataPoint_timestamp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendDataPoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendDataPoint_value(ctx context.Context, field graphql.CollectedField, obj *domain.TrendDataPoint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrendDataPoint_value,
		func(ctx context.Context) (any, error) {
			return obj.Value, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TrendDataPoint_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendDataPoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendDataPoint_interval(ctx context.Context, field graphql.CollectedField, obj *domain.TrendDataPoint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TrendDataPoint_interval,
		func(ctx context.Context) (any, error) {
			return obj.Interval, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TrendDataPoint_interval(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendDataPoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *domain.User) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_User_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_User_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_name(ctx context.Context, field graphql.CollectedField, obj *domain.User) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_User_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_User_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_email(ctx context.Context, field graphql.CollectedField, obj *domain.User) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_User_email,
		func(ctx context.Context) (any, error) {
			return obj.Email, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_User_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_firstName(ctx context.Context, field graphql.CollectedField, obj *domain.User) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_User_firstName,
		func(ctx context.Context) (any, error) {
			return obj.FirstName, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_User_firstName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_lastName(ctx context.Context, field graphql.CollectedField, obj *domain.User) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_User_lastName,
		func(ctx context.Context) (any, error) {
			return obj.LastName, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_User_lastName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_profilePhotoUrl(ctx context.Context, field graphql.CollectedField, obj *domain.User) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_User_profilePhotoUrl,
		func(ctx context.Context) (any, error) {
			return obj.ProfilePhotoURL, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_User_profilePhotoUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_role(ctx context.Context, field graphql.CollectedField, obj *domain.User) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_User_role,
		func(ctx context.Context) (any, error) {
			return obj.Role, nil
		},
		nil,
		ec.marshalNUserRole2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUserRole,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_User_role(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserRole_id(ctx, field)
			case "name":
				return ec.fieldContext_UserRole_name(ctx, field)
			case "description":
				return ec.fieldContext_UserRole_description(ctx, field)
			case "permissions":
				return ec.fieldContext_UserRole_permissions(ctx, field)
			case "users":
				return ec.fieldContext_UserRole_users(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserRole", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_permissions(ctx context.Context, field graphql.CollectedField, obj *domain.User) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_User_permissions,
		func(ctx context.Context) (any, error) {
			return obj.Permissions, nil
		},
		nil,
		ec.marshalNPermission2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPermissionᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_User_permissions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Permission_id(ctx, field)
			case "name":
				return ec.fieldContext_Permission_name(ctx, field)
			case "description":
				return ec.fieldContext_Permission_description(ctx, field)
			case "resource":
				return ec.fieldContext_Permission_resource(ctx, field)
			case "action":
				return ec.fieldContext_Permission_action(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Permission", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_isActive(ctx context.Context, field graphql.CollectedField, obj *domain.User) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_User_isActive,
		func(ctx context.Context) (any, error) {
			return obj.IsActive, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_User_isActive(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_deviceAssociations(ctx context.Context, field graphql.CollectedField, obj *domain.User) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_User_deviceAssociations,
		func(ctx context.Context) (any, error) {
			return obj.DeviceAssociations, nil
		},
		nil,
		ec.marshalNUserMicrocontrollerAssociation2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUserMicrocontrollerAssociationᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_User_deviceAssociations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userId":
				return ec.fieldContext_UserMicrocontrollerAssociation_userId(ctx, field)
			case "user":
				return ec.fieldContext_UserMicrocontrollerAssociation_user(ctx, field)
			case "microcontrollerId":
				return ec.fieldContext_UserMicrocontrollerAssociation_microcontrollerId(ctx, field)
			case "microcontroller":
				return ec.fieldContext_UserMicrocontrollerAssociation_microcontroller(ctx, field)
			case "role":
				return ec.fieldContext_UserMicrocontrollerAssociation_role(ctx, field)
			case "createdAt":
				return ec.fieldContext_UserMicrocontrollerAssociation_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserMicrocontrollerAssociation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_ownedPlants(ctx context.Context, field graphql.CollectedField, obj *domain.User) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_User_ownedPlants,
		func(ctx context.Context) (any, error) {
			return obj.OwnedPlants, nil
		},
		nil,
		ec.marshalNPlant2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlantᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_User_ownedPlants(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Plant_id(ctx, field)
			case "name":
				return ec.fieldContext_Plant_name(ctx, field)
			case "type":
				return ec.fieldContext_Plant_type(ctx, field)
			case "sensor":
				return ec.fieldContext_Plant_sensor(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Plant_microcontroller(ctx, field)
			case "score":
				return ec.fieldContext_Plant_score(ctx, field)
			case "change":
				return ec.fieldContext_Plant_change(ctx, field)
			case "status":
				return ec.fieldContext_Plant_status(ctx, field)
			case "temperature":
				return ec.fieldContext_Plant_temperature(ctx, field)
			case "humidity":
				return ec.fieldContext_Plant_humidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_Plant_lightLevel(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_Plant_soilHumidity(ctx, field)
			case "location":
				return ec.fieldContext_Plant_location(ctx, field)
			case "locationName":
				return ec.fieldContext_Plant_locationName(ctx, field)
			case "ownerUserId":
				return ec.fieldContext_Plant_ownerUserId(ctx, field)
			case "owner":
				return ec.fieldContext_Plant_owner(ctx, field)
			case "lastUpdate":
				return ec.fieldContext_Plant_lastUpdate(ctx, field)
			case "image":
				return ec.fieldContext_Plant_image(ctx, field)
			case "imageUrl":
				return ec.fieldContext_Plant_imageUrl(ctx, field)
			case "alerts":
				return ec.fieldContext_Plant_alerts(ctx, field)
			case "thresholds":
				return ec.fieldContext_Plant_thresholds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Plant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Plant_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Plant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_createdAt(ctx context.Context, field graphql.CollectedField, obj *domain.User) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_User_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNDateTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_User_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_lastLogin(ctx context.Context, field graphql.CollectedField, obj *domain.User) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_User_lastLogin,
		func(ctx context.Context) (any, error) {
			return obj.LastLogin, nil
		},
		nil,
		ec.marshalODateTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_User_lastLogin(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserDevice_id(ctx context.Context, field graphql.CollectedField, obj *domain.UserDevice) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserDevice_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserDevice_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserDevice_uniqueId(ctx context.Context, field graphql.CollectedField, obj *domain.UserDevice) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserDevice_uniqueId,
		func(ctx context.Context) (any, error) {
			return obj.UniqueID, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserDevice_uniqueId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserDevice_type(ctx context.Context, field graphql.CollectedField, obj *domain.UserDevice) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserDevice_type,
		func(ctx context.Context) (any, error) {
			return obj.Type, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserDevice_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserDevice_location(ctx context.Context, field graphql.CollectedField, obj *domain.UserDevice) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserDevice_location,
		func(ctx context.Context) (any, error) {
			return obj.Location, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_UserDevice_location(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserDevice_enabled(ctx context.Context, field graphql.CollectedField, obj *domain.UserDevice) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserDevice_enabled,
		func(ctx context.Context) (any, error) {
			return obj.Enabled, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserDevice_enabled(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserDevice_role(ctx context.Context, field graphql.CollectedField, obj *domain.UserDevice) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserDevice_role,
		func(ctx context.Context) (any, error) {
			return obj.Role, nil
		},
		nil,
		ec.marshalNDeviceRole2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐDeviceRole,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserDevice_role(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeviceRole does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserDevice_plant(ctx context.Context, field graphql.CollectedField, obj *domain.UserDevice) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserDevice_plant,
		func(ctx context.Context) (any, error) {
			return obj.Plant, nil
		},
		nil,
		ec.marshalOPlant2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlant,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_UserDevice_plant(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Plant_id(ctx, field)
			case "name":
				return ec.fieldContext_Plant_name(ctx, field)
			case "type":
				return ec.fieldContext_Plant_type(ctx, field)
			case "sensor":
				return ec.fieldContext_Plant_sensor(ctx, field)
			case "microcontroller":
				return ec.fieldContext_Plant_microcontroller(ctx, field)
			case "score":
				return ec.fieldContext_Plant_score(ctx, field)
			case "change":
				return ec.fieldContext_Plant_change(ctx, field)
			case "status":
				return ec.fieldContext_Plant_status(ctx, field)
			case "temperature":
				return ec.fieldContext_Plant_temperature(ctx, field)
			case "humidity":
				return ec.fieldContext_Plant_humidity(ctx, field)
			case "lightLevel":
				return ec.fieldContext_Plant_lightLevel(ctx, field)
			case "soilHumidity":
				return ec.fieldContext_Plant_soilHumidity(ctx, field)
			case "location":
				return ec.fieldContext_Plant_location(ctx, field)
			case "locationName":
				return ec.fieldContext_Plant_locationName(ctx, field)
			case "ownerUserId":
				return ec.fieldContext_Plant_ownerUserId(ctx, field)
			case "owner":
				return ec.fieldContext_Plant_owner(ctx, field)
			case "lastUpdate":
				return ec.fieldContext_Plant_lastUpdate(ctx, field)
			case "image":
				return ec.fieldContext_Plant_image(ctx, field)
			case "imageUrl":
				return ec.fieldContext_Plant_imageUrl(ctx, field)
			case "alerts":
				return ec.fieldContext_Plant_alerts(ctx, field)
			case "thresholds":
				return ec.fieldContext_Plant_thresholds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Plant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Plant_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Plant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserDevice_microcontroller(ctx context.Context, field graphql.CollectedField, obj *domain.UserDevice) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserDevice_microcontroller,
		func(ctx context.Context) (any, error) {
			return obj.Microcontroller, nil
		},
		nil,
		ec.marshalNMicrocontroller2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐMicrocontroller,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserDevice_microcontroller(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Microcontroller_id(ctx, field)
			case "uniqueId":
				return ec.fieldContext_Microcontroller_uniqueId(ctx, field)
			case "type":
				return ec.fieldContext_Microcontroller_type(ctx, field)
			case "location":
				return ec.fieldContext_Microcontroller_location(ctx, field)
			case "enabled":
				return ec.fieldContext_Microcontroller_enabled(ctx, field)
			case "plantId":
				return ec.fieldContext_Microcontroller_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Microcontroller_plant(ctx, field)
			case "status":
				return ec.fieldContext_Microcontroller_status(ctx, field)
			case "lastReading":
				return ec.fieldContext_Microcontroller_lastReading(ctx, field)
			case "isActive":
				return ec.fieldContext_Microcontroller_isActive(ctx, field)
			case "batteryLevel":
				return ec.fieldContext_Microcontroller_batteryLevel(ctx, field)
			case "signalStrength":
				return ec.fieldContext_Microcontroller_signalStrength(ctx, field)
			case "userAssociations":
				return ec.fieldContext_Microcontroller_userAssociations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Microcontroller_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Microcontroller", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserDeviceList_devices(ctx context.Context, field graphql.CollectedField, obj *domain.UserDeviceList) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserDeviceList_devices,
		func(ctx context.Context) (any, error) {
			return obj.Devices, nil
		},
		nil,
		ec.marshalNUserDevice2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUserDeviceᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserDeviceList_devices(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserDeviceList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserDevice_id(ctx, field)
			case "uniqueId":
				return ec.fieldContext_UserDevice_uniqueId(ctx, field)
			case "type":
				return ec.fieldContext_UserDevice_type(ctx, field)
			case "location":
				return ec.fieldContext_UserDevice_location(ctx, field)
			case "enabled":
				return ec.fieldContext_UserDevice_enabled(ctx, field)
			case "role":
				return ec.fieldContext_UserDevice_role(ctx, field)
			case "plant":
				return ec.fieldContext_UserDevice_plant(ctx, field)
			case "microcontroller":
				return ec.fieldContext_UserDevice_microcontroller(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserDevice", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserDeviceList_totalCount(ctx context.Context, field graphql.CollectedField, obj *domain.UserDeviceList) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserDeviceList_totalCount,
		func(ctx context.Context) (any, error) {
			return obj.TotalCount, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserDeviceList_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserDeviceList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserDeviceList_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *domain.UserDeviceList) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserDeviceList_hasNextPage,
		func(ctx context.Context) (any, error) {
			return obj.HasNextPage, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserDeviceList_hasNextPage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserDeviceList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserMicrocontrollerAssociation_userId(ctx context.Context, field graphql.CollectedField, obj *domain.UserMicrocontrollerAssociation) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserMicrocontrollerAssociation_userId,
		func(ctx context.Context) (any, error) {
			return obj.UserID, nil
		},
		nil,
		ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserMicrocontrollerAssociation_userId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserMicrocontrollerAssociation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserMicrocontrollerAssociation_user(ctx context.Context, field graphql.CollectedField, obj *domain.UserMicrocontrollerAssociation) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserMicrocontrollerAssociation_user,
		func(ctx context.Context) (any, error) {
			return obj.User, nil
		},
		nil,
		ec.marshalNUser2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUser,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserMicrocontrollerAssociation_user(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserMicrocontrollerAssociation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "permissions":
				return ec.fieldContext_User_permissions(ctx, field)
			case "isActive":
				return ec.fieldContext_User_isActive(ctx, field)
			case "deviceAssociations":
				return ec.fieldContext_User_deviceAssociations(ctx, field)
			case "ownedPlants":
				return ec.fieldContext_User_ownedPlants(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastLogin":
				return ec.fieldContext_User_lastLogin(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserMicrocontrollerAssociation_microcontrollerId(ctx context.Context, field graphql.CollectedField, obj *domain.UserMicrocontrollerAssociation) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserMicrocontrollerAssociation_microcontrollerId,
		func(ctx context.Context) (any, error) {
			return obj.MicrocontrollerID, nil
		},
		nil,
		ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserMicrocontrollerAssociation_microcontrollerId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserMicrocontrollerAssociation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserMicrocontrollerAssociation_microcontroller(ctx context.Context, field graphql.CollectedField, obj *domain.UserMicrocontrollerAssociation) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserMicrocontrollerAssociation_microcontroller,
		func(ctx context.Context) (any, error) {
			return obj.Microcontroller, nil
		},
		nil,
		ec.marshalNMicrocontroller2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐMicrocontroller,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserMicrocontrollerAssociation_microcontroller(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserMicrocontrollerAssociation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Microcontroller_id(ctx, field)
			case "uniqueId":
				return ec.fieldContext_Microcontroller_uniqueId(ctx, field)
			case "type":
				return ec.fieldContext_Microcontroller_type(ctx, field)
			case "location":
				return ec.fieldContext_Microcontroller_location(ctx, field)
			case "enabled":
				return ec.fieldContext_Microcontroller_enabled(ctx, field)
			case "plantId":
				return ec.fieldContext_Microcontroller_plantId(ctx, field)
			case "plant":
				return ec.fieldContext_Microcontroller_plant(ctx, field)
			case "status":
				return ec.fieldContext_Microcontroller_status(ctx, field)
			case "lastReading":
				return ec.fieldContext_Microcontroller_lastReading(ctx, field)
			case "isActive":
				return ec.fieldContext_Microcontroller_isActive(ctx, field)
			case "batteryLevel":
				return ec.fieldContext_Microcontroller_batteryLevel(ctx, field)
			case "signalStrength":
				return ec.fieldContext_Microcontroller_signalStrength(ctx, field)
			case "userAssociations":
				return ec.fieldContext_Microcontroller_userAssociations(ctx, field)
			case "createdAt":
				return ec.fieldContext_Microcontroller_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Microcontroller", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserMicrocontrollerAssociation_role(ctx context.Context, field graphql.CollectedField, obj *domain.UserMicrocontrollerAssociation) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserMicrocontrollerAssociation_role,
		func(ctx context.Context) (any, error) {
			return obj.Role, nil
		},
		nil,
		ec.marshalNDeviceRole2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐDeviceRole,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserMicrocontrollerAssociation_role(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserMicrocontrollerAssociation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeviceRole does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserMicrocontrollerAssociation_createdAt(ctx context.Context, field graphql.CollectedField, obj *domain.UserMicrocontrollerAssociation) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserMicrocontrollerAssociation_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNDateTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserMicrocontrollerAssociation_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserMicrocontrollerAssociation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_id(ctx context.Context, field graphql.CollectedField, obj *domain.UserRole) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserRole_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserRole_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_name(ctx context.Context, field graphql.CollectedField, obj *domain.UserRole) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserRole_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserRole_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_description(ctx context.Context, field graphql.CollectedField, obj *domain.UserRole) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserRole_description,
		func(ctx context.Context) (any, error) {
			return obj.Description, nil
		},
		nil,
		ec.marshalNString2ᚖstring,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserRole_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_permissions(ctx context.Context, field graphql.CollectedField, obj *domain.UserRole) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserRole_permissions,
		func(ctx context.Context) (any, error) {
			return obj.Permissions, nil
		},
		nil,
		ec.marshalNPermission2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPermissionᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserRole_permissions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Permission_id(ctx, field)
			case "name":
				return ec.fieldContext_Permission_name(ctx, field)
			case "description":
				return ec.fieldContext_Permission_description(ctx, field)
			case "resource":
				return ec.fieldContext_Permission_resource(ctx, field)
			case "action":
				return ec.fieldContext_Permission_action(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Permission", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserRole_users(ctx context.Context, field graphql.CollectedField, obj *domain.UserRole) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserRole_users,
		func(ctx context.Context) (any, error) {
			return obj.Users, nil
		},
		nil,
		ec.marshalNUser2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUserᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserRole_users(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "permissions":
				return ec.fieldContext_User_permissions(ctx, field)
			case "isActive":
				return ec.fieldContext_User_isActive(ctx, field)
			case "deviceAssociations":
				return ec.fieldContext_User_deviceAssociations(ctx, field)
			case "ownedPlants":
				return ec.fieldContext_User_ownedPlants(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "lastLogin":
				return ec.fieldContext_User_lastLogin(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Directive_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_isRepeatable,
		func(ctx context.Context) (any, error) {
			return obj.IsRepeatable, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_locations,
		func(ctx context.Context) (any, error) {
			return obj.Locations, nil
		},
		nil,
		ec.marshalN__DirectiveLocation2ᚕstringᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_locations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_args,
		func(ctx context.Context) (any, error) {
			return obj.Args, nil
		},
		nil,
		ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Directive_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___EnumValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___EnumValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_isDeprecated,
		func(ctx context.Context) (any, error) {
			return obj.IsDeprecated(), nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_deprecationReason,
		func(ctx context.Context) (any, error) {
			return obj.DeprecationReason(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Field_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_args,
		func(ctx context.Context) (any, error) {
			return obj.Args, nil
		},
		nil,
		ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Field_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_type,
		func(ctx context.Context) (any, error) {
			return obj.Type, nil
		},
		nil,
		ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_isDeprecated,
		func(ctx context.Context) (any, error) {
			return obj.IsDeprecated(), nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_deprecationReason,
		func(ctx context.Context) (any, error) {
			return obj.DeprecationReason(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___InputValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___InputValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_type,
		func(ctx context.Context) (any, error) {
			return obj.Type, nil
		},
		nil,
		ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___InputValue_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_defaultValue,
		func(ctx context.Context) (any, error) {
			return obj.DefaultValue, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_isDeprecated,
		func(ctx context.Context) (any, error) {
			return obj.IsDeprecated(), nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___InputValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_deprecationReason,
		func(ctx context.Context) (any, error) {
			return obj.DeprecationReason(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___InputValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Schema_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_types,
		func(ctx context.Context) (any, error) {
			return obj.Types(), nil
		},
		nil,
		ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Schema_types(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_queryType,
		func(ctx context.Context) (any, error) {
			return obj.QueryType(), nil
		},
		nil,
		ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Schema_queryType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_mutationType,
		func(ctx context.Context) (any, error) {
			return obj.MutationType(), nil
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Schema_mutationType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_subscriptionType,
		func(ctx context.Context) (any, error) {
			return obj.SubscriptionType(), nil
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_directives,
		func(ctx context.Context) (any, error) {
			return obj.Directives(), nil
		},
		nil,
		ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Schema_directives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_kind,
		func(ctx context.Context) (any, error) {
			return obj.Kind(), nil
		},
		nil,
		ec.marshalN__TypeKind2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Type_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_name,
		func(ctx context.Context) (any, error) {
			return obj.Name(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_specifiedByURL,
		func(ctx context.Context) (any, error) {
			return obj.SpecifiedByURL(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_fields,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
		},
		nil,
		ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_interfaces,
		func(ctx context.Context) (any, error) {
			return obj.Interfaces(), nil
		},
		nil,
		ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_interfaces(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_possibleTypes,
		func(ctx context.Context) (any, error) {
			return obj.PossibleTypes(), nil
		},
		nil,
		ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_enumValues,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
		},
		nil,
		ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_inputFields,
		func(ctx context.Context) (any, error) {
			return obj.InputFields(), nil
		},
		nil,
		ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_inputFields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_ofType,
		func(ctx context.Context) (any, error) {
			return obj.OfType(), nil
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_ofType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_isOneOf(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_isOneOf,
		func(ctx context.Context) (any, error) {
			return obj.IsOneOf(), nil
		},
		nil,
		ec.marshalOBoolean2bool,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_isOneOf(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAnalyticsFilterInput(ctx context.Context, obj any) (AnalyticsFilterInput, error) {
	var it AnalyticsFilterInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"startTime", "endTime", "limit"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "startTime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
			data, err := ec.unmarshalODateTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartTime = data
		case "endTime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
			data, err := ec.unmarshalODateTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndTime = data
		case "limit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Limit = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCoordinatesInput(ctx context.Context, obj any) (CoordinatesInput, error) {
	var it CoordinatesInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"lat", "lng"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "lat":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lat"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Lat = data
		case "lng":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lng"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Lng = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateLocationInput(ctx context.Context, obj any) (CreateLocationInput, error) {
	var it CreateLocationInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "coordinates"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "coordinates":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coordinates"))
			data, err := ec.unmarshalOCoordinatesInput2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐCoordinatesInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Coordinates = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreatePlantInput(ctx context.Context, obj any) (CreatePlantInput, error) {
	var it CreatePlantInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "typeId", "microcontrollerId", "sensorId", "locationId", "locationName", "image", "thresholds"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "typeId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeId"))
			data, err := ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeID = data
		case "microcontrollerId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("microcontrollerId"))
			data, err := ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.MicrocontrollerID = data
		case "sensorId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sensorId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SensorID = data
		case "locationId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationId"))
			data, err := ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationID = data
		case "locationName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationName = data
		case "image":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Image = data
		case "thresholds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("thresholds"))
			data, err := ec.unmarshalOThresholdInput2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐThresholdInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Thresholds = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreatePlantTypeInput(ctx context.Context, obj any) (CreatePlantTypeInput, error) {
	var it CreatePlantTypeInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "optimalTemperature", "optimalHumidity", "optimalSoilHumidity", "optimalLightLevel", "image"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "optimalTemperature":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("optimalTemperature"))
			data, err := ec.unmarshalNRangeInput2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐRangeInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.OptimalTemperature = data
		case "optimalHumidity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("optimalHumidity"))
			data, err := ec.unmarshalNRangeInput2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐRangeInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.OptimalHumidity = data
		case "optimalSoilHumidity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("optimalSoilHumidity"))
			data, err := ec.unmarshalNRangeInput2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐRangeInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.OptimalSoilHumidity = data
		case "optimalLightLevel":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("optimalLightLevel"))
			data, err := ec.unmarshalNRangeInput2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐRangeInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.OptimalLightLevel = data
		case "image":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Image = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeviceAssociationInput(ctx context.Context, obj any) (DeviceAssociationInput, error) {
	var it DeviceAssociationInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"microcontrollerId", "plantId", "role"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "microcontrollerId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("microcontrollerId"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.MicrocontrollerID = data
		case "plantId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plantId"))
			data, err := ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlantID = data
		case "role":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			data, err := ec.unmarshalNDeviceRole2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐDeviceRole(ctx, v)
			if err != nil {
				return it, err
			}
			it.Role = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeviceFilterInput(ctx context.Context, obj any) (DeviceFilterInput, error) {
	var it DeviceFilterInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "type", "location", "enabled", "role", "limit", "offset"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "location":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Location = data
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		case "role":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			data, err := ec.unmarshalODeviceRole2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐDeviceRole(ctx, v)
			if err != nil {
				return it, err
			}
			it.Role = data
		case "limit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Limit = data
		case "offset":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Offset = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeviceUpdateInput(ctx context.Context, obj any) (DeviceUpdateInput, error) {
	var it DeviceUpdateInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"location", "plantId", "type", "enabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "location":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Location = data
		case "plantId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plantId"))
			data, err := ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlantID = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "enabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Enabled = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLoginInput(ctx context.Context, obj any) (LoginInput, error) {
	var it LoginInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"email", "password"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMultiReportInput(ctx context.Context, obj any) (MultiReportInput, error) {
	var it MultiReportInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"controllers", "metrics", "filters"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "controllers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("controllers"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Controllers = data
		case "metrics":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metrics"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Metrics = data
		case "filters":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
			data, err := ec.unmarshalNAnalyticsFilterInput2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐAnalyticsFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Filters = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRangeInput(ctx context.Context, obj any) (RangeInput, error) {
	var it RangeInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"min", "max"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "min":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Min = data
		case "max":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Max = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRegisterInput(ctx context.Context, obj any) (RegisterInput, error) {
	var it RegisterInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"email", "password", "firstName", "lastName", "profilePhoto"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "password":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		case "firstName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstName = data
		case "lastName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastName = data
		case "profilePhoto":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profilePhoto"))
			data, err := ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProfilePhoto = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputThresholdInput(ctx context.Context, obj any) (ThresholdInput, error) {
	var it ThresholdInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"sensorType", "minValue", "maxValue", "criticalMin", "criticalMax"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "sensorType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sensorType"))
			data, err := ec.unmarshalNSensorType2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐSensorType(ctx, v)
			if err != nil {
				return it, err
			}
			it.SensorType = data
		case "minValue":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minValue"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinValue = data
		case "maxValue":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxValue"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxValue = data
		case "criticalMin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("criticalMin"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CriticalMin = data
		case "criticalMax":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("criticalMax"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CriticalMax = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePlantInput(ctx context.Context, obj any) (UpdatePlantInput, error) {
	var it UpdatePlantInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "typeId", "microcontrollerId", "sensorId", "locationId", "locationName", "image"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "typeId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeId"))
			data, err := ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeID = data
		case "microcontrollerId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("microcontrollerId"))
			data, err := ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.MicrocontrollerID = data
		case "sensorId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sensorId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SensorID = data
		case "locationId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationId"))
			data, err := ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationID = data
		case "locationName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationName = data
		case "image":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Image = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var alertImplementors = []string{"Alert"}

func (ec *executionContext) _Alert(ctx context.Context, sel ast.SelectionSet, obj *domain.Alert) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alertImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Alert")
		case "id":
			out.Values[i] = ec._Alert_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "plantId":
			out.Values[i] = ec._Alert_plantId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "plant":
			out.Values[i] = ec._Alert_plant(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._Alert_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "priority":
			out.Values[i] = ec._Alert_priority(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._Alert_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._Alert_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "threshold":
			out.Values[i] = ec._Alert_threshold(ctx, field, obj)
		case "timestamp":
			out.Values[i] = ec._Alert_timestamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isRead":
			out.Values[i] = ec._Alert_isRead(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "resolvedAt":
			out.Values[i] = ec._Alert_resolvedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var analyticsFilterImplementors = []string{"AnalyticsFilter"}

func (ec *executionContext) _AnalyticsFilter(ctx context.Context, sel ast.SelectionSet, obj *domain.AnalyticsFilter) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, analyticsFilterImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AnalyticsFilter")
		case "startTime":
			out.Values[i] = ec._AnalyticsFilter_startTime(ctx, field, obj)
		case "endTime":
			out.Values[i] = ec._AnalyticsFilter_endTime(ctx, field, obj)
		case "limit":
			out.Values[i] = ec._AnalyticsFilter_limit(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var analyticsReportImplementors = []string{"AnalyticsReport"}

func (ec *executionContext) _AnalyticsReport(ctx context.Context, sel ast.SelectionSet, obj *domain.AnalyticsReport) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, analyticsReportImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AnalyticsReport")
		case "controllerId":
			out.Values[i] = ec._AnalyticsReport_controllerId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "microcontrollerId":
			out.Values[i] = ec._AnalyticsReport_microcontrollerId(ctx, field, obj)
		case "metrics":
			out.Values[i] = ec._AnalyticsReport_metrics(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "generatedAt":
			out.Values[i] = ec._AnalyticsReport_generatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dataPointsCount":
			out.Values[i] = ec._AnalyticsReport_dataPointsCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "filters":
			out.Values[i] = ec._AnalyticsReport_filters(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var chartDataImplementors = []string{"ChartData"}

func (ec *executionContext) _ChartData(ctx context.Context, sel ast.SelectionSet, obj *domain.ChartData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chartDataImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChartData")
		case "plantId":
			out.Values[i] = ec._ChartData_plantId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "time":
			out.Values[i] = ec._ChartData_time(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "temperature":
			out.Values[i] = ec._ChartData_temperature(ctx, field, obj)
		case "humidity":
			out.Values[i] = ec._ChartData_humidity(ctx, field, obj)
		case "soilHumidity":
			out.Values[i] = ec._ChartData_soilHumidity(ctx, field, obj)
		case "lightLevel":
			out.Values[i] = ec._ChartData_lightLevel(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var coordinatesImplementors = []string{"Coordinates"}

func (ec *executionContext) _Coordinates(ctx context.Context, sel ast.SelectionSet, obj *domain.Coordinates) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, coordinatesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Coordinates")
		case "lat":
			out.Values[i] = ec._Coordinates_lat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lng":
			out.Values[i] = ec._Coordinates_lng(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceOperationResultImplementors = []string{"DeviceOperationResult"}

func (ec *executionContext) _DeviceOperationResult(ctx context.Context, sel ast.SelectionSet, obj *domain.DeviceOperationResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceOperationResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceOperationResult")
		case "id":
			out.Values[i] = ec._DeviceOperationResult_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "success":
			out.Values[i] = ec._DeviceOperationResult_success(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._DeviceOperationResult_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "device":
			out.Values[i] = ec._DeviceOperationResult_device(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var globalStatsImplementors = []string{"GlobalStats"}

func (ec *executionContext) _GlobalStats(ctx context.Context, sel ast.SelectionSet, obj *domain.GlobalStats) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, globalStatsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GlobalStats")
		case "totalPlants":
			out.Values[i] = ec._GlobalStats_totalPlants(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "healthyPlants":
			out.Values[i] = ec._GlobalStats_healthyPlants(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "alertPlants":
			out.Values[i] = ec._GlobalStats_alertPlants(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "criticalPlants":
			out.Values[i] = ec._GlobalStats_criticalPlants(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "averageTemperature":
			out.Values[i] = ec._GlobalStats_averageTemperature(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "averageHumidity":
			out.Values[i] = ec._GlobalStats_averageHumidity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "activeSensors":
			out.Values[i] = ec._GlobalStats_activeSensors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "activeMicrocontrollers":
			out.Values[i] = ec._GlobalStats_activeMicrocontrollers(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalMicrocontrollers":
			out.Values[i] = ec._GlobalStats_totalMicrocontrollers(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "enabledMicrocontrollers":
			out.Values[i] = ec._GlobalStats_enabledMicrocontrollers(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uptime":
			out.Values[i] = ec._GlobalStats_uptime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lastUpdated":
			out.Values[i] = ec._GlobalStats_lastUpdated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var healthStatusImplementors = []string{"HealthStatus"}

func (ec *executionContext) _HealthStatus(ctx context.Context, sel ast.SelectionSet, obj *domain.HealthStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, healthStatusImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HealthStatus")
		case "status":
			out.Values[i] = ec._HealthStatus_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "service":
			out.Values[i] = ec._HealthStatus_service(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "timestamp":
			out.Values[i] = ec._HealthStatus_timestamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._HealthStatus_details(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var locationImplementors = []string{"Location"}

func (ec *executionContext) _Location(ctx context.Context, sel ast.SelectionSet, obj *domain.Location) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, locationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Location")
		case "id":
			out.Values[i] = ec._Location_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Location_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._Location_description(ctx, field, obj)
		case "coordinates":
			out.Values[i] = ec._Location_coordinates(ctx, field, obj)
		case "plants":
			out.Values[i] = ec._Location_plants(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sensors":
			out.Values[i] = ec._Location_sensors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "microcontrollers":
			out.Values[i] = ec._Location_microcontrollers(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var metricResultImplementors = []string{"MetricResult"}

func (ec *executionContext) _MetricResult(ctx context.Context, sel ast.SelectionSet, obj *domain.MetricResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, metricResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MetricResult")
		case "metricName":
			out.Values[i] = ec._MetricResult_metricName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._MetricResult_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "unit":
			out.Values[i] = ec._MetricResult_unit(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "calculatedAt":
			out.Values[i] = ec._MetricResult_calculatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "controllerId":
			out.Values[i] = ec._MetricResult_controllerId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "microcontrollerId":
			out.Values[i] = ec._MetricResult_microcontrollerId(ctx, field, obj)
		case "description":
			out.Values[i] = ec._MetricResult_description(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var microcontrollerImplementors = []string{"Microcontroller"}

func (ec *executionContext) _Microcontroller(ctx context.Context, sel ast.SelectionSet, obj *domain.Microcontroller) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, microcontrollerImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Microcontroller")
		case "id":
			out.Values[i] = ec._Microcontroller_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uniqueId":
			out.Values[i] = ec._Microcontroller_uniqueId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._Microcontroller_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "location":
			out.Values[i] = ec._Microcontroller_location(ctx, field, obj)
		case "enabled":
			out.Values[i] = ec._Microcontroller_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "plantId":
			out.Values[i] = ec._Microcontroller_plantId(ctx, field, obj)
		case "plant":
			out.Values[i] = ec._Microcontroller_plant(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Microcontroller_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lastReading":
			out.Values[i] = ec._Microcontroller_lastReading(ctx, field, obj)
		case "isActive":
			out.Values[i] = ec._Microcontroller_isActive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "batteryLevel":
			out.Values[i] = ec._Microcontroller_batteryLevel(ctx, field, obj)
		case "signalStrength":
			out.Values[i] = ec._Microcontroller_signalStrength(ctx, field, obj)
		case "userAssociations":
			out.Values[i] = ec._Microcontroller_userAssociations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Microcontroller_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var multiReportResponseImplementors = []string{"MultiReportResponse"}

func (ec *executionContext) _MultiReportResponse(ctx context.Context, sel ast.SelectionSet, obj *domain.MultiReportResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, multiReportResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MultiReportResponse")
		case "reports":
			out.Values[i] = ec._MultiReportResponse_reports(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "generatedAt":
			out.Values[i] = ec._MultiReportResponse_generatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalControllers":
			out.Values[i] = ec._MultiReportResponse_totalControllers(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalMetrics":
			out.Values[i] = ec._MultiReportResponse_totalMetrics(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "login":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_login(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "register":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_register(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "logout":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_logout(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "refreshToken":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_refreshToken(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createPlant":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPlant(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatePlant":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePlant(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deletePlant":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deletePlant(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "assignMicrocontrollerToPlant":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_assignMicrocontrollerToPlant(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "unassignMicrocontrollerFromPlant":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_unassignMicrocontrollerFromPlant(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "assignSensorToPlant":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_assignSensorToPlant(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "unassignSensorFromPlant":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_unassignSensorFromPlant(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateMicrocontrollerStatus":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateMicrocontrollerStatus(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "enableMicrocontroller":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_enableMicrocontroller(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "disableMicrocontroller":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_disableMicrocontroller(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateMicrocontroller":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateMicrocontroller(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "calibrateMicrocontroller":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_calibrateMicrocontroller(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "associateUserWithDevice":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_associateUserWithDevice(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateDeviceAssociation":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateDeviceAssociation(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "removeDeviceAssociation":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_removeDeviceAssociation(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateSensorStatus":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateSensorStatus(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "calibrateSensor":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_calibrateSensor(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "markAlertAsRead":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_markAlertAsRead(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "markAllAlertsAsRead":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_markAllAlertsAsRead(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "resolveAlert":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_resolveAlert(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dismissAlert":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_dismissAlert(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "markNotificationAsRead":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_markNotificationAsRead(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "markAllNotificationsAsRead":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_markAllNotificationsAsRead(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dismissNotification":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_dismissNotification(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateThresholds":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateThresholds(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "resetThresholdsToDefault":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_resetThresholdsToDefault(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createLocation":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createLocation(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateLocation":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateLocation(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteLocation":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteLocation(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createPlantType":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPlantType(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatePlantType":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePlantType(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deletePlantType":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deletePlantType(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUserProfile":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUserProfile(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deactivateUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deactivateUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "activateUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_activateUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "changePassword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_changePassword(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "terminateSession":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_terminateSession(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "terminateAllSessions":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_terminateAllSessions(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var notificationImplementors = []string{"Notification"}

func (ec *executionContext) _Notification(ctx context.Context, sel ast.SelectionSet, obj *domain.Notification) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, notificationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Notification")
		case "id":
			out.Values[i] = ec._Notification_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userId":
			out.Values[i] = ec._Notification_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "user":
			out.Values[i] = ec._Notification_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._Notification_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Notification_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._Notification_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "timestamp":
			out.Values[i] = ec._Notification_timestamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isRead":
			out.Values[i] = ec._Notification_isRead(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "plantId":
			out.Values[i] = ec._Notification_plantId(ctx, field, obj)
		case "plant":
			out.Values[i] = ec._Notification_plant(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var permissionImplementors = []string{"Permission"}

func (ec *executionContext) _Permission(ctx context.Context, sel ast.SelectionSet, obj *domain.Permission) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, permissionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Permission")
		case "id":
			out.Values[i] = ec._Permission_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Permission_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._Permission_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "resource":
			out.Values[i] = ec._Permission_resource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "action":
			out.Values[i] = ec._Permission_action(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var plantImplementors = []string{"Plant"}

func (ec *executionContext) _Plant(ctx context.Context, sel ast.SelectionSet, obj *domain.Plant) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, plantImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Plant")
		case "id":
			out.Values[i] = ec._Plant_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Plant_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			out.Values[i] = ec._Plant_type(ctx, field, obj)
		case "sensor":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Plant_sensor(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "microcontroller":
			out.Values[i] = ec._Plant_microcontroller(ctx, field, obj)
		case "score":
			out.Values[i] = ec._Plant_score(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "change":
			out.Values[i] = ec._Plant_change(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			out.Values[i] = ec._Plant_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "temperature":
			out.Values[i] = ec._Plant_temperature(ctx, field, obj)
		case "humidity":
			out.Values[i] = ec._Plant_humidity(ctx, field, obj)
		case "lightLevel":
			out.Values[i] = ec._Plant_lightLevel(ctx, field, obj)
		case "soilHumidity":
			out.Values[i] = ec._Plant_soilHumidity(ctx, field, obj)
		case "location":
			out.Values[i] = ec._Plant_location(ctx, field, obj)
		case "locationName":
			out.Values[i] = ec._Plant_locationName(ctx, field, obj)
		case "ownerUserId":
			out.Values[i] = ec._Plant_ownerUserId(ctx, field, obj)
		case "owner":
			out.Values[i] = ec._Plant_owner(ctx, field, obj)
		case "lastUpdate":
			out.Values[i] = ec._Plant_lastUpdate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "image":
			out.Values[i] = ec._Plant_image(ctx, field, obj)
		case "imageUrl":
			out.Values[i] = ec._Plant_imageUrl(ctx, field, obj)
		case "alerts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Plant_alerts(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "thresholds":
			out.Values[i] = ec._Plant_thresholds(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Plant_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Plant_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var plantTypeImplementors = []string{"PlantType"}

func (ec *executionContext) _PlantType(ctx context.Context, sel ast.SelectionSet, obj *domain.PlantType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, plantTypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlantType")
		case "id":
			out.Values[i] = ec._PlantType_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._PlantType_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._PlantType_description(ctx, field, obj)
		case "optimalTemperature":
			out.Values[i] = ec._PlantType_optimalTemperature(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "optimalHumidity":
			out.Values[i] = ec._PlantType_optimalHumidity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "optimalSoilHumidity":
			out.Values[i] = ec._PlantType_optimalSoilHumidity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "optimalLightLevel":
			out.Values[i] = ec._PlantType_optimalLightLevel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "image":
			out.Values[i] = ec._PlantType_image(ctx, field, obj)
		case "plants":
			out.Values[i] = ec._PlantType_plants(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "health":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_health(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getAllPlants":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllPlants(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getPlantById":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPlantById(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getPlantsByStatus":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPlantsByStatus(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getPlantsByLocation":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPlantsByLocation(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getPlantsByLocationName":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPlantsByLocationName(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getPlantsWithAlerts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPlantsWithAlerts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getPlantsByOwner":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPlantsByOwner(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getUserOwnedPlants":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserOwnedPlants(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getAllMicrocontrollers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllMicrocontrollers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getMicrocontrollerById":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getMicrocontrollerById(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getMicrocontrollerByUniqueId":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getMicrocontrollerByUniqueId(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getActiveMicrocontrollers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getActiveMicrocontrollers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getEnabledMicrocontrollers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getEnabledMicrocontrollers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getMicrocontrollersByLocation":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getMicrocontrollersByLocation(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getMicrocontrollersByType":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getMicrocontrollersByType(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getUserDevices":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserDevices(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getUserDeviceById":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserDeviceById(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getUserDeviceAssociations":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserDeviceAssociations(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "canUserAccessDevice":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_canUserAccessDevice(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getAllSensors":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllSensors(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getSensorById":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSensorById(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getActiveSensors":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getActiveSensors(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getSensorsByLocation":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSensorsByLocation(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getRealTimeData":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getRealTimeData(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getRealTimeDataBySensor":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getRealTimeDataBySensor(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getRealTimeDataByMicrocontroller":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getRealTimeDataByMicrocontroller(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getBulkRealTimeData":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBulkRealTimeData(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getHistoricalData":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getHistoricalData(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getHistoricalDataBySensor":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getHistoricalDataBySensor(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getHistoricalDataByMicrocontroller":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getHistoricalDataByMicrocontroller(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getAllAlerts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllAlerts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getAlertsByPlant":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAlertsByPlant(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getUnreadAlerts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUnreadAlerts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getAlertsByPriority":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAlertsByPriority(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getAlertsByType":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAlertsByType(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getCurrentUser":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getCurrentUser(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getUserById":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserById(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getAllUsers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllUsers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getUserNotifications":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserNotifications(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getUnreadNotifications":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUnreadNotifications(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getAllLocations":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllLocations(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getLocationById":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getLocationById(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getLocationWithPlants":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getLocationWithPlants(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getAllPlantTypes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllPlantTypes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getPlantTypeById":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPlantTypeById(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getThresholds":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getThresholds(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getThresholdsByType":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getThresholdsByType(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getGlobalStats":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getGlobalStats(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getPlantStats":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPlantStats(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getLocationStats":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getLocationStats(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getUserDeviceStats":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserDeviceStats(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getSingleMetricReport":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSingleMetricReport(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getMultiMetricReport":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getMultiMetricReport(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getTrendAnalysis":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getTrendAnalysis(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getSupportedMetrics":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSupportedMetrics(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getActiveSessions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getActiveSessions(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var rangeImplementors = []string{"Range"}

func (ec *executionContext) _Range(ctx context.Context, sel ast.SelectionSet, obj *domain.Range) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rangeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Range")
		case "min":
			out.Values[i] = ec._Range_min(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "max":
			out.Values[i] = ec._Range_max(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var realTimeDataImplementors = []string{"RealTimeData"}

func (ec *executionContext) _RealTimeData(ctx context.Context, sel ast.SelectionSet, obj *domain.RealTimeData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, realTimeDataImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RealTimeData")
		case "plantId":
			out.Values[i] = ec._RealTimeData_plantId(ctx, field, obj)
		case "plant":
			out.Values[i] = ec._RealTimeData_plant(ctx, field, obj)
		case "sensorId":
			out.Values[i] = ec._RealTimeData_sensorId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "microcontrollerId":
			out.Values[i] = ec._RealTimeData_microcontrollerId(ctx, field, obj)
		case "microcontroller":
			out.Values[i] = ec._RealTimeData_microcontroller(ctx, field, obj)
		case "timestamp":
			out.Values[i] = ec._RealTimeData_timestamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "temperature":
			out.Values[i] = ec._RealTimeData_temperature(ctx, field, obj)
		case "airHumidity":
			out.Values[i] = ec._RealTimeData_airHumidity(ctx, field, obj)
		case "soilHumidity":
			out.Values[i] = ec._RealTimeData_soilHumidity(ctx, field, obj)
		case "lightLevel":
			out.Values[i] = ec._RealTimeData_lightLevel(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sensorImplementors = []string{"Sensor"}

func (ec *executionContext) _Sensor(ctx context.Context, sel ast.SelectionSet, obj *domain.Sensor) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sensorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Sensor")
		case "id":
			out.Values[i] = ec._Sensor_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "plantId":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Sensor_plantId(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "plant":
			out.Values[i] = ec._Sensor_plant(ctx, field, obj)
		case "microcontroller":
			out.Values[i] = ec._Sensor_microcontroller(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Sensor_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastReading":
			out.Values[i] = ec._Sensor_lastReading(ctx, field, obj)
		case "location":
			out.Values[i] = ec._Sensor_location(ctx, field, obj)
		case "isActive":
			out.Values[i] = ec._Sensor_isActive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "batteryLevel":
			out.Values[i] = ec._Sensor_batteryLevel(ctx, field, obj)
		case "signalStrength":
			out.Values[i] = ec._Sensor_signalStrength(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sessionImplementors = []string{"Session"}

func (ec *executionContext) _Session(ctx context.Context, sel ast.SelectionSet, obj *domain.Session) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sessionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Session")
		case "userId":
			out.Values[i] = ec._Session_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "user":
			out.Values[i] = ec._Session_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "token":
			out.Values[i] = ec._Session_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "expiresAt":
			out.Values[i] = ec._Session_expiresAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deviceInfo":
			out.Values[i] = ec._Session_deviceInfo(ctx, field, obj)
		case "lastActivity":
			out.Values[i] = ec._Session_lastActivity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isActive":
			out.Values[i] = ec._Session_isActive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var subscriptionImplementors = []string{"Subscription"}

func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func(ctx context.Context) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "realTimeData":
		return ec._Subscription_realTimeData(ctx, fields[0])
	case "realTimeDataBySensor":
		return ec._Subscription_realTimeDataBySensor(ctx, fields[0])
	case "realTimeDataByMicrocontroller":
		return ec._Subscription_realTimeDataByMicrocontroller(ctx, fields[0])
	case "newAlerts":
		return ec._Subscription_newAlerts(ctx, fields[0])
	case "alertStatusChanged":
		return ec._Subscription_alertStatusChanged(ctx, fields[0])
	case "plantStatusChanged":
		return ec._Subscription_plantStatusChanged(ctx, fields[0])
	case "plantHealthScoreChanged":
		return ec._Subscription_plantHealthScoreChanged(ctx, fields[0])
	case "microcontrollerStatusChanged":
		return ec._Subscription_microcontrollerStatusChanged(ctx, fields[0])
	case "sensorStatusChanged":
		return ec._Subscription_sensorStatusChanged(ctx, fields[0])
	case "deviceConnectivityChanged":
		return ec._Subscription_deviceConnectivityChanged(ctx, fields[0])
	case "userDeviceAssociationChanged":
		return ec._Subscription_userDeviceAssociationChanged(ctx, fields[0])
	case "newNotifications":
		return ec._Subscription_newNotifications(ctx, fields[0])
	case "systemHealthChanged":
		return ec._Subscription_systemHealthChanged(ctx, fields[0])
	case "globalStatsChanged":
		return ec._Subscription_globalStatsChanged(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

var thresholdImplementors = []string{"Threshold"}

func (ec *executionContext) _Threshold(ctx context.Context, sel ast.SelectionSet, obj *domain.Threshold) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, thresholdImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Threshold")
		case "id":
			out.Values[i] = ec._Threshold_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "plantId":
			out.Values[i] = ec._Threshold_plantId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "plant":
			out.Values[i] = ec._Threshold_plant(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sensorType":
			out.Values[i] = ec._Threshold_sensorType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "minValue":
			out.Values[i] = ec._Threshold_minValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "maxValue":
			out.Values[i] = ec._Threshold_maxValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "criticalMin":
			out.Values[i] = ec._Threshold_criticalMin(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "criticalMax":
			out.Values[i] = ec._Threshold_criticalMax(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "unit":
			out.Values[i] = ec._Threshold_unit(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var trendAnalysisImplementors = []string{"TrendAnalysis"}

func (ec *executionContext) _TrendAnalysis(ctx context.Context, sel ast.SelectionSet, obj *domain.TrendAnalysis) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trendAnalysisImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrendAnalysis")
		case "metricName":
			out.Values[i] = ec._TrendAnalysis_metricName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "controllerId":
			out.Values[i] = ec._TrendAnalysis_controllerId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "microcontrollerId":
			out.Values[i] = ec._TrendAnalysis_microcontrollerId(ctx, field, obj)
		case "dataPoints":
			out.Values[i] = ec._TrendAnalysis_dataPoints(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "interval":
			out.Values[i] = ec._TrendAnalysis_interval(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "generatedAt":
			out.Values[i] = ec._TrendAnalysis_generatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "filters":
			out.Values[i] = ec._TrendAnalysis_filters(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalPoints":
			out.Values[i] = ec._TrendAnalysis_totalPoints(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "averageValue":
			out.Values[i] = ec._TrendAnalysis_averageValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "minValue":
			out.Values[i] = ec._TrendAnalysis_minValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "maxValue":
			out.Values[i] = ec._TrendAnalysis_maxValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var trendDataPointImplementors = []string{"TrendDataPoint"}

func (ec *executionContext) _TrendDataPoint(ctx context.Context, sel ast.SelectionSet, obj *domain.TrendDataPoint) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trendDataPointImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrendDataPoint")
		case "timestamp":
			out.Values[i] = ec._TrendDataPoint_timestamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._TrendDataPoint_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "interval":
			out.Values[i] = ec._TrendDataPoint_interval(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *domain.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			out.Values[i] = ec._User_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._User_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "email":
			out.Values[i] = ec._User_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "firstName":
			out.Values[i] = ec._User_firstName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lastName":
			out.Values[i] = ec._User_lastName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "profilePhotoUrl":
			out.Values[i] = ec._User_profilePhotoUrl(ctx, field, obj)
		case "role":
			out.Values[i] = ec._User_role(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "permissions":
			out.Values[i] = ec._User_permissions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isActive":
			out.Values[i] = ec._User_isActive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deviceAssociations":
			out.Values[i] = ec._User_deviceAssociations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "ownedPlants":
			out.Values[i] = ec._User_ownedPlants(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._User_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lastLogin":
			out.Values[i] = ec._User_lastLogin(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userDeviceImplementors = []string{"UserDevice"}

func (ec *executionContext) _UserDevice(ctx context.Context, sel ast.SelectionSet, obj *domain.UserDevice) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userDeviceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserDevice")
		case "id":
			out.Values[i] = ec._UserDevice_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uniqueId":
			out.Values[i] = ec._UserDevice_uniqueId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._UserDevice_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "location":
			out.Values[i] = ec._UserDevice_location(ctx, field, obj)
		case "enabled":
			out.Values[i] = ec._UserDevice_enabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "role":
			out.Values[i] = ec._UserDevice_role(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "plant":
			out.Values[i] = ec._UserDevice_plant(ctx, field, obj)
		case "microcontroller":
			out.Values[i] = ec._UserDevice_microcontroller(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userDeviceListImplementors = []string{"UserDeviceList"}

func (ec *executionContext) _UserDeviceList(ctx context.Context, sel ast.SelectionSet, obj *domain.UserDeviceList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userDeviceListImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserDeviceList")
		case "devices":
			out.Values[i] = ec._UserDeviceList_devices(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._UserDeviceList_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hasNextPage":
			out.Values[i] = ec._UserDeviceList_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userMicrocontrollerAssociationImplementors = []string{"UserMicrocontrollerAssociation"}

func (ec *executionContext) _UserMicrocontrollerAssociation(ctx context.Context, sel ast.SelectionSet, obj *domain.UserMicrocontrollerAssociation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userMicrocontrollerAssociationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserMicrocontrollerAssociation")
		case "userId":
			out.Values[i] = ec._UserMicrocontrollerAssociation_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "user":
			out.Values[i] = ec._UserMicrocontrollerAssociation_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "microcontrollerId":
			out.Values[i] = ec._UserMicrocontrollerAssociation_microcontrollerId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "microcontroller":
			out.Values[i] = ec._UserMicrocontrollerAssociation_microcontroller(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "role":
			out.Values[i] = ec._UserMicrocontrollerAssociation_role(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._UserMicrocontrollerAssociation_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userRoleImplementors = []string{"UserRole"}

func (ec *executionContext) _UserRole(ctx context.Context, sel ast.SelectionSet, obj *domain.UserRole) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userRoleImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserRole")
		case "id":
			out.Values[i] = ec._UserRole_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._UserRole_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._UserRole_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "permissions":
			out.Values[i] = ec._UserRole_permissions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "users":
			out.Values[i] = ec._UserRole_users(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___InputValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___InputValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "isOneOf":
			out.Values[i] = ec.___Type_isOneOf(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAlert2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐAlert(ctx context.Context, sel ast.SelectionSet, v domain.Alert) graphql.Marshaler {
	return ec._Alert(ctx, sel, &v)
}

func (ec *executionContext) marshalNAlert2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐAlertᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.Alert) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAlert2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐAlert(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAlert2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐAlert(ctx context.Context, sel ast.SelectionSet, v *domain.Alert) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Alert(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAlertPriority2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐAlertPriority(ctx context.Context, v any) (domain.AlertPriority, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := domain.AlertPriority(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAlertPriority2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐAlertPriority(ctx context.Context, sel ast.SelectionSet, v domain.AlertPriority) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNAlertType2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐAlertType(ctx context.Context, v any) (domain.AlertType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := domain.AlertType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAlertType2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐAlertType(ctx context.Context, sel ast.SelectionSet, v domain.AlertType) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNAnalyticsFilter2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐAnalyticsFilter(ctx context.Context, sel ast.SelectionSet, v *domain.AnalyticsFilter) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AnalyticsFilter(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAnalyticsFilterInput2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐAnalyticsFilterInput(ctx context.Context, v any) (*AnalyticsFilterInput, error) {
	res, err := ec.unmarshalInputAnalyticsFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAnalyticsReport2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐAnalyticsReportᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.AnalyticsReport) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAnalyticsReport2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐAnalyticsReport(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAnalyticsReport2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐAnalyticsReport(ctx context.Context, sel ast.SelectionSet, v *domain.AnalyticsReport) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AnalyticsReport(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNChartData2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐChartDataᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.ChartData) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNChartData2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐChartData(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNChartData2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐChartData(ctx context.Context, sel ast.SelectionSet, v *domain.ChartData) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ChartData(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateLocationInput2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐCreateLocationInput(ctx context.Context, v any) (CreateLocationInput, error) {
	res, err := ec.unmarshalInputCreateLocationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreatePlantInput2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐCreatePlantInput(ctx context.Context, v any) (CreatePlantInput, error) {
	res, err := ec.unmarshalInputCreatePlantInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreatePlantTypeInput2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐCreatePlantTypeInput(ctx context.Context, v any) (CreatePlantTypeInput, error) {
	res, err := ec.unmarshalInputCreatePlantTypeInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDateTime2timeᚐTime(ctx context.Context, v any) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDateTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNDeviceAssociationInput2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐDeviceAssociationInput(ctx context.Context, v any) (DeviceAssociationInput, error) {
	res, err := ec.unmarshalInputDeviceAssociationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDeviceRole2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐDeviceRole(ctx context.Context, v any) (domain.DeviceRole, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := domain.DeviceRole(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeviceRole2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐDeviceRole(ctx context.Context, sel ast.SelectionSet, v domain.DeviceRole) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNDeviceUpdateInput2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐDeviceUpdateInput(ctx context.Context, v any) (DeviceUpdateInput, error) {
	res, err := ec.unmarshalInputDeviceUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v any) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalFloatContext(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) marshalNGlobalStats2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐGlobalStats(ctx context.Context, sel ast.SelectionSet, v domain.GlobalStats) graphql.Marshaler {
	return ec._GlobalStats(ctx, sel, &v)
}

func (ec *executionContext) marshalNGlobalStats2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐGlobalStats(ctx context.Context, sel ast.SelectionSet, v *domain.GlobalStats) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GlobalStats(ctx, sel, v)
}

func (ec *executionContext) marshalNHealthStatus2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐHealthStatus(ctx context.Context, sel ast.SelectionSet, v domain.HealthStatus) graphql.Marshaler {
	return ec._HealthStatus(ctx, sel, &v)
}

func (ec *executionContext) marshalNHealthStatus2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐHealthStatus(ctx context.Context, sel ast.SelectionSet, v *domain.HealthStatus) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._HealthStatus(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v any) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNLocation2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐLocation(ctx context.Context, sel ast.SelectionSet, v domain.Location) graphql.Marshaler {
	return ec._Location(ctx, sel, &v)
}

func (ec *executionContext) marshalNLocation2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐLocationᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.Location) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLocation2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐLocation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNLocation2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐLocation(ctx context.Context, sel ast.SelectionSet, v *domain.Location) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Location(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLoginInput2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐLoginInput(ctx context.Context, v any) (LoginInput, error) {
	res, err := ec.unmarshalInputLoginInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMetricResult2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐMetricResultᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.MetricResult) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMetricResult2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐMetricResult(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMetricResult2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐMetricResult(ctx context.Context, sel ast.SelectionSet, v *domain.MetricResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MetricResult(ctx, sel, v)
}

func (ec *executionContext) marshalNMicrocontroller2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐMicrocontroller(ctx context.Context, sel ast.SelectionSet, v domain.Microcontroller) graphql.Marshaler {
	return ec._Microcontroller(ctx, sel, &v)
}

func (ec *executionContext) marshalNMicrocontroller2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐMicrocontrollerᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.Microcontroller) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMicrocontroller2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐMicrocontroller(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMicrocontroller2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐMicrocontroller(ctx context.Context, sel ast.SelectionSet, v *domain.Microcontroller) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Microcontroller(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMultiReportInput2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐMultiReportInput(ctx context.Context, v any) (MultiReportInput, error) {
	res, err := ec.unmarshalInputMultiReportInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMultiReportResponse2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐMultiReportResponse(ctx context.Context, sel ast.SelectionSet, v domain.MultiReportResponse) graphql.Marshaler {
	return ec._MultiReportResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNMultiReportResponse2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐMultiReportResponse(ctx context.Context, sel ast.SelectionSet, v *domain.MultiReportResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MultiReportResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNNotification2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐNotification(ctx context.Context, sel ast.SelectionSet, v domain.Notification) graphql.Marshaler {
	return ec._Notification(ctx, sel, &v)
}

func (ec *executionContext) marshalNNotification2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐNotificationᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.Notification) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNotification2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐNotification(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNNotification2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐNotification(ctx context.Context, sel ast.SelectionSet, v *domain.Notification) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Notification(ctx, sel, v)
}

func (ec *executionContext) unmarshalNNotificationType2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐNotificationType(ctx context.Context, v any) (domain.NotificationType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := domain.NotificationType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNotificationType2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐNotificationType(ctx context.Context, sel ast.SelectionSet, v domain.NotificationType) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNPermission2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPermissionᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.Permission) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPermission2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPermission(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPermission2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPermission(ctx context.Context, sel ast.SelectionSet, v *domain.Permission) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Permission(ctx, sel, v)
}

func (ec *executionContext) marshalNPlant2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlant(ctx context.Context, sel ast.SelectionSet, v domain.Plant) graphql.Marshaler {
	return ec._Plant(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlant2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlantᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.Plant) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPlant2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlant(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPlant2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlant(ctx context.Context, sel ast.SelectionSet, v *domain.Plant) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Plant(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPlantStatus2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlantStatus(ctx context.Context, v any) (domain.PlantStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := domain.PlantStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPlantStatus2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlantStatus(ctx context.Context, sel ast.SelectionSet, v domain.PlantStatus) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNPlantType2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlantType(ctx context.Context, sel ast.SelectionSet, v domain.PlantType) graphql.Marshaler {
	return ec._PlantType(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlantType2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlantTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.PlantType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPlantType2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlantType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPlantType2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlantType(ctx context.Context, sel ast.SelectionSet, v *domain.PlantType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlantType(ctx, sel, v)
}

func (ec *executionContext) marshalNRange2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐRange(ctx context.Context, sel ast.SelectionSet, v domain.Range) graphql.Marshaler {
	return ec._Range(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNRangeInput2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐRangeInput(ctx context.Context, v any) (*RangeInput, error) {
	res, err := ec.unmarshalInputRangeInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRealTimeData2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐRealTimeData(ctx context.Context, sel ast.SelectionSet, v domain.RealTimeData) graphql.Marshaler {
	return ec._RealTimeData(ctx, sel, &v)
}

func (ec *executionContext) marshalNRealTimeData2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐRealTimeDataᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.RealTimeData) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRealTimeData2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐRealTimeData(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNRealTimeData2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐRealTimeData(ctx context.Context, sel ast.SelectionSet, v *domain.RealTimeData) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RealTimeData(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRegisterInput2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐRegisterInput(ctx context.Context, v any) (RegisterInput, error) {
	res, err := ec.unmarshalInputRegisterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSensor2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐSensor(ctx context.Context, sel ast.SelectionSet, v domain.Sensor) graphql.Marshaler {
	return ec._Sensor(ctx, sel, &v)
}

func (ec *executionContext) marshalNSensor2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐSensorᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.Sensor) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSensor2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐSensor(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSensor2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐSensor(ctx context.Context, sel ast.SelectionSet, v *domain.Sensor) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Sensor(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSensorStatus2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐSensorStatus(ctx context.Context, v any) (domain.SensorStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := domain.SensorStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSensorStatus2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐSensorStatus(ctx context.Context, sel ast.SelectionSet, v domain.SensorStatus) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNSensorType2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐSensorType(ctx context.Context, v any) (domain.SensorType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := domain.SensorType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSensorType2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐSensorType(ctx context.Context, sel ast.SelectionSet, v domain.SensorType) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNSession2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐSession(ctx context.Context, sel ast.SelectionSet, v domain.Session) graphql.Marshaler {
	return ec._Session(ctx, sel, &v)
}

func (ec *executionContext) marshalNSession2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐSessionᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.Session) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSession2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐSession(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSession2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐSession(ctx context.Context, sel ast.SelectionSet, v *domain.Session) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Session(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNString2ᚖstring(ctx context.Context, v any) (*string, error) {
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	_ = sel
	res := graphql.MarshalString(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNThreshold2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐThresholdᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.Threshold) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNThreshold2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐThreshold(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNThreshold2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐThreshold(ctx context.Context, sel ast.SelectionSet, v *domain.Threshold) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Threshold(ctx, sel, v)
}

func (ec *executionContext) unmarshalNThresholdInput2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐThresholdInputᚄ(ctx context.Context, v any) ([]*ThresholdInput, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ThresholdInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNThresholdInput2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐThresholdInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNThresholdInput2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐThresholdInput(ctx context.Context, v any) (*ThresholdInput, error) {
	res, err := ec.unmarshalInputThresholdInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTimePeriod2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐTimePeriod(ctx context.Context, v any) (domain.TimePeriod, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := domain.TimePeriod(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimePeriod2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐTimePeriod(ctx context.Context, sel ast.SelectionSet, v domain.TimePeriod) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNTrendDataPoint2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐTrendDataPointᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.TrendDataPoint) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTrendDataPoint2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐTrendDataPoint(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTrendDataPoint2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐTrendDataPoint(ctx context.Context, sel ast.SelectionSet, v *domain.TrendDataPoint) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TrendDataPoint(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, v any) (uuid.UUID, error) {
	res, err := ec.unmarshalInputUUID(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, sel ast.SelectionSet, v uuid.UUID) graphql.Marshaler {
	return ec._UUID(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNUpdatePlantInput2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐUpdatePlantInput(ctx context.Context, v any) (UpdatePlantInput, error) {
	res, err := ec.unmarshalInputUpdatePlantInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUser2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUser(ctx context.Context, sel ast.SelectionSet, v domain.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUserᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.User) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUser2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUser2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUser(ctx context.Context, sel ast.SelectionSet, v *domain.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalNUserDevice2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUserDeviceᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.UserDevice) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserDevice2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUserDevice(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUserDevice2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUserDevice(ctx context.Context, sel ast.SelectionSet, v *domain.UserDevice) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserDevice(ctx, sel, v)
}

func (ec *executionContext) marshalNUserDeviceList2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUserDeviceList(ctx context.Context, sel ast.SelectionSet, v domain.UserDeviceList) graphql.Marshaler {
	return ec._UserDeviceList(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserDeviceList2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUserDeviceList(ctx context.Context, sel ast.SelectionSet, v *domain.UserDeviceList) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserDeviceList(ctx, sel, v)
}

func (ec *executionContext) marshalNUserMicrocontrollerAssociation2githubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUserMicrocontrollerAssociation(ctx context.Context, sel ast.SelectionSet, v domain.UserMicrocontrollerAssociation) graphql.Marshaler {
	return ec._UserMicrocontrollerAssociation(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserMicrocontrollerAssociation2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUserMicrocontrollerAssociationᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.UserMicrocontrollerAssociation) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserMicrocontrollerAssociation2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUserMicrocontrollerAssociation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUserMicrocontrollerAssociation2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUserMicrocontrollerAssociation(ctx context.Context, sel ast.SelectionSet, v *domain.UserMicrocontrollerAssociation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserMicrocontrollerAssociation(ctx, sel, v)
}

func (ec *executionContext) marshalNUserRole2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUserRole(ctx context.Context, sel ast.SelectionSet, v *domain.UserRole) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserRole(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOAnalyticsFilterInput2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐAnalyticsFilterInput(ctx context.Context, v any) (*AnalyticsFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAnalyticsFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAnalyticsReport2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐAnalyticsReport(ctx context.Context, sel ast.SelectionSet, v *domain.AnalyticsReport) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AnalyticsReport(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v any) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOCoordinates2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐCoordinates(ctx context.Context, sel ast.SelectionSet, v *domain.Coordinates) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Coordinates(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCoordinatesInput2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐCoordinatesInput(ctx context.Context, v any) (*CoordinatesInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCoordinatesInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODateTime2ᚖtimeᚐTime(ctx context.Context, v any) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODateTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) unmarshalODeviceFilterInput2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐDeviceFilterInput(ctx context.Context, v any) (*DeviceFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDeviceFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODeviceRole2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐDeviceRole(ctx context.Context, v any) (*domain.DeviceRole, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := domain.DeviceRole(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODeviceRole2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐDeviceRole(ctx context.Context, sel ast.SelectionSet, v *domain.DeviceRole) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v any) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) marshalOGlobalStats2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐGlobalStats(ctx context.Context, sel ast.SelectionSet, v *domain.GlobalStats) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GlobalStats(ctx, sel, v)
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v any) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) marshalOLocation2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐLocation(ctx context.Context, sel ast.SelectionSet, v *domain.Location) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Location(ctx, sel, v)
}

func (ec *executionContext) marshalOMicrocontroller2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐMicrocontroller(ctx context.Context, sel ast.SelectionSet, v *domain.Microcontroller) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Microcontroller(ctx, sel, v)
}

func (ec *executionContext) marshalOPlant2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlant(ctx context.Context, sel ast.SelectionSet, v *domain.Plant) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Plant(ctx, sel, v)
}

func (ec *executionContext) marshalOPlantType2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐPlantType(ctx context.Context, sel ast.SelectionSet, v *domain.PlantType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PlantType(ctx, sel, v)
}

func (ec *executionContext) marshalORealTimeData2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐRealTimeData(ctx context.Context, sel ast.SelectionSet, v *domain.RealTimeData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RealTimeData(ctx, sel, v)
}

func (ec *executionContext) marshalOSensor2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐSensor(ctx context.Context, sel ast.SelectionSet, v *domain.Sensor) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Sensor(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOThreshold2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐThreshold(ctx context.Context, sel ast.SelectionSet, v *domain.Threshold) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Threshold(ctx, sel, v)
}

func (ec *executionContext) unmarshalOThresholdInput2ᚕᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐThresholdInputᚄ(ctx context.Context, v any) ([]*ThresholdInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*ThresholdInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNThresholdInput2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋapiᚋgraphqlᚋgeneratedᚐThresholdInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTrendAnalysis2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐTrendAnalysis(ctx context.Context, sel ast.SelectionSet, v *domain.TrendAnalysis) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TrendAnalysis(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx context.Context, v any) ([]uuid.UUID, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]uuid.UUID, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx context.Context, sel ast.SelectionSet, v []uuid.UUID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, v any) (*uuid.UUID, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUUID(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, sel ast.SelectionSet, v *uuid.UUID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UUID(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v any) (*graphql.Upload, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalUpload(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v *graphql.Upload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalUpload(*v)
	return res
}

func (ec *executionContext) marshalOUser2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUser(ctx context.Context, sel ast.SelectionSet, v *domain.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalOUserDevice2ᚖgithubᚗcomᚋswarchᚑ2fᚑrootlyᚋrootlyᚑapigatewayᚋinternalᚋdomainᚐUserDevice(ctx context.Context, sel ast.SelectionSet, v *domain.UserDevice) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserDevice(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
