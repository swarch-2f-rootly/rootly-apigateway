// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/google/uuid"
	"github.com/swarch-2f-rootly/rootly-apigateway/internal/domain"
)

// Input for analytics query filters
type AnalyticsFilterInput struct {
	StartTime *time.Time `json:"startTime,omitempty"`
	EndTime   *time.Time `json:"endTime,omitempty"`
	Limit     *int       `json:"limit,omitempty"`
}

// Input for coordinates
type CoordinatesInput struct {
	Lat float64 `json:"lat"`
	Lng float64 `json:"lng"`
}

// Input for creating a location
type CreateLocationInput struct {
	Name        string            `json:"name"`
	Description *string           `json:"description,omitempty"`
	Coordinates *CoordinatesInput `json:"coordinates,omitempty"`
}

// Input for creating a new plant
type CreatePlantInput struct {
	Name              string            `json:"name"`
	TypeID            *uuid.UUID        `json:"typeId,omitempty"`
	MicrocontrollerID *uuid.UUID        `json:"microcontrollerId,omitempty"`
	SensorID          *string           `json:"sensorId,omitempty"`
	LocationID        *uuid.UUID        `json:"locationId,omitempty"`
	LocationName      *string           `json:"locationName,omitempty"`
	Image             *string           `json:"image,omitempty"`
	Thresholds        []*ThresholdInput `json:"thresholds,omitempty"`
}

// Input for creating plant types
type CreatePlantTypeInput struct {
	Name                string      `json:"name"`
	Description         *string     `json:"description,omitempty"`
	OptimalTemperature  *RangeInput `json:"optimalTemperature"`
	OptimalHumidity     *RangeInput `json:"optimalHumidity"`
	OptimalSoilHumidity *RangeInput `json:"optimalSoilHumidity"`
	OptimalLightLevel   *RangeInput `json:"optimalLightLevel"`
	Image               *string     `json:"image,omitempty"`
}

// Input for device association
type DeviceAssociationInput struct {
	MicrocontrollerID uuid.UUID         `json:"microcontrollerId"`
	PlantID           *uuid.UUID        `json:"plantId,omitempty"`
	Role              domain.DeviceRole `json:"role"`
}

// Input for device filtering
type DeviceFilterInput struct {
	Name     *string            `json:"name,omitempty"`
	Type     *string            `json:"type,omitempty"`
	Location *string            `json:"location,omitempty"`
	Enabled  *bool              `json:"enabled,omitempty"`
	Role     *domain.DeviceRole `json:"role,omitempty"`
	Limit    *int               `json:"limit,omitempty"`
	Offset   *int               `json:"offset,omitempty"`
}

// Input for device update
type DeviceUpdateInput struct {
	Location *string    `json:"location,omitempty"`
	PlantID  *uuid.UUID `json:"plantId,omitempty"`
	Type     *string    `json:"type,omitempty"`
	Enabled  *bool      `json:"enabled,omitempty"`
}

// Input for user login
type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// Input for multi-report analytics request
type MultiReportInput struct {
	Controllers []string              `json:"controllers"`
	Metrics     []string              `json:"metrics"`
	Filters     *AnalyticsFilterInput `json:"filters"`
}

type Mutation struct {
}

type Query struct {
}

// Input for value ranges
type RangeInput struct {
	Min float64 `json:"min"`
	Max float64 `json:"max"`
}

// Input for user registration
type RegisterInput struct {
	Email        string          `json:"email"`
	Password     string          `json:"password"`
	FirstName    string          `json:"firstName"`
	LastName     string          `json:"lastName"`
	ProfilePhoto *graphql.Upload `json:"profilePhoto,omitempty"`
}

type Subscription struct {
}

// Input for threshold configuration
type ThresholdInput struct {
	SensorType  domain.SensorType `json:"sensorType"`
	MinValue    float64           `json:"minValue"`
	MaxValue    float64           `json:"maxValue"`
	CriticalMin float64           `json:"criticalMin"`
	CriticalMax float64           `json:"criticalMax"`
}

// Input for updating a plant
type UpdatePlantInput struct {
	Name              *string    `json:"name,omitempty"`
	TypeID            *uuid.UUID `json:"typeId,omitempty"`
	MicrocontrollerID *uuid.UUID `json:"microcontrollerId,omitempty"`
	SensorID          *string    `json:"sensorId,omitempty"`
	LocationID        *uuid.UUID `json:"locationId,omitempty"`
	LocationName      *string    `json:"locationName,omitempty"`
	Image             *string    `json:"image,omitempty"`
}
